#include "kernel.hpp"

const int CHUNK = SIZE * 4;

void quick_sum(float v[CHUNK]) {
#pragma HLS inline
	float t[CHUNK / 2];
#pragma HLS array_partition variable=t

	t[0] = v[0] + v[1];
	t[1] = v[2] + v[3];
	t[2] = v[4] + v[5];
	t[3] = v[6] + v[7];
	t[4] = v[8] + v[9];
	t[5] = v[10] + v[11];
	t[6] = v[12] + v[13];
	t[7] = v[14] + v[15];
	t[8] = v[16] + v[17];
	t[9] = v[18] + v[19];
	t[10] = v[20] + v[21];
	t[11] = v[22] + v[23];
	t[12] = v[24] + v[25];
	t[13] = v[26] + v[27];
	t[14] = v[28] + v[29];
	t[15] = v[30] + v[31];
	t[16] = v[32] + v[33];
	t[17] = v[34] + v[35];
	t[18] = v[36] + v[37];
	t[19] = v[38] + v[39];
	t[20] = v[40] + v[41];
	t[21] = v[42] + v[43];
	t[22] = v[44] + v[45];
	t[23] = v[46] + v[47];
	t[24] = v[48] + v[49];
	t[25] = v[50] + v[51];
	t[26] = v[52] + v[53];
	t[27] = v[54] + v[55];
	t[28] = v[56] + v[57];
	t[29] = v[58] + v[59];
	t[30] = v[60] + v[61];
	t[31] = v[62] + v[63];
	t[32] = v[64] + v[65];
	t[33] = v[66] + v[67];
	t[34] = v[68] + v[69];
	t[35] = v[70] + v[71];
	t[36] = v[72] + v[73];
	t[37] = v[74] + v[75];
	t[38] = v[76] + v[77];
	t[39] = v[78] + v[79];
	t[40] = v[80] + v[81];
	t[41] = v[82] + v[83];
	t[42] = v[84] + v[85];
	t[43] = v[86] + v[87];
	t[44] = v[88] + v[89];
	t[45] = v[90] + v[91];
	t[46] = v[92] + v[93];
	t[47] = v[94] + v[95];
	t[48] = v[96] + v[97];
	t[49] = v[98] + v[99];
	t[50] = v[100] + v[101];
	t[51] = v[102] + v[103];
	t[52] = v[104] + v[105];
	t[53] = v[106] + v[107];
	t[54] = v[108] + v[109];
	t[55] = v[110] + v[111];
	t[56] = v[112] + v[113];
	t[57] = v[114] + v[115];
	t[58] = v[116] + v[117];
	t[59] = v[118] + v[119];
	t[60] = v[120] + v[121];
	t[61] = v[122] + v[123];
	t[62] = v[124] + v[125];
	t[63] = v[126] + v[127];
	t[64] = v[128] + v[129];
	t[65] = v[130] + v[131];
	t[66] = v[132] + v[133];
	t[67] = v[134] + v[135];
	t[68] = v[136] + v[137];
	t[69] = v[138] + v[139];
	t[70] = v[140] + v[141];
	t[71] = v[142] + v[143];
	t[72] = v[144] + v[145];
	t[73] = v[146] + v[147];
	t[74] = v[148] + v[149];
	t[75] = v[150] + v[151];
	t[76] = v[152] + v[153];
	t[77] = v[154] + v[155];
	t[78] = v[156] + v[157];
	t[79] = v[158] + v[159];
	t[80] = v[160] + v[161];
	t[81] = v[162] + v[163];
	t[82] = v[164] + v[165];
	t[83] = v[166] + v[167];
	t[84] = v[168] + v[169];
	t[85] = v[170] + v[171];
	t[86] = v[172] + v[173];
	t[87] = v[174] + v[175];
	t[88] = v[176] + v[177];
	t[89] = v[178] + v[179];
	t[90] = v[180] + v[181];
	t[91] = v[182] + v[183];
	t[92] = v[184] + v[185];
	t[93] = v[186] + v[187];
	t[94] = v[188] + v[189];
	t[95] = v[190] + v[191];
	t[96] = v[192] + v[193];
	t[97] = v[194] + v[195];
	t[98] = v[196] + v[197];
	t[99] = v[198] + v[199];
	t[100] = v[200] + v[201];
	t[101] = v[202] + v[203];
	t[102] = v[204] + v[205];
	t[103] = v[206] + v[207];
	t[104] = v[208] + v[209];
	t[105] = v[210] + v[211];
	t[106] = v[212] + v[213];
	t[107] = v[214] + v[215];
	t[108] = v[216] + v[217];
	t[109] = v[218] + v[219];
	t[110] = v[220] + v[221];
	t[111] = v[222] + v[223];
	t[112] = v[224] + v[225];
	t[113] = v[226] + v[227];
	t[114] = v[228] + v[229];
	t[115] = v[230] + v[231];
	t[116] = v[232] + v[233];
	t[117] = v[234] + v[235];
	t[118] = v[236] + v[237];
	t[119] = v[238] + v[239];
	t[120] = v[240] + v[241];
	t[121] = v[242] + v[243];
	t[122] = v[244] + v[245];
	t[123] = v[246] + v[247];
	t[124] = v[248] + v[249];
	t[125] = v[250] + v[251];
	t[126] = v[252] + v[253];
	t[127] = v[254] + v[255];
	t[128] = v[256] + v[257];
	t[129] = v[258] + v[259];
	t[130] = v[260] + v[261];
	t[131] = v[262] + v[263];
	t[132] = v[264] + v[265];
	t[133] = v[266] + v[267];
	t[134] = v[268] + v[269];
	t[135] = v[270] + v[271];
	t[136] = v[272] + v[273];
	t[137] = v[274] + v[275];
	t[138] = v[276] + v[277];
	t[139] = v[278] + v[279];
	t[140] = v[280] + v[281];
	t[141] = v[282] + v[283];
	t[142] = v[284] + v[285];
	t[143] = v[286] + v[287];
	t[144] = v[288] + v[289];
	t[145] = v[290] + v[291];
	t[146] = v[292] + v[293];
	t[147] = v[294] + v[295];
	t[148] = v[296] + v[297];
	t[149] = v[298] + v[299];
	t[150] = v[300] + v[301];
	t[151] = v[302] + v[303];
	t[152] = v[304] + v[305];
	t[153] = v[306] + v[307];
	t[154] = v[308] + v[309];
	t[155] = v[310] + v[311];
	t[156] = v[312] + v[313];
	t[157] = v[314] + v[315];
	t[158] = v[316] + v[317];
	t[159] = v[318] + v[319];

	v[0] = t[0] + t[1];
	v[1] = t[2] + t[3];
	v[2] = t[4] + t[5];
	v[3] = t[6] + t[7];
	v[4] = t[8] + t[9];
	v[5] = t[10] + t[11];
	v[6] = t[12] + t[13];
	v[7] = t[14] + t[15];
	v[8] = t[16] + t[17];
	v[9] = t[18] + t[19];
	v[10] = t[20] + t[21];
	v[11] = t[22] + t[23];
	v[12] = t[24] + t[25];
	v[13] = t[26] + t[27];
	v[14] = t[28] + t[29];
	v[15] = t[30] + t[31];
	v[16] = t[32] + t[33];
	v[17] = t[34] + t[35];
	v[18] = t[36] + t[37];
	v[19] = t[38] + t[39];
	v[20] = t[40] + t[41];
	v[21] = t[42] + t[43];
	v[22] = t[44] + t[45];
	v[23] = t[46] + t[47];
	v[24] = t[48] + t[49];
	v[25] = t[50] + t[51];
	v[26] = t[52] + t[53];
	v[27] = t[54] + t[55];
	v[28] = t[56] + t[57];
	v[29] = t[58] + t[59];
	v[30] = t[60] + t[61];
	v[31] = t[62] + t[63];
	v[32] = t[64] + t[65];
	v[33] = t[66] + t[67];
	v[34] = t[68] + t[69];
	v[35] = t[70] + t[71];
	v[36] = t[72] + t[73];
	v[37] = t[74] + t[75];
	v[38] = t[76] + t[77];
	v[39] = t[78] + t[79];
	v[40] = t[80] + t[81];
	v[41] = t[82] + t[83];
	v[42] = t[84] + t[85];
	v[43] = t[86] + t[87];
	v[44] = t[88] + t[89];
	v[45] = t[90] + t[91];
	v[46] = t[92] + t[93];
	v[47] = t[94] + t[95];
	v[48] = t[96] + t[97];
	v[49] = t[98] + t[99];
	v[50] = t[100] + t[101];
	v[51] = t[102] + t[103];
	v[52] = t[104] + t[105];
	v[53] = t[106] + t[107];
	v[54] = t[108] + t[109];
	v[55] = t[110] + t[111];
	v[56] = t[112] + t[113];
	v[57] = t[114] + t[115];
	v[58] = t[116] + t[117];
	v[59] = t[118] + t[119];
	v[60] = t[120] + t[121];
	v[61] = t[122] + t[123];
	v[62] = t[124] + t[125];
	v[63] = t[126] + t[127];
	v[64] = t[128] + t[129];
	v[65] = t[130] + t[131];
	v[66] = t[132] + t[133];
	v[67] = t[134] + t[135];
	v[68] = t[136] + t[137];
	v[69] = t[138] + t[139];
	v[70] = t[140] + t[141];
	v[71] = t[142] + t[143];
	v[72] = t[144] + t[145];
	v[73] = t[146] + t[147];
	v[74] = t[148] + t[149];
	v[75] = t[150] + t[151];
	v[76] = t[152] + t[153];
	v[77] = t[154] + t[155];
	v[78] = t[156] + t[157];
	v[79] = t[158] + t[159];

	t[0] = v[0] + v[1];
	t[1] = v[2] + v[3];
	t[2] = v[4] + v[5];
	t[3] = v[6] + v[7];
	t[4] = v[8] + v[9];
	t[5] = v[10] + v[11];
	t[6] = v[12] + v[13];
	t[7] = v[14] + v[15];
	t[8] = v[16] + v[17];
	t[9] = v[18] + v[19];
	t[10] = v[20] + v[21];
	t[11] = v[22] + v[23];
	t[12] = v[24] + v[25];
	t[13] = v[26] + v[27];
	t[14] = v[28] + v[29];
	t[15] = v[30] + v[31];
	t[16] = v[32] + v[33];
	t[17] = v[34] + v[35];
	t[18] = v[36] + v[37];
	t[19] = v[38] + v[39];
	t[20] = v[40] + v[41];
	t[21] = v[42] + v[43];
	t[22] = v[44] + v[45];
	t[23] = v[46] + v[47];
	t[24] = v[48] + v[49];
	t[25] = v[50] + v[51];
	t[26] = v[52] + v[53];
	t[27] = v[54] + v[55];
	t[28] = v[56] + v[57];
	t[29] = v[58] + v[59];
	t[30] = v[60] + v[61];
	t[31] = v[62] + v[63];
	t[32] = v[64] + v[65];
	t[33] = v[66] + v[67];
	t[34] = v[68] + v[69];
	t[35] = v[70] + v[71];
	t[36] = v[72] + v[73];
	t[37] = v[74] + v[75];
	t[38] = v[76] + v[77];
	t[39] = v[78] + v[79];

	v[0] = t[0] + t[1];
	v[1] = t[2] + t[3];
	v[2] = t[4] + t[5];
	v[3] = t[6] + t[7];
	v[4] = t[8] + t[9];
	v[5] = t[10] + t[11];
	v[6] = t[12] + t[13];
	v[7] = t[14] + t[15];
	v[8] = t[16] + t[17];
	v[9] = t[18] + t[19];
	v[10] = t[20] + t[21];
	v[11] = t[22] + t[23];
	v[12] = t[24] + t[25];
	v[13] = t[26] + t[27];
	v[14] = t[28] + t[29];
	v[15] = t[30] + t[31];
	v[16] = t[32] + t[33];
	v[17] = t[34] + t[35];
	v[18] = t[36] + t[37];
	v[19] = t[38] + t[39];

	t[0] = v[0] + v[1];
	t[1] = v[2] + v[3];
	t[5] = v[5] + v[6];
	t[6] = v[7] + v[8];
	t[10] = v[10] + v[11];
	t[11] = v[12] + v[13];
	t[15] = v[15] + v[16];
	t[16] = v[17] + v[18];

	v[2] = t[0] + t[1];
	v[7] = t[5] + t[6];
	v[12] = t[10] + t[11];
	v[17] = t[15] + t[16];

	v[0] = v[2] + v[4];
	v[5] = v[7] + v[9];
	v[10] = v[12] + v[14];
	v[15] = v[17] + v[19];
}

void kernel(
  const float in_mat[SIZE * SIZE],
  const float in_vec[SIZE],
  float out[SIZE]
) {
#pragma HLS interface axis port=in_mat
#pragma HLS interface axis port=in_vec
#pragma HLS interface axis port=out
#pragma HLS array_partition variable=in_mat cyclic factor=CHUNK
#pragma HLS array_partition variable=in_vec
#pragma HLS array_partition variable=out

	float vec[CHUNK];
#pragma HLS array_partition variable=vec

	for (int i = 0; i < SIZE; i++) {
#pragma HLS unroll
		float v = in_vec[i];
		vec[SIZE * 0 + i] = v;
		vec[SIZE * 1 + i] = v;
		vec[SIZE * 2 + i] = v;
		vec[SIZE * 3 + i] = v;
	}

	for (int i = 0, j = 0; j < SIZE; i += CHUNK, j += 4) {
#pragma HLS pipeline
		float val[CHUNK];
#pragma HLS array_partition variable=val

		for (int k = 0; k < CHUNK; k++) {
#pragma HLS unroll
			val[k] = in_mat[i + k] * vec[k];
		}

		quick_sum(val);
		out[j + 0] = val[0];
		out[j + 1] = val[5];
		out[j + 2] = val[10];
		out[j + 3] = val[15];
	}
}
