static uint64_t backbone_model0_conv1_weight[] =
// torch.Size([16, 3, 3, 3])
	0xb4b, 0xb31, 0xb4a, 0xc4a, 0xc43, 0xc42, 0xc3a, 0xc53, 0xc42,
	0x344, 0xbbb, 0xcdc, 0x655, 0xb30, 0xcdd, 0x555, 0x545, 0xb30,
	0x3b4, 0x494, 0x414, 0xbd8, 0x4c2, 0x584, 0xcdb, 0xbdb, 0x3b4,
	0xcbb, 0x213, 0x443, 0xddc, 0xbbc, 0x554, 0xcbc, 0x922, 0x444,
	0xb22, 0xdcb, 0xcca, 0xaa3, 0x2b0, 0xab2, 0x3b2, 0x4b3, 0x4a2,
	0x42a, 0x343, 0x441, 0xbb3, 0xcbb, 0x212, 0xbc9, 0xddc, 0xcb0,
	0x254, 0x665, 0x644, 0xa2b, 0x033, 0x443, 0xccc, 0xdec, 0xccb,
	0x2c3, 0x3c3, 0x3b3, 0x3b4, 0x2d2, 0xcd8, 0x4b3, 0x3d3, 0x3d2,
	0x38b, 0x3bb, 0x4bb, 0x4ba, 0x5bb, 0x4bc, 0x4cb, 0x5bb, 0x4bb,
	0x422, 0x434, 0x444, 0x444, 0xab9, 0xddc, 0x434, 0xdbb, 0xeed,
	0xddc, 0xbdc, 0x020, 0xddd, 0xcba, 0x534, 0x324, 0x434, 0x534,
	0x3c3, 0x4c4, 0x3c3, 0x5b5, 0x3d4, 0x2d3, 0x4b4, 0x4c4, 0x3c3,
	0x04b, 0xa5c, 0xb4c, 0xb4c, 0xc5c, 0xc5c, 0xb4b, 0xc5c, 0xc5c,
	0xca4, 0xd34, 0xd33, 0xc35, 0xd44, 0xd34, 0xca3, 0xc45, 0xc25,
	0x434, 0x554, 0x444, 0x223, 0x203, 0x38b, 0xccc, 0xeee, 0xcdc,
	0xccb, 0xddd, 0xccc, 0x432, 0x2b0, 0x1ab, 0x434, 0x555, 0x534,
};

static int backbone_model0_relu1_threshold[] =
// torch.Size([16, 7])
	-369, -134, 100, 334, 687, 1156, 2095,
	414, 914, 1414, 1915, 2665, 3665, 5666,
	-166, -2, 162, 326, 573, 902, 1560,
	-62, 138, 339, 540, 841, 1243, 2047,
	-338, -189, -39, 109, 334, 633, 1231,
	-681, -511, -341, -172, 82, 421, 1099,
	37, 380, 723, 1066, 1581, 2267, 3640,
	-656, -502, -348, -194, 35, 343, 959,
	-18, 270, 559, 848, 1281, 1859, 3014,
	-1788, -1462, -1135, -809, -319, 333, 1638,
	-1188, -929, -671, -412, -24, 492, 1527,
	292, 585, 879, 1173, 1613, 2200, 3375,
	-117, 32, 182, 332, 557, 857, 1457,
	-686, -472, -258, -44, 276, 704, 1560,
	-719, -549, -379, -209, 45, 385, 1064,
	-90, 43, 177, 311, 513, 781, 1317,
};

static uint64_t backbone_model0_conv2_conv1_weight[] =
// torch.Size([16, 1, 1, 16])
	0x815ca8aec2318a94,
	0x5c3104b19cb4bb42,
	0xc4223a4a243aca42,
	0x04223c5a213bdb51,
	0x22dd39a6a0c983ad,
	0xd523bb3b155b44c1,
	0x9022b5c8c34a54c3,
	0x4c003c333b94cc42,
	0xd4bb0e49434cc0ac,
	0x4dbbb3db3ca52c1b,
	0xc4a9bab9144b55d9,
	0x2334a33353550133,
	0x325b541a52842533,
	0x2346d014e22a0c83,
	0x4cba24d0bcb450c1,
	0xc4ab2d3a242cb2ca,
};

static int backbone_model0_conv2_quant1_threshold[] =
// torch.Size([16, 14])
	-856, -562, -415, -305, -232, -158, -85, -11, 61, 134, 208, 318, 465, 758,
	-695, -451, -329, -237, -176, -115, -54, 6, 67, 128, 189, 281, 403, 647,
	-313, -131, -40, 27, 73, 118, 163, 209, 254, 300, 345, 413, 504, 686,
	-444, -249, -151, -78, -29, 19, 68, 116, 165, 214, 263, 336, 433, 629,
	-891, -592, -443, -331, -257, -182, -108, -33, 41, 115, 190, 302, 451, 749,
	-786, -473, -316, -199, -120, -42, 36, 114, 192, 271, 349, 467, 623, 937,
	-448, -246, -145, -70, -19, 30, 81, 131, 182, 232, 283, 358, 459, 661,
	-470, -294, -206, -140, -96, -52, -8, 35, 80, 124, 168, 234, 322, 498,
	-871, -612, -483, -386, -321, -257, -192, -127, -63, 1, 66, 163, 292, 551,
	-858, -612, -490, -398, -337, -275, -214, -153, -91, -30, 30, 122, 245, 490,
	-563, -280, -138, -32, 38, 108, 179, 250, 321, 392, 462, 569, 710, 993,
	-260, 1, 132, 230, 296, 361, 427, 492, 558, 623, 689, 787, 918, 1180,
	-312, 35, 209, 340, 427, 514, 601, 688, 775, 862, 949, 1080, 1254, 1603,
	-832, -485, -311, -181, -94, -7, 79, 166, 253, 340, 426, 557, 730, 1078,
	-658, -439, -330, -248, -194, -139, -85, -30, 23, 78, 133, 214, 324, 542,
	-394, -263, -198, -149, -117, -84, -52, -19, 13, 45, 78, 127, 192, 322,
};
