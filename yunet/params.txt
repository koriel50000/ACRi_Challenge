static int_t<4,4> backbone_model0_conv1_weight[16][9] =
{ // torch.Size([16, 3, 3, 4])
	{ C4(0x1311), C4(0x6754), C4(0x7775), C4(0xaaab), C4(0xf0ff), C4(0x6754), C4(0x9999), C4(0xa99b), C4(0x10f0), },
	{ C4(0x5534), C4(0xffef), C4(0x2211), C4(0xbcae), C4(0x999b), C4(0x1102), C4(0x02f0), C4(0xe0f1), C4(0x6655), },
	{ C4(0x00ef), C4(0x00f0), C4(0x1101), C4(0x2313), C4(0xf0e1), C4(0xeecf), C4(0x11e2), C4(0xf0c1), C4(0xefb0), },
	{ C4(0x0fe0), C4(0x00ce), C4(0x11e0), C4(0xe0ce), C4(0x04ce), C4(0x46f1), C4(0xf0bf), C4(0x03af), C4(0x25d0), },
	{ C4(0x25de), C4(0x37cd), C4(0x12cd), C4(0x26cd), C4(0x279a), C4(0xf29b), C4(0x34f0), C4(0x25df), C4(0x12e0), },
	{ C4(0x11f1), C4(0xcdbd), C4(0xefce), C4(0x3522), C4(0x3532), C4(0x2322), C4(0x00ff), C4(0xf1ee), C4(0xffef), },
	{ C4(0xc06c), C4(0xc06d), C4(0xbf7c), C4(0xcf7d), C4(0xbd7e), C4(0xce7e), C4(0xd17e), C4(0xbd7f), C4(0xcd70), },
	{ C4(0x999a), C4(0x9999), C4(0xcbbc), C4(0xffd0), C4(0x2213), C4(0x5433), C4(0x3301), C4(0x7766), C4(0x7635), },
	{ C4(0xdcce), C4(0xffef), C4(0x3432), C4(0x9999), C4(0xefde), C4(0x7777), C4(0xdcce), C4(0x1111), C4(0x6774), },
	{ C4(0x5545), C4(0xcccd), C4(0xbaac), C4(0x3512), C4(0xddde), C4(0xa99c), C4(0x2501), C4(0x4733), C4(0x3312), },
	{ C4(0x2410), C4(0xf2fe), C4(0x1110), C4(0xf2ed), C4(0xf3ed), C4(0x2421), C4(0x02ee), C4(0x1300), C4(0x1211), },
	{ C4(0x0193), C4(0x1394), C4(0x1294), C4(0x0193), C4(0x0294), C4(0x0194), C4(0x02a3), C4(0x0394), C4(0x0193), },
	{ C4(0x0f6f), C4(0x1e71), C4(0x1f7f), C4(0xed70), C4(0xeb71), C4(0x0d71), C4(0xbd2e), C4(0xab4f), C4(0xbb4f), },
	{ C4(0x6744), C4(0x7776), C4(0x7744), C4(0x2201), C4(0xeebd), C4(0xeebe), C4(0x10e2), C4(0x999a), C4(0xaa9c), },
	{ C4(0xd904), C4(0xd946), C4(0xd913), C4(0xe945), C4(0xe967), C4(0xd955), C4(0xfc44), C4(0xfa76), C4(0xea32), },
	{ C4(0x0200), C4(0x3422), C4(0x1211), C4(0x2423), C4(0x4555), C4(0x5565), C4(0xcdbd), C4(0x9a99), C4(0xa9ab), },
};
static int backbone_model0_relu1_threshold[16][7] =
{ // torch.Size([16, 7])
	{ -35, -19, -3, 11, 27, 43, 58 },
	{ -1, 7, 15, 23, 31, 40, 48 },
	{ -29, -17, -4, 8, 20, 33, 46 },
	{ -20, -6, 8, 22, 36, 51, 65 },
	{ -7, 13, 34, 55, 76, 96, 117 },
	{ 0, 9, 17, 26, 35, 44, 53 },
	{ -30, -17, -3, 10, 23, 37, 51 },
	{ -12, 1, 14, 28, 41, 55, 69 },
	{ -26, -14, -1, 11, 23, 36, 49 },
	{ -24, -8, 7, 23, 39, 55, 72 },
	{ 43, 64, 85, 106, 128, 149, 170 },
	{ 4, 19, 34, 49, 64, 79, 94 },
	{ -6, 11, 28, 45, 62, 79, 97 },
	{ -10, 4, 19, 34, 49, 64, 78 },
	{ -51, -30, -8, 12, 34, 55, 77 },
	{ -10, 1, 13, 25, 37, 49, 61 },
};
static int_t<4,16> backbone_model0_conv2_conv1_weight[16][1] =
{ // torch.Size([16, 1, 1, 16])
	{ C16(0x026bf0b4b0ff1003L), },
	{ C16(0x010caa00f9f99dffL), },
	{ C16(0x1909afe10b170cceL), },
	{ C16(0xa3f2124412c30f7cL), },
	{ C16(0xdd9f02a73efd3f23L), },
	{ C16(0x200012a430ee4d34L), },
	{ C16(0x1212162f1a21574eL), },
	{ C16(0x4e5efd19b0f4e4deL), },
	{ C16(0x1641bb102dfaf633L), },
	{ C16(0xa1ceef5b6f22cf09L), },
	{ C16(0x19e99ac2baf11ec3L), },
	{ C16(0x667f74e3c411fb26L), },
	{ C16(0xfec260e0b0f775efL), },
	{ C16(0x4072fd0ca100f137L), },
	{ C16(0x4172f0c7f2ff1f65L), },
	{ C16(0x61dfff01317d2fdfL), },
};
static int backbone_model0_conv2_quant1_threshold[16][14] =
{ // torch.Size([16, 14])
	{ -47, -38, -29, -20, -11, -3, 5, 14, 23, 32, 41, 50, 58, 67 },
	{ -166, -150, -133, -117, -101, -85, -69, -53, -37, -20, -4, 11, 27, 43 },
	{ -117, -104, -91, -79, -66, -53, -40, -28, -15, -2, 9, 22, 35, 48 },
	{ -59, -49, -39, -30, -20, -10, -1, 8, 18, 28, 37, 47, 57, 66 },
	{ -84, -71, -59, -46, -33, -21, -8, 4, 16, 29, 41, 54, 67, 79 },
	{ -55, -43, -32, -20, -9, 2, 14, 25, 37, 49, 60, 72, 84, 95 },
	{ -52, -40, -28, -16, -4, 7, 18, 30, 42, 54, 66, 78, 89, 101 },
	{ -103, -89, -76, -63, -50, -37, -24, -11, 1, 14, 28, 41, 54, 67 },
	{ -58, -46, -33, -20, -8, 4, 16, 29, 41, 54, 67, 79, 92, 104 },
	{ -153, -135, -118, -101, -83, -66, -49, -32, -14, 2, 19, 37, 54, 71 },
	{ -125, -114, -103, -92, -80, -69, -58, -47, -35, -24, -13, -2, 9, 20 },
	{ -4, 6, 16, 27, 38, 48, 59, 70, 80, 91, 102, 112, 123, 134 },
	{ -70, -59, -48, -37, -26, -15, -4, 6, 17, 28, 39, 51, 62, 73 },
	{ -72, -60, -48, -36, -24, -13, -1, 10, 22, 34, 45, 57, 69, 81 },
	{ -29, -17, -6, 5, 16, 28, 39, 51, 62, 74, 85, 97, 108, 120 },
	{ -24, -18, -12, -5, 0, 7, 13, 20, 26, 33, 39, 46, 52, 59 },
};
static int_t<4,1> backbone_model0_conv2_conv2_weight[16][9] =
{ // torch.Size([16, 3, 3, 1])
	{ C(0xe), C(0xe), C(0xf), C(0x0), C(0xe), C(0xa), C(0x4), C(0x6), C(0x5), },
	{ C(0x5), C(0x2), C(0x3), C(0x2), C(0xf), C(0xc), C(0x2), C(0xb), C(0x9), },
	{ C(0xe), C(0xf), C(0xd), C(0xe), C(0x4), C(0x6), C(0xe), C(0x5), C(0x7), },
	{ C(0x2), C(0x2), C(0x0), C(0xd), C(0x9), C(0xa), C(0x0), C(0x2), C(0x2), },
	{ C(0x0), C(0x3), C(0x1), C(0xe), C(0x7), C(0x0), C(0x3), C(0x2), C(0xf), },
	{ C(0x2), C(0x0), C(0xf), C(0x2), C(0x5), C(0x9), C(0xf), C(0x6), C(0x9), },
	{ C(0x0), C(0x0), C(0xf), C(0x0), C(0xf), C(0xd), C(0x1), C(0xf), C(0xc), },
	{ C(0xe), C(0x1), C(0x3), C(0xf), C(0x7), C(0x1), C(0x6), C(0x2), C(0xb), },
	{ C(0xd), C(0xf), C(0xf), C(0xd), C(0x2), C(0x5), C(0xd), C(0x5), C(0x6), },
	{ C(0xd), C(0x0), C(0x2), C(0x0), C(0xa), C(0xe), C(0x1), C(0xf), C(0xa), },
	{ C(0x1), C(0x0), C(0xe), C(0x3), C(0x5), C(0x3), C(0xe), C(0x5), C(0x3), },
	{ C(0x0), C(0x1), C(0x0), C(0xe), C(0xe), C(0x2), C(0xd), C(0xa), C(0x9), },
	{ C(0x2), C(0x4), C(0x6), C(0x0), C(0x0), C(0x1), C(0xf), C(0xa), C(0x9), },
	{ C(0x1), C(0x2), C(0xe), C(0xf), C(0x9), C(0xa), C(0xd), C(0xd), C(0xf), },
	{ C(0xf), C(0xd), C(0x3), C(0x0), C(0x9), C(0x1), C(0x0), C(0x0), C(0xd), },
	{ C(0x0), C(0x1), C(0x1), C(0xd), C(0x9), C(0xa), C(0x1), C(0x4), C(0x3), },
};
static int backbone_model0_conv2_relu2_threshold[16][7] =
{ // torch.Size([16, 7])
	{ 11, 25, 40, 55, 70, 84, 99 },
	{ 19, 27, 34, 42, 50, 57, 65 },
	{ -6, 7, 22, 36, 50, 64, 78 },
	{ 10, 25, 41, 56, 72, 87, 103 },
	{ -2, 11, 25, 39, 53, 66, 80 },
	{ 17, 31, 44, 58, 72, 86, 100 },
	{ 0, 8, 17, 26, 34, 43, 52 },
	{ 10, 24, 39, 54, 68, 83, 98 },
	{ -8, 2, 12, 22, 32, 42, 52 },
	{ 12, 25, 39, 52, 66, 79, 93 },
	{ 6, 24, 41, 59, 77, 95, 113 },
	{ 11, 30, 48, 67, 86, 104, 123 },
	{ 14, 23, 33, 43, 52, 62, 71 },
	{ -13, 8, 29, 51, 72, 93, 115 },
	{ 11, 22, 34, 45, 56, 68, 79 },
	{ 15, 32, 49, 66, 83, 100, 117 },
};
static int_t<4,16> backbone_model1_conv1_conv1_weight[16][1] =
{ // torch.Size([16, 1, 1, 16])
	{ C16(0x6e1d425dbfad70a7L), },
	{ C16(0x29fdcf9e61043f2cL), },
	{ C16(0x4c745d10139c2e4dL), },
	{ C16(0x0e702f1e92c6e111L), },
	{ C16(0x371930d9f26d12a0L), },
	{ C16(0x7a61dfa01fef64e4L), },
	{ C16(0x11310ee01e990001L), },
	{ C16(0xadffceb125f2ae0bL), },
	{ C16(0xfeeec6e9b1fce6d1L), },
	{ C16(0x0013fb04c21b0910L), },
	{ C16(0x1370fb0f9104f101L), },
	{ C16(0x125e39021b430f31L), },
	{ C16(0xee31a35f4f000145L), },
	{ C16(0x11f201e6051119b0L), },
	{ C16(0x1f3a74b17ae315aeL), },
	{ C16(0x60221f5432127c14L), },
};
static int backbone_model1_conv1_quant1_threshold[16][14] =
{ // torch.Size([16, 14])
	{ -71, -60, -49, -38, -26, -15, -4, 6, 18, 29, 40, 51, 63, 74 },
	{ -77, -67, -57, -47, -37, -27, -17, -7, 2, 12, 22, 32, 43, 53 },
	{ -66, -55, -45, -34, -23, -13, -2, 8, 18, 29, 40, 50, 61, 72 },
	{ -50, -40, -30, -20, -10, 0, 9, 19, 29, 39, 49, 58, 68, 78 },
	{ -78, -65, -53, -40, -28, -15, -3, 9, 21, 34, 46, 59, 71, 84 },
	{ -54, -43, -33, -23, -13, -2, 7, 17, 27, 38, 48, 58, 68, 78 },
	{ -76, -67, -57, -48, -38, -29, -19, -10, 0, 8, 18, 27, 37, 46 },
	{ -119, -105, -90, -76, -61, -46, -32, -17, -3, 11, 26, 40, 55, 69 },
	{ -93, -82, -72, -61, -50, -39, -28, -18, -7, 3, 14, 25, 35, 46 },
	{ -100, -87, -75, -62, -49, -36, -23, -10, 2, 14, 27, 40, 53, 66 },
	{ -55, -45, -36, -26, -17, -8, 1, 10, 20, 29, 39, 48, 58, 67 },
	{ -52, -42, -32, -22, -12, -2, 7, 17, 27, 38, 48, 58, 68, 78 },
	{ -60, -49, -39, -28, -17, -7, 3, 14, 24, 35, 46, 56, 67, 78 },
	{ -60, -50, -39, -29, -18, -8, 1, 12, 22, 33, 43, 53, 64, 74 },
	{ -57, -44, -32, -19, -6, 5, 18, 30, 43, 55, 68, 80, 93, 105 },
	{ -57, -44, -30, -17, -3, 9, 23, 36, 50, 63, 76, 90, 103, 117 },
};
static int_t<4,1> backbone_model1_conv1_conv2_weight[16][9] =
{ // torch.Size([16, 3, 3, 1])
	{ C(0x1), C(0x0), C(0x2), C(0xf), C(0x5), C(0x3), C(0xe), C(0x7), C(0x4), },
	{ C(0xf), C(0x0), C(0x0), C(0x0), C(0x9), C(0xd), C(0x1), C(0xe), C(0xd), },
	{ C(0x0), C(0x2), C(0x0), C(0xf), C(0x9), C(0xe), C(0xe), C(0xf), C(0xf), },
	{ C(0x1), C(0xf), C(0x1), C(0xf), C(0x7), C(0x2), C(0x3), C(0x5), C(0xe), },
	{ C(0xf), C(0x0), C(0x0), C(0x4), C(0x7), C(0x0), C(0x0), C(0x5), C(0xe), },
	{ C(0x1), C(0xf), C(0xf), C(0x1), C(0x7), C(0xf), C(0x1), C(0x7), C(0xe), },
	{ C(0x0), C(0x3), C(0x1), C(0xf), C(0x9), C(0x1), C(0x1), C(0x9), C(0x1), },
	{ C(0xf), C(0xc), C(0x4), C(0xa), C(0x9), C(0x3), C(0x0), C(0x1), C(0x6), },
	{ C(0x1), C(0x0), C(0xe), C(0x5), C(0x7), C(0xb), C(0xf), C(0x0), C(0xc), },
	{ C(0x2), C(0x0), C(0xe), C(0x3), C(0x0), C(0x9), C(0x2), C(0x2), C(0xa), },
	{ C(0x1), C(0xf), C(0x1), C(0x2), C(0x6), C(0xd), C(0xe), C(0x9), C(0xd), },
	{ C(0x0), C(0xe), C(0xf), C(0x0), C(0xe), C(0xf), C(0x3), C(0x7), C(0x2), },
	{ C(0x3), C(0xf), C(0x0), C(0x2), C(0x7), C(0xf), C(0xd), C(0xe), C(0xf), },
	{ C(0x3), C(0x4), C(0x2), C(0x1), C(0x2), C(0x3), C(0xb), C(0x9), C(0xf), },
	{ C(0x1), C(0x3), C(0xf), C(0x2), C(0x7), C(0x0), C(0x0), C(0x3), C(0x1), },
	{ C(0xf), C(0xb), C(0xd), C(0x2), C(0xb), C(0xb), C(0x5), C(0x4), C(0x0), },
};
static int backbone_model1_conv1_relu2_threshold[16][7] =
{ // torch.Size([16, 7])
	{ -32, -13, 6, 25, 44, 64, 83 },
	{ -25, -10, 3, 18, 33, 48, 63 },
	{ -19, -5, 8, 21, 35, 49, 63 },
	{ -29, -13, 1, 17, 33, 49, 65 },
	{ -21, -6, 7, 21, 36, 50, 65 },
	{ -28, -12, 3, 19, 35, 51, 67 },
	{ -7, 5, 18, 31, 44, 57, 70 },
	{ -15, 0, 13, 28, 43, 57, 72 },
	{ -19, -7, 5, 17, 29, 41, 54 },
	{ -9, 3, 17, 31, 44, 58, 71 },
	{ -4, 7, 19, 31, 43, 55, 67 },
	{ -26, -11, 2, 17, 32, 46, 61 },
	{ -12, -1, 9, 20, 30, 41, 52 },
	{ 7, 16, 25, 34, 44, 53, 62 },
	{ -17, -1, 15, 31, 47, 63, 80 },
	{ -15, -1, 12, 26, 40, 54, 68 },
};
static int_t<4,16> backbone_model1_conv2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 16])
	{ C16(0xdfa56fe02fd00c0eL), },
	{ C16(0x0102d2036b0fee57L), },
	{ C16(0x2e2e30270e0cc21aL), },
	{ C16(0x3a1402135b5efd36L), },
	{ C16(0x60fcea6416e4244cL), },
	{ C16(0xd010f44d606e1eaaL), },
	{ C16(0xffdeccd7bad332dbL), },
	{ C16(0xbe54af1112fff5f5L), },
	{ C16(0xe3fcc5df0e7be0b4L), },
	{ C16(0x60112430f2b9beedL), },
	{ C16(0x0ff3d7100d134f0fL), },
	{ C16(0x3e3ec40aff724d60L), },
	{ C16(0xed3d127da131d110L), },
	{ C16(0x1630d136ff75f25eL), },
	{ C16(0xad3e33fe2d5f0c06L), },
	{ C16(0xc0c22a1f4496c2cbL), },
	{ C16(0xff0121340d039f0fL), },
	{ C16(0x617130fc3e0c6b59L), },
	{ C16(0x031d5d2fd3000ad4L), },
	{ C16(0xfc74cf0253aee363L), },
	{ C16(0xf00ef1301a327b3cL), },
	{ C16(0x2a6ce1cdee4f3f73L), },
	{ C16(0x911f6f5e01de1e4fL), },
	{ C16(0xf5fd4006f42d5bbeL), },
	{ C16(0x0520042e0d6b4babL), },
	{ C16(0xf2f0f2e0b51f71f0L), },
	{ C16(0x3aa1c5c02f3cb3c3L), },
	{ C16(0xc6c30f164b4fe10eL), },
	{ C16(0x0fdccf3491ef01efL), },
	{ C16(0xcaeeffa01bad3b1fL), },
	{ C16(0x4e2db7d3c0fd0411L), },
	{ C16(0x2f0760f3dd3be430L), },
	{ C16(0x5ce4e00143df046cL), },
	{ C16(0x62a5f05961fffdc0L), },
	{ C16(0x371cf01e10a14155L), },
	{ C16(0x7b01106ae1ff5d04L), },
	{ C16(0x1efeecdd6265d1deL), },
	{ C16(0x14902ae0eefff235L), },
	{ C16(0x0f1006130df09300L), },
	{ C16(0xd211fe4d631413c9L), },
	{ C16(0x59126e320009d106L), },
	{ C16(0x4913d1e13f5c5203L), },
	{ C16(0x10d2f9d230940012L), },
	{ C16(0x031a312e2ce60efdL), },
	{ C16(0xe03bf01f49225b11L), },
	{ C16(0x1b10fe0030a01471L), },
	{ C16(0xe61511ff654231f5L), },
	{ C16(0x51fea4243cfdf0c9L), },
	{ C16(0x14df22f5012e6bfaL), },
	{ C16(0x022d3ef312c40a46L), },
	{ C16(0xe0ffae04a0dbc0c0L), },
	{ C16(0xf200ada64020e1e3L), },
	{ C16(0x2c00ff00261c71ffL), },
	{ C16(0x2efd230a07c027fbL), },
	{ C16(0x1d0212f40611f21cL), },
	{ C16(0x1cecf525430262fdL), },
	{ C16(0x2161d09500f22fc3L), },
	{ C16(0x3fe5130ed34b50c2L), },
	{ C16(0xedf3fe20d60972d2L), },
	{ C16(0x20e3eee3b2ef93d1L), },
	{ C16(0x61193ed5f0001f1fL), },
	{ C16(0x2d2b231e7e639e2cL), },
	{ C16(0x2791e2034220e316L), },
	{ C16(0xb117b01d50dcaef2L), },
};
static int backbone_model1_conv2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -93, -80, -66, -53, -40, -27, -14, -1, 11, 24, 37, 50, 63, 77 },
	{ -84, -67, -49, -32, -14, 2, 19, 37, 54, 71, 89, 106, 124, 141 },
	{ -101, -86, -71, -56, -41, -26, -11, 3, 17, 32, 47, 62, 77, 92 },
	{ -66, -50, -35, -20, -4, 10, 25, 41, 56, 71, 87, 102, 118, 133 },
	{ -88, -71, -55, -39, -22, -6, 10, 26, 42, 59, 75, 92, 108, 125 },
	{ -98, -85, -72, -59, -46, -33, -20, -7, 5, 18, 31, 44, 57, 70 },
	{ -153, -134, -115, -97, -78, -59, -41, -22, -3, 14, 33, 52, 70, 89 },
	{ -105, -88, -71, -55, -38, -21, -5, 11, 27, 44, 61, 77, 94, 110 },
	{ -160, -137, -115, -92, -70, -47, -25, -2, 20, 42, 65, 87, 110, 132 },
	{ -155, -135, -115, -95, -74, -54, -34, -14, 5, 26, 46, 66, 86, 106 },
	{ -43, -34, -25, -15, -6, 2, 11, 20, 29, 38, 47, 56, 65, 74 },
	{ -86, -70, -55, -40, -24, -9, 5, 21, 36, 51, 67, 82, 98, 113 },
	{ -94, -81, -67, -54, -41, -27, -14, -1, 12, 25, 38, 51, 65, 78 },
	{ -78, -60, -43, -25, -7, 9, 27, 45, 62, 80, 98, 115, 133, 150 },
	{ -109, -92, -75, -58, -42, -25, -8, 8, 25, 42, 59, 76, 92, 109 },
	{ -129, -113, -97, -80, -64, -48, -32, -15, 0, 16, 32, 49, 65, 81 },
	{ -75, -64, -53, -42, -31, -20, -9, 1, 12, 23, 34, 45, 56, 66 },
	{ -97, -81, -64, -47, -30, -13, 2, 19, 36, 53, 70, 86, 103, 120 },
	{ -81, -69, -57, -45, -34, -22, -10, 1, 12, 24, 36, 48, 59, 71 },
	{ -81, -67, -53, -39, -25, -11, 2, 16, 30, 44, 58, 72, 86, 100 },
	{ -90, -76, -61, -47, -32, -18, -4, 10, 24, 39, 53, 67, 82, 96 },
	{ -104, -86, -69, -52, -35, -18, -1, 15, 33, 50, 67, 84, 101, 118 },
	{ -85, -72, -60, -47, -34, -22, -9, 3, 16, 28, 41, 54, 66, 79 },
	{ -86, -71, -56, -41, -26, -11, 3, 17, 32, 47, 62, 77, 92, 107 },
	{ -110, -94, -79, -63, -48, -32, -17, -2, 13, 28, 44, 59, 75, 90 },
	{ -62, -50, -38, -27, -15, -3, 8, 20, 31, 43, 55, 67, 78, 90 },
	{ -139, -119, -100, -81, -62, -43, -24, -5, 14, 33, 52, 71, 90, 109 },
	{ -75, -61, -48, -34, -20, -6, 7, 20, 34, 48, 62, 75, 89, 103 },
	{ -105, -92, -79, -66, -53, -41, -28, -15, -2, 9, 22, 35, 48, 61 },
	{ -160, -143, -125, -108, -90, -72, -55, -37, -20, -2, 14, 32, 50, 67 },
	{ -91, -77, -63, -49, -35, -21, -7, 6, 20, 34, 48, 62, 76, 90 },
	{ -40, -29, -18, -7, 3, 14, 25, 36, 47, 59, 70, 81, 92, 103 },
	{ -65, -52, -38, -25, -11, 1, 14, 28, 41, 55, 68, 81, 95, 108 },
	{ -108, -92, -75, -59, -43, -27, -11, 5, 21, 37, 53, 70, 86, 102 },
	{ -80, -64, -48, -32, -16, 0, 15, 31, 47, 63, 79, 95, 111, 127 },
	{ -82, -67, -52, -37, -22, -6, 8, 23, 38, 53, 68, 84, 99, 114 },
	{ -79, -67, -56, -45, -34, -22, -11, 0, 11, 22, 33, 45, 56, 67 },
	{ -82, -67, -53, -39, -24, -10, 4, 18, 32, 47, 61, 76, 90, 104 },
	{ -76, -64, -52, -40, -28, -17, -5, 6, 18, 30, 42, 54, 65, 77 },
	{ -125, -106, -88, -69, -51, -32, -14, 4, 23, 41, 60, 78, 97, 115 },
	{ -79, -64, -50, -35, -21, -6, 7, 22, 36, 51, 65, 80, 94, 109 },
	{ -60, -47, -34, -21, -8, 4, 18, 31, 44, 57, 70, 83, 96, 109 },
	{ -81, -69, -57, -45, -34, -22, -10, 1, 12, 24, 36, 48, 60, 71 },
	{ -83, -71, -60, -48, -36, -24, -13, -1, 10, 21, 33, 45, 56, 68 },
	{ -105, -89, -73, -57, -41, -25, -10, 5, 21, 37, 53, 69, 84, 100 },
	{ -93, -77, -61, -46, -30, -15, 0, 16, 31, 47, 63, 78, 94, 109 },
	{ -73, -54, -34, -14, 5, 24, 44, 64, 84, 103, 123, 143, 163, 182 },
	{ -124, -108, -93, -77, -62, -46, -31, -15, 0, 15, 31, 46, 62, 77 },
	{ -84, -70, -55, -40, -25, -11, 3, 18, 33, 48, 62, 77, 92, 107 },
	{ -68, -54, -41, -28, -15, -2, 10, 23, 36, 50, 63, 76, 89, 102 },
	{ -160, -144, -128, -111, -95, -79, -63, -47, -30, -14, 1, 17, 33, 49 },
	{ -84, -72, -59, -46, -33, -20, -7, 5, 18, 31, 44, 56, 69, 82 },
	{ -61, -49, -37, -25, -14, -2, 9, 20, 32, 44, 55, 67, 79, 90 },
	{ -110, -94, -77, -60, -43, -27, -10, 6, 23, 39, 56, 73, 89, 106 },
	{ -46, -36, -26, -16, -5, 4, 14, 24, 34, 44, 54, 64, 74, 84 },
	{ -49, -37, -26, -14, -2, 9, 21, 33, 44, 56, 68, 80, 92, 104 },
	{ -64, -52, -41, -30, -19, -8, 2, 13, 24, 36, 47, 58, 69, 80 },
	{ -67, -54, -41, -28, -15, -2, 10, 23, 36, 49, 62, 75, 88, 100 },
	{ -97, -81, -65, -50, -34, -19, -3, 12, 27, 43, 58, 74, 90, 105 },
	{ -115, -100, -85, -70, -56, -41, -26, -11, 3, 18, 32, 47, 62, 77 },
	{ -72, -59, -46, -33, -20, -7, 5, 18, 31, 44, 57, 70, 83, 96 },
	{ -94, -80, -67, -53, -39, -26, -12, 0, 14, 28, 41, 55, 68, 82 },
	{ -75, -57, -39, -21, -3, 14, 32, 50, 68, 86, 105, 123, 141, 159 },
	{ -128, -113, -97, -82, -67, -52, -36, -21, -6, 8, 24, 39, 54, 69 },
};
static int_t<4,1> backbone_model1_conv2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xb), C(0xe), C(0xb), C(0x2), C(0x7), C(0x2), C(0x4), C(0x0), C(0x1), },
	{ C(0xc), C(0xc), C(0xb), C(0xf), C(0xe), C(0xc), C(0x3), C(0x7), C(0x2), },
	{ C(0xd), C(0xa), C(0xe), C(0xc), C(0x3), C(0x3), C(0xb), C(0x0), C(0x3), },
	{ C(0x2), C(0x2), C(0x3), C(0x2), C(0x0), C(0x3), C(0xb), C(0x9), C(0xa), },
	{ C(0x9), C(0x9), C(0x0), C(0xf), C(0xc), C(0x1), C(0x2), C(0x2), C(0x5), },
	{ C(0x1), C(0x1), C(0xf), C(0xf), C(0xd), C(0x5), C(0x9), C(0xa), C(0x7), },
	{ C(0xe), C(0x2), C(0x1), C(0x2), C(0xe), C(0xc), C(0x1), C(0xb), C(0xa), },
	{ C(0xe), C(0x5), C(0x7), C(0xd), C(0x0), C(0x4), C(0xc), C(0xe), C(0xf), },
	{ C(0x0), C(0xd), C(0x9), C(0xf), C(0x0), C(0xf), C(0xf), C(0xf), C(0x1), },
	{ C(0xd), C(0xd), C(0xd), C(0x1), C(0xc), C(0xf), C(0xe), C(0xf), C(0xf), },
	{ C(0xf), C(0xb), C(0xc), C(0x2), C(0x7), C(0x7), C(0x1), C(0xe), C(0xe), },
	{ C(0x1), C(0xf), C(0x1), C(0x6), C(0xa), C(0x9), C(0xf), C(0x0), C(0xe), },
	{ C(0xf), C(0x3), C(0x5), C(0x1), C(0x4), C(0x2), C(0x1), C(0x3), C(0x1), },
	{ C(0x1), C(0xd), C(0xa), C(0x3), C(0x7), C(0xa), C(0x3), C(0x7), C(0xa), },
	{ C(0xa), C(0xf), C(0x1), C(0xb), C(0xa), C(0x1), C(0xf), C(0xe), C(0x4), },
	{ C(0x2), C(0xa), C(0x9), C(0x4), C(0xf), C(0xe), C(0x1), C(0x0), C(0x0), },
	{ C(0x4), C(0xf), C(0xc), C(0x4), C(0x9), C(0xf), C(0x2), C(0xd), C(0x0), },
	{ C(0xf), C(0x0), C(0x1), C(0xf), C(0xf), C(0xf), C(0x0), C(0x9), C(0xa), },
	{ C(0x3), C(0xd), C(0x1), C(0x3), C(0x4), C(0x3), C(0xd), C(0xb), C(0x9), },
	{ C(0x3), C(0x4), C(0xa), C(0x1), C(0x7), C(0x0), C(0xf), C(0x0), C(0x4), },
	{ C(0x2), C(0x3), C(0x2), C(0x2), C(0x7), C(0x0), C(0xc), C(0xa), C(0xf), },
	{ C(0xf), C(0xd), C(0xc), C(0x2), C(0x4), C(0x3), C(0xe), C(0x6), C(0x5), },
	{ C(0x4), C(0xe), C(0xa), C(0x6), C(0x4), C(0x9), C(0x0), C(0x4), C(0xd), },
	{ C(0x1), C(0x3), C(0x2), C(0x7), C(0x2), C(0xf), C(0x2), C(0xc), C(0xa), },
	{ C(0xe), C(0xc), C(0x3), C(0x1), C(0x6), C(0xf), C(0x7), C(0x6), C(0xb), },
	{ C(0xc), C(0x5), C(0x0), C(0x0), C(0x6), C(0xd), C(0x0), C(0xe), C(0x0), },
	{ C(0x1), C(0x3), C(0x2), C(0xf), C(0x9), C(0xb), C(0xc), C(0x0), C(0xc), },
	{ C(0x0), C(0x6), C(0x7), C(0xc), C(0x5), C(0x1), C(0xb), C(0xe), C(0xc), },
	{ C(0x2), C(0x2), C(0x1), C(0x6), C(0xe), C(0xa), C(0x6), C(0x1), C(0xb), },
	{ C(0x6), C(0x5), C(0x5), C(0xf), C(0xc), C(0x4), C(0x9), C(0x9), C(0x9), },
	{ C(0x1), C(0x0), C(0x3), C(0x1), C(0x7), C(0x7), C(0xf), C(0xb), C(0xa), },
	{ C(0x0), C(0xf), C(0x0), C(0x0), C(0x7), C(0x7), C(0x0), C(0xb), C(0xb), },
	{ C(0xd), C(0x1), C(0x2), C(0xa), C(0x3), C(0x7), C(0xf), C(0xb), C(0x1), },
	{ C(0x3), C(0xe), C(0x2), C(0x1), C(0x5), C(0xe), C(0x0), C(0x6), C(0x1), },
	{ C(0xd), C(0xf), C(0xf), C(0x2), C(0x7), C(0x4), C(0x5), C(0x2), C(0xf), },
	{ C(0xc), C(0xd), C(0x1), C(0x9), C(0xf), C(0x1), C(0xb), C(0x2), C(0xf), },
	{ C(0xd), C(0xd), C(0x0), C(0xe), C(0x6), C(0x7), C(0xd), C(0x0), C(0x2), },
	{ C(0xe), C(0x1), C(0xb), C(0x1), C(0xe), C(0xc), C(0x2), C(0xe), C(0x1), },
	{ C(0xc), C(0x5), C(0x3), C(0x6), C(0x1), C(0x9), C(0xf), C(0xc), C(0x2), },
	{ C(0x6), C(0x7), C(0x2), C(0x3), C(0x1), C(0xe), C(0x1), C(0xe), C(0x0), },
	{ C(0xd), C(0x2), C(0xe), C(0xe), C(0x9), C(0x9), C(0x2), C(0x3), C(0xf), },
	{ C(0x5), C(0xf), C(0x0), C(0x6), C(0xc), C(0xc), C(0x5), C(0xf), C(0xb), },
	{ C(0x3), C(0x5), C(0x1), C(0x4), C(0xf), C(0xc), C(0xe), C(0xa), C(0xe), },
	{ C(0x0), C(0x6), C(0xc), C(0x9), C(0x3), C(0x5), C(0x2), C(0x9), C(0x2), },
	{ C(0x1), C(0xe), C(0xf), C(0x7), C(0x6), C(0xe), C(0x1), C(0x0), C(0x0), },
	{ C(0xf), C(0x0), C(0xf), C(0xf), C(0x3), C(0x2), C(0x0), C(0x4), C(0x6), },
	{ C(0x3), C(0xd), C(0xa), C(0x4), C(0x2), C(0xe), C(0x7), C(0x3), C(0xe), },
	{ C(0xd), C(0xc), C(0x2), C(0x0), C(0x0), C(0x7), C(0xe), C(0x5), C(0x7), },
	{ C(0xd), C(0xc), C(0x4), C(0xd), C(0x5), C(0x5), C(0xf), C(0x1), C(0x3), },
	{ C(0xc), C(0x3), C(0x5), C(0xf), C(0x1), C(0x5), C(0xc), C(0xa), C(0xa), },
	{ C(0xd), C(0x0), C(0x2), C(0xa), C(0x2), C(0x5), C(0x9), C(0x1), C(0x6), },
	{ C(0xf), C(0xd), C(0xe), C(0xc), C(0x5), C(0x1), C(0xa), C(0x3), C(0x1), },
	{ C(0x0), C(0xe), C(0x1), C(0x2), C(0xa), C(0x6), C(0xf), C(0x9), C(0x6), },
	{ C(0x0), C(0x0), C(0xf), C(0x0), C(0xa), C(0xc), C(0x1), C(0xc), C(0xc), },
	{ C(0xf), C(0x7), C(0xc), C(0xb), C(0x6), C(0xd), C(0x1), C(0xe), C(0x1), },
	{ C(0x0), C(0x6), C(0xd), C(0x6), C(0xc), C(0xb), C(0x4), C(0xa), C(0x1), },
	{ C(0xe), C(0xd), C(0x6), C(0x1), C(0x9), C(0x2), C(0x5), C(0xe), C(0xc), },
	{ C(0xf), C(0xf), C(0x0), C(0x4), C(0x3), C(0x9), C(0x1), C(0x3), C(0xc), },
	{ C(0x0), C(0xd), C(0xd), C(0x1), C(0x9), C(0x1), C(0xe), C(0xc), C(0xe), },
	{ C(0xc), C(0x9), C(0x0), C(0x2), C(0x3), C(0x4), C(0x4), C(0x5), C(0x0), },
	{ C(0xf), C(0x2), C(0x0), C(0x1), C(0x4), C(0x4), C(0x1), C(0x1), C(0x1), },
	{ C(0xe), C(0x4), C(0x0), C(0xb), C(0xa), C(0x3), C(0xd), C(0xc), C(0x6), },
	{ C(0x1), C(0x7), C(0x1), C(0x0), C(0x4), C(0x0), C(0x1), C(0x1), C(0xf), },
	{ C(0xf), C(0xe), C(0xc), C(0x1), C(0x1), C(0x2), C(0x1), C(0x6), C(0x7), },
};
static int backbone_model1_conv2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 2, 15, 29, 43, 57, 70, 84 },
	{ 7, 17, 28, 39, 50, 61, 72 },
	{ 6, 19, 32, 46, 59, 73, 86 },
	{ 3, 15, 27, 39, 52, 64, 76 },
	{ -4, 10, 25, 41, 56, 71, 86 },
	{ 6, 17, 28, 39, 50, 61, 72 },
	{ 17, 28, 40, 52, 63, 75, 87 },
	{ 4, 17, 30, 43, 57, 70, 83 },
	{ 1, 14, 27, 39, 52, 65, 78 },
	{ 3, 19, 36, 53, 69, 86, 102 },
	{ 6, 20, 34, 47, 61, 75, 88 },
	{ -1, 9, 20, 32, 43, 54, 65 },
	{ 6, 17, 29, 40, 51, 62, 74 },
	{ 9, 21, 32, 44, 55, 66, 78 },
	{ 0, 15, 31, 47, 62, 78, 93 },
	{ 3, 17, 30, 44, 58, 71, 85 },
	{ 7, 18, 29, 40, 51, 62, 73 },
	{ 7, 21, 34, 48, 62, 76, 90 },
	{ 3, 16, 29, 43, 56, 70, 83 },
	{ 9, 22, 34, 47, 60, 72, 85 },
	{ 10, 22, 35, 47, 59, 71, 84 },
	{ 1, 12, 23, 34, 44, 55, 66 },
	{ 5, 19, 32, 46, 59, 73, 86 },
	{ 0, 13, 27, 41, 54, 68, 82 },
	{ 0, 12, 25, 38, 51, 63, 76 },
	{ 7, 16, 24, 32, 41, 49, 57 },
	{ 18, 33, 48, 63, 78, 93, 108 },
	{ 10, 24, 39, 54, 68, 83, 98 },
	{ 1, 14, 27, 40, 53, 66, 78 },
	{ -4, 17, 40, 62, 84, 107, 129 },
	{ 10, 24, 38, 52, 65, 79, 93 },
	{ 13, 26, 39, 52, 66, 79, 92 },
	{ 5, 16, 27, 38, 49, 60, 71 },
	{ 1, 14, 27, 41, 54, 67, 80 },
	{ 12, 26, 41, 55, 69, 83, 97 },
	{ 4, 21, 38, 56, 73, 90, 107 },
	{ 12, 24, 37, 49, 61, 73, 86 },
	{ 6, 14, 22, 30, 38, 46, 54 },
	{ 7, 17, 27, 36, 46, 56, 66 },
	{ 8, 24, 41, 57, 74, 90, 107 },
	{ 7, 22, 38, 53, 68, 84, 99 },
	{ 4, 16, 29, 42, 55, 67, 80 },
	{ 5, 17, 29, 41, 53, 65, 77 },
	{ 10, 21, 32, 44, 55, 66, 78 },
	{ 10, 19, 28, 38, 47, 57, 66 },
	{ 9, 19, 29, 38, 48, 58, 67 },
	{ 1, 16, 31, 46, 61, 76, 90 },
	{ 2, 16, 29, 43, 57, 70, 84 },
	{ 7, 18, 29, 40, 52, 63, 74 },
	{ 3, 17, 32, 46, 61, 75, 90 },
	{ 6, 18, 30, 42, 54, 66, 78 },
	{ 5, 16, 27, 39, 50, 62, 73 },
	{ 8, 19, 31, 42, 54, 65, 76 },
	{ -1, 12, 26, 41, 55, 69, 83 },
	{ 9, 19, 30, 41, 52, 62, 73 },
	{ 9, 19, 30, 41, 51, 62, 73 },
	{ 9, 20, 32, 43, 54, 65, 76 },
	{ 10, 20, 29, 39, 49, 58, 68 },
	{ 8, 20, 31, 43, 55, 67, 79 },
	{ 9, 20, 30, 41, 51, 62, 72 },
	{ 2, 11, 20, 30, 39, 48, 57 },
	{ 9, 21, 33, 46, 58, 70, 82 },
	{ 18, 33, 47, 62, 76, 91, 105 },
	{ 11, 24, 36, 49, 62, 74, 87 },
};
static int_t<4,64> backbone_model2_conv1_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xdb447672de2f4d2eL, 0xe5d24f31b0d00fa6L, 0xf1fecff1d1d26ce0L, 0xef6eec01fcd402eeL) },
	{ C64(0x120102cc2f3e1faeL, 0x20d0ce11301f0e59L, 0x0f21124d1e3faf02L, 0x4ef0112ddfff0351L) },
	{ C64(0x40122dfe7250bdeeL, 0x000e222ce50f3c12L, 0xef1220d62cfe1edcL, 0x0dd2e2d2f7e12f0fL) },
	{ C64(0x5b167c3420131342L, 0x7f12213e107b5e31L, 0xd2023c31125551b5L, 0x664e5d934a247a22L) },
	{ C64(0x03fc2a00deafffd5L, 0x1ee6ffb202f3bf60L, 0x1312ff14e0a30120L, 0xfdc422020e02f311L) },
	{ C64(0x12ae2e11d1a4c3e3L, 0x2f0603de50cad43fL, 0xbefec113fec00ed1L, 0x0000ee12f3c0d212L) },
	{ C64(0x1de33dcec340add4L, 0x30c7945d3a36decaL, 0x30fd4cdddd2fb00dL, 0x35f0f110a402535eL) },
	{ C64(0x70efeeefd12b00d2L, 0x10a23fefff35dd1bL, 0x74f25f1ad006062eL, 0x1edde432c2f22334L) },
	{ C64(0x05409331ff300e25L, 0xcbfd6ee3e2340ff0L, 0x22b1640adfe0f0a1L, 0x021b1c2fe17d01dcL) },
	{ C64(0xad4de1b10cfc46edL, 0xe32b4fc141f0e40aL, 0x2decbf6130101613L, 0x61ee052e4fe20110L) },
	{ C64(0xc0ab23e1224302ceL, 0x0f03e02efff92f2dL, 0xbdee4dd0d0c1301fL, 0xd0f10ebf0302f3f1L) },
	{ C64(0x3520100cb02331b3L, 0x07c2ea3fdeef14c0L, 0x466e10ebbe7f1000L, 0x32fee11e01a1e05fL) },
	{ C64(0x5ee5fba2252cd322L, 0x6b2124d45d2fe31fL, 0xfeed1f1eee22332eL, 0xdeffa0f2fe1d0affL) },
	{ C64(0xfe3bd0bb4fe1f212L, 0x2fda1ecf51bd131dL, 0xee20e36c4fdfb4f1L, 0x11be1e1d0d26c31dL) },
	{ C64(0x1001e232c692d11fL, 0x36e20efe4d0eb052L, 0x022ac1bda6ff3ffeL, 0xca2dff1441efe20fL) },
	{ C64(0xdb331101f01b30f2L, 0x0df3fe23601d0d29L, 0xaaeaf0c2d0204f24L, 0xbe3f1e3d59dff4bbL) },
	{ C64(0x0f4f2661d02fdb1eL, 0xc0d23f0ac3130df2L, 0x60202d7b22dff2e2L, 0x5f102de106f2130aL) },
	{ C64(0x59c4fc1021f11ff0L, 0xff02f01fff0e21cfL, 0xbb7097173e3321f2L, 0x0ff20d63c1c20e5cL) },
	{ C64(0xa3ff3efc195dc00fL, 0x014eede2edb2a2d2L, 0xfc1f2bc12dd0c21bL, 0x1bb9f34df6b3549fL) },
	{ C64(0x0529dbf4f1d3d1e2L, 0x900fefccefdee401L, 0x05d1fd2f060d2024L, 0x201040ba4f000013L) },
	{ C64(0x3cd0cd45d2dfeedbL, 0xb42170ff0c1d4015L, 0xef191ce0d52f7070L, 0x0d4f0ee0110f0e20L) },
	{ C64(0x14d0bfdff1e002dcL, 0xd40f101cbf261cf1L, 0x2fe414d1c4ec410dL, 0x11f23e2bf33c2df0L) },
	{ C64(0x2002da12afbe1023L, 0x02e304d1df201300L, 0x000e02b2f1021031L, 0xd00fef120ed110f2L) },
	{ C64(0xd6a06e4d2fded501L, 0x65053731061ff012L, 0xfeccecf1c7e10fc0L, 0xff2cf0340da1e5a1L) },
	{ C64(0xfdf23df5deffc2dfL, 0xfe3360110d2011d2L, 0xaeeeb0d10112712fL, 0xf3f15b335f336cffL) },
	{ C64(0xf120201333d2fc2fL, 0x3e10205f0e112a05L, 0xecd23b324202b201L, 0xe4001430a0facf04L) },
	{ C64(0x1302fd3f12b422cfL, 0xf402d1aadcf0f232L, 0x220cc9d0031e3e23L, 0x3e4fefcf14b26223L) },
	{ C64(0x0d4c176270a6330dL, 0x212e1e50ef313b05L, 0xfe121e3e13ff1016L, 0xe2541190e4d161feL) },
	{ C64(0x11130fd1ae2912fbL, 0x4f3dffdf4a11e210L, 0xda006aed20111e49L, 0x53cffb543f30c440L) },
	{ C64(0x027a4d0ef535fddcL, 0xdbb25a12b51215d0L, 0x71b42f4d3edf0114L, 0xc110d7203c5dbfd2L) },
	{ C64(0x02d2a744a10ff23eL, 0x010ae02fea35ef13L, 0x3400104e2efb03b0L, 0xde334f2012203ff2L) },
	{ C64(0x3d0420f4e4effc30L, 0x1b631da0610e3064L, 0xea31ef520e1e0014L, 0xfd12d03036c1b03cL) },
	{ C64(0x11d5ffd3d2c1c2e2L, 0x31f1500e0d2e0d20L, 0xf10ffc0c13327201L, 0xd10e6f0f002ccd50L) },
	{ C64(0x1f5ea2abe93b3ea7L, 0x4013c3f21621b43bL, 0x35ee3003fed00fadL, 0x1ace13de1065e361L) },
	{ C64(0x2bef04e002d2fa10L, 0xb6a060f514d0e3bcL, 0x3f70a72be1eff01dL, 0xdf4ed254e4ffe13eL) },
	{ C64(0xecb2511f51f111fcL, 0xf1a1b03de2fefc2cL, 0x1f5be4601dc2d250L, 0x3fd203cceca420e1L) },
	{ C64(0x1ef3ef10e3313052L, 0xf3e011f5f01102feL, 0xec4ff3df32221230L, 0xdb6fe1021eefdcefL) },
	{ C64(0x1b42003c21913d21L, 0x10bf5dc4c0dee6c0L, 0x4232a61d2ed2d543L, 0x1d6ea10fddc5e0fcL) },
	{ C64(0xdd030071b2d1343cL, 0xd031cc44290e12f2L, 0x9e3b10ec21ef003fL, 0x043f3a146c23500bL) },
	{ C64(0x6ff62c2b6f2b0d14L, 0xc93ff0cff4401f1fL, 0x1226e7424d42e212L, 0x31ce1e03f2162d31L) },
	{ C64(0x0021123426ea0142L, 0x021d144472302d4aL, 0x12f34d4310411320L, 0xf0e5f2f3ccfbaf31L) },
	{ C64(0xde3ff0ebfd4e64b0L, 0x673efce5ec16c1efL, 0xfe6eed4b0e0c3c60L, 0x3350e0040a04022aL) },
	{ C64(0x523020cf37b705d3L, 0x3f0c131d34df2104L, 0xd22cbf6122aaccd7L, 0xf2fd1dbe946efccbL) },
	{ C64(0xa13dd03020165f01L, 0xffdfbb3f0de5ce31L, 0x2b35d34ef0ba9d45L, 0x1cc6c12fdfe223ddL) },
	{ C64(0x6e3ff20444a12f2fL, 0x2feb640325306c40L, 0xf315df3146116414L, 0xff76ffde3fc01bf2L) },
	{ C64(0x46a3fee2e624d21aL, 0x121d0114ce2620ffL, 0x1ee023c1ef4c36f9L, 0xac2b0ff016202c43L) },
	{ C64(0xbf3f0a04e2e3ee12L, 0x0f3f0cff3c21c031L, 0xfb014030721343f3L, 0x40deec21d23cd221L) },
	{ C64(0x24b1de9f06e0ff4bL, 0x21dabfe5dcf5110cL, 0x2e02e01e03fff61fL, 0x0ed1be01f11dbd1eL) },
	{ C64(0x511ffebc1e3bf130L, 0x1219cfce101e04ceL, 0x52f221002d71b200L, 0x62acd20e03245123L) },
	{ C64(0x4fa30e1f0f2bfd51L, 0xea64239ce61aa212L, 0x273d27004f3664ccL, 0x61cf0de014f1d051L) },
	{ C64(0x12fff1d521c1a1fcL, 0xd2502eed302d69ddL, 0xfeacee227f5f14a6L, 0xddca403df6fc1ff6L) },
	{ C64(0xe0fef631ba0a007aL, 0xd2400be2b9dfe311L, 0x611011cbd134efddL, 0x2efcff2037141000L) },
	{ C64(0xc15ed31122f037b1L, 0x5202112be0350f45L, 0xbe251a2fdffcfb3eL, 0x360339eddf5ed10cL) },
	{ C64(0x51fe0d11fe5eec2fL, 0x0dd214ede2d4c3f0L, 0x55d0e2e30e43c20cL, 0x6ea017f02016f302L) },
	{ C64(0x10f020eed9c90d21L, 0x203294e111efc1c2L, 0x0f2fc6e63ff3053dL, 0xfbb511520bbf14c1L) },
	{ C64(0x4ee2cfecfef1e0c0L, 0x170303f0d635fdfdL, 0x46fdb0142e103100L, 0xde1e0211c1052041L) },
	{ C64(0xdfc00f3012121e04L, 0xae410f0dd51d4c4dL, 0x210f41233d0422b0L, 0xfcff40c222c21000L) },
	{ C64(0x10c0ac21f5aef44fL, 0x4f00fc0f0f2de144L, 0xbf4fff033d2c200fL, 0x1f0d520d10dff5d2L) },
	{ C64(0xede3a1f742e01302L, 0x1120134c30ec117fL, 0xed13ed21163bfbe6L, 0x36160cb23efc4f0cL) },
	{ C64(0x2e04413103a03bffL, 0x3ec0f51df1f210f1L, 0xe222e40752c231e2L, 0xce62d0c312d45b31L) },
	{ C64(0x5500c0f1202f00bcL, 0xd42f523a9221fd01L, 0x2510eef403ff325cL, 0x32e35fc006eeddf6L) },
	{ C64(0x6fee5cbb4d0add12L, 0xe14a93d162304b2eL, 0xd23c20321bfffd6cL, 0x1dd21cdf2cb3522eL) },
	{ C64(0x05dfd4eee1b02e01L, 0x660acce02a334d63L, 0x1b350fcdd00abfffL, 0xdc409542b0bef4f0L) },
	{ C64(0xbff1fc0e51c2e1c7L, 0xdc4beeff32ff2e3cL, 0xade0f50fdbfbcd10L, 0xa3bf3ab12512ddfbL) },
};
static int backbone_model2_conv1_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -113, -96, -79, -61, -44, -27, -9, 7, 25, 42, 59, 77, 94, 111 },
	{ -104, -88, -72, -56, -40, -24, -8, 8, 24, 40, 56, 72, 88, 104 },
	{ -109, -90, -72, -53, -34, -15, 3, 22, 41, 59, 78, 97, 116, 135 },
	{ -105, -81, -57, -32, -8, 15, 39, 64, 88, 112, 136, 161, 185, 209 },
	{ -124, -106, -88, -70, -52, -34, -16, 1, 19, 37, 55, 73, 91, 109 },
	{ -126, -109, -92, -75, -58, -41, -24, -7, 9, 26, 43, 60, 77, 94 },
	{ -133, -113, -93, -74, -54, -35, -15, 3, 23, 42, 62, 81, 101, 120 },
	{ -136, -115, -94, -73, -52, -31, -10, 10, 31, 52, 73, 94, 115, 136 },
	{ -142, -121, -100, -79, -58, -37, -17, 3, 24, 45, 66, 87, 108, 128 },
	{ -124, -104, -85, -65, -45, -26, -6, 12, 32, 52, 71, 91, 110, 130 },
	{ -148, -128, -108, -88, -69, -49, -29, -9, 9, 29, 49, 69, 88, 108 },
	{ -152, -129, -105, -82, -58, -34, -11, 12, 35, 59, 83, 106, 130, 153 },
	{ -119, -102, -85, -68, -50, -33, -16, 0, 17, 34, 51, 68, 85, 103 },
	{ -144, -123, -102, -80, -59, -38, -16, 4, 25, 47, 68, 89, 110, 132 },
	{ -151, -130, -109, -88, -67, -46, -25, -4, 16, 37, 58, 79, 100, 121 },
	{ -161, -138, -116, -93, -71, -48, -26, -3, 18, 41, 63, 85, 108, 130 },
	{ -112, -94, -76, -59, -41, -24, -6, 10, 28, 45, 63, 80, 98, 115 },
	{ -122, -101, -80, -60, -39, -18, 2, 22, 43, 64, 85, 105, 126, 147 },
	{ -178, -153, -129, -104, -80, -55, -31, -7, 17, 41, 66, 90, 115, 139 },
	{ -135, -116, -97, -77, -58, -39, -20, 0, 18, 37, 56, 76, 95, 114 },
	{ -171, -146, -121, -95, -70, -45, -20, 4, 29, 54, 79, 104, 129, 154 },
	{ -134, -115, -96, -77, -58, -39, -20, -2, 16, 35, 54, 73, 92, 111 },
	{ -93, -79, -66, -52, -38, -24, -11, 2, 16, 30, 43, 57, 71, 84 },
	{ -132, -111, -91, -71, -51, -30, -10, 9, 30, 50, 70, 91, 111, 131 },
	{ -132, -110, -88, -66, -45, -23, -1, 20, 42, 63, 85, 107, 129, 150 },
	{ -126, -106, -85, -65, -44, -24, -3, 16, 37, 57, 78, 98, 119, 139 },
	{ -160, -137, -113, -90, -67, -44, -20, 2, 25, 48, 72, 95, 118, 141 },
	{ -126, -103, -81, -59, -36, -14, 7, 30, 52, 74, 97, 119, 141, 164 },
	{ -142, -121, -100, -79, -58, -37, -16, 5, 26, 47, 68, 89, 110, 131 },
	{ -151, -128, -105, -83, -60, -37, -15, 7, 29, 52, 75, 97, 120, 142 },
	{ -100, -83, -66, -49, -33, -16, 0, 17, 33, 50, 67, 84, 100, 117 },
	{ -119, -99, -80, -61, -41, -22, -2, 16, 35, 55, 74, 93, 113, 132 },
	{ -126, -105, -84, -62, -41, -19, 1, 23, 44, 65, 87, 108, 130, 151 },
	{ -146, -125, -103, -81, -59, -38, -16, 5, 26, 48, 70, 92, 113, 135 },
	{ -148, -127, -105, -83, -62, -40, -18, 2, 24, 46, 68, 89, 111, 133 },
	{ -161, -137, -113, -89, -65, -41, -17, 6, 30, 54, 78, 103, 127, 151 },
	{ -116, -99, -81, -64, -46, -29, -11, 5, 23, 40, 57, 75, 92, 110 },
	{ -105, -90, -75, -60, -46, -31, -16, -2, 12, 27, 42, 56, 71, 86 },
	{ -150, -126, -102, -79, -55, -32, -8, 15, 38, 62, 85, 109, 132, 156 },
	{ -105, -85, -65, -45, -25, -4, 15, 35, 55, 75, 96, 116, 136, 156 },
	{ -151, -126, -102, -78, -53, -29, -5, 19, 43, 67, 92, 116, 140, 164 },
	{ -117, -99, -80, -61, -43, -24, -5, 12, 31, 50, 69, 87, 106, 125 },
	{ -148, -126, -104, -82, -61, -39, -17, 4, 26, 48, 70, 91, 113, 135 },
	{ -160, -137, -114, -91, -68, -44, -21, 1, 24, 47, 71, 94, 117, 140 },
	{ -128, -103, -78, -53, -28, -4, 20, 45, 70, 95, 120, 145, 170, 195 },
	{ -121, -102, -83, -64, -46, -27, -8, 10, 28, 47, 66, 85, 103, 122 },
	{ -127, -107, -87, -67, -47, -27, -7, 11, 31, 51, 71, 91, 111, 131 },
	{ -135, -116, -98, -80, -62, -44, -25, -7, 10, 28, 47, 65, 83, 101 },
	{ -118, -98, -79, -60, -41, -21, -2, 16, 35, 54, 74, 93, 112, 131 },
	{ -120, -99, -78, -57, -36, -14, 6, 27, 48, 69, 90, 112, 133, 154 },
	{ -132, -112, -93, -73, -54, -34, -14, 4, 24, 43, 63, 82, 102, 121 },
	{ -147, -127, -106, -86, -65, -45, -24, -4, 16, 36, 57, 77, 98, 118 },
	{ -112, -94, -76, -57, -39, -21, -2, 15, 33, 51, 70, 88, 106, 124 },
	{ -145, -122, -99, -76, -53, -30, -8, 14, 37, 60, 83, 106, 129, 151 },
	{ -125, -107, -88, -70, -51, -33, -14, 3, 22, 40, 59, 77, 96, 114 },
	{ -126, -106, -85, -64, -43, -22, -1, 19, 40, 61, 82, 103, 124, 145 },
	{ -108, -91, -74, -57, -39, -22, -5, 11, 29, 46, 63, 81, 98, 115 },
	{ -105, -88, -72, -55, -39, -22, -6, 10, 26, 43, 59, 76, 92, 109 },
	{ -123, -99, -76, -52, -29, -5, 17, 41, 64, 88, 111, 135, 158, 181 },
	{ -122, -100, -78, -56, -34, -12, 8, 30, 52, 74, 96, 118, 140, 162 },
	{ -156, -130, -104, -79, -53, -27, -2, 23, 49, 74, 100, 126, 152, 177 },
	{ -137, -117, -97, -77, -58, -38, -18, 1, 21, 40, 60, 80, 100, 120 },
	{ -146, -126, -107, -87, -68, -48, -29, -9, 9, 28, 48, 67, 87, 106 },
	{ -201, -176, -150, -124, -98, -72, -46, -20, 5, 31, 57, 83, 109, 135 },
};
static int_t<4,1> backbone_model2_conv1_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xe), C(0x4), C(0x7), C(0xd), C(0x1), C(0x6), C(0x1), C(0xc), C(0xf), },
	{ C(0x2), C(0x5), C(0x5), C(0xf), C(0xd), C(0x1), C(0x1), C(0xe), C(0x9), },
	{ C(0x1), C(0x6), C(0x5), C(0x3), C(0xe), C(0xe), C(0x2), C(0x9), C(0x0), },
	{ C(0x2), C(0x0), C(0x2), C(0x2), C(0x1), C(0x2), C(0x4), C(0x4), C(0x3), },
	{ C(0x3), C(0xf), C(0x0), C(0x4), C(0xc), C(0xe), C(0x5), C(0xa), C(0xc), },
	{ C(0x2), C(0x1), C(0x9), C(0x1), C(0x4), C(0xb), C(0x4), C(0x6), C(0xd), },
	{ C(0x1), C(0x2), C(0x3), C(0x3), C(0x3), C(0x1), C(0x3), C(0x3), C(0x1), },
	{ C(0xd), C(0xe), C(0xe), C(0x0), C(0xc), C(0xd), C(0x1), C(0xa), C(0xf), },
	{ C(0x1), C(0xe), C(0x3), C(0xd), C(0x1), C(0x0), C(0x6), C(0x6), C(0x2), },
	{ C(0xf), C(0xf), C(0x5), C(0xf), C(0x4), C(0x5), C(0xe), C(0x5), C(0x3), },
	{ C(0xe), C(0x2), C(0x0), C(0x2), C(0x3), C(0xb), C(0x7), C(0xf), C(0xa), },
	{ C(0xd), C(0xf), C(0xe), C(0xc), C(0xe), C(0xf), C(0xf), C(0xf), C(0xc), },
	{ C(0xe), C(0xf), C(0xd), C(0xf), C(0xa), C(0xe), C(0x3), C(0x6), C(0x7), },
	{ C(0x7), C(0x0), C(0x0), C(0x4), C(0x0), C(0x0), C(0x2), C(0x0), C(0x0), },
	{ C(0x0), C(0xd), C(0xa), C(0xf), C(0xb), C(0xc), C(0x0), C(0x1), C(0xe), },
	{ C(0x0), C(0x1), C(0x1), C(0xd), C(0xc), C(0xd), C(0xc), C(0xb), C(0xa), },
	{ C(0x1), C(0x7), C(0x6), C(0xf), C(0xf), C(0xb), C(0xe), C(0x0), C(0xe), },
	{ C(0xd), C(0xa), C(0xe), C(0x1), C(0xb), C(0x0), C(0x0), C(0xc), C(0xe), },
	{ C(0xb), C(0x9), C(0x9), C(0x1), C(0xe), C(0x1), C(0x0), C(0x2), C(0x2), },
	{ C(0x5), C(0x3), C(0xb), C(0x2), C(0x7), C(0x2), C(0xe), C(0xd), C(0x4), },
	{ C(0x4), C(0x2), C(0xf), C(0x1), C(0x1), C(0x1), C(0x4), C(0x3), C(0x4), },
	{ C(0xd), C(0x9), C(0xa), C(0x3), C(0x4), C(0x5), C(0x1), C(0xe), C(0x0), },
	{ C(0xa), C(0x6), C(0x1), C(0x3), C(0x1), C(0xd), C(0x2), C(0xa), C(0x1), },
	{ C(0x1), C(0x7), C(0x1), C(0x0), C(0x3), C(0x1), C(0x3), C(0x5), C(0x3), },
	{ C(0xe), C(0xd), C(0x0), C(0x0), C(0xc), C(0x1), C(0xe), C(0x9), C(0xf), },
	{ C(0x2), C(0x1), C(0x2), C(0xf), C(0xc), C(0xd), C(0xb), C(0xd), C(0xd), },
	{ C(0xe), C(0xc), C(0xe), C(0xf), C(0xc), C(0xc), C(0xe), C(0x0), C(0xb), },
	{ C(0x9), C(0xb), C(0xa), C(0xd), C(0x0), C(0xf), C(0x5), C(0x6), C(0x6), },
	{ C(0x1), C(0x3), C(0x3), C(0x0), C(0x2), C(0x4), C(0x0), C(0x0), C(0x5), },
	{ C(0x5), C(0x2), C(0x4), C(0x1), C(0x0), C(0x2), C(0x2), C(0x6), C(0x0), },
	{ C(0x1), C(0x2), C(0x2), C(0xe), C(0xb), C(0x1), C(0x9), C(0xd), C(0x5), },
	{ C(0xe), C(0xa), C(0xb), C(0xf), C(0xe), C(0xc), C(0x1), C(0x5), C(0x1), },
	{ C(0xd), C(0x4), C(0x2), C(0x9), C(0xf), C(0x6), C(0x0), C(0xc), C(0x4), },
	{ C(0x0), C(0x2), C(0x2), C(0x0), C(0x3), C(0x2), C(0x1), C(0x5), C(0x6), },
	{ C(0x2), C(0x1), C(0xf), C(0x1), C(0x4), C(0x5), C(0x4), C(0x2), C(0x6), },
	{ C(0x2), C(0xb), C(0xd), C(0xb), C(0xb), C(0x1), C(0xb), C(0x5), C(0x1), },
	{ C(0xa), C(0xc), C(0xc), C(0x2), C(0x7), C(0x5), C(0xe), C(0xe), C(0xf), },
	{ C(0x3), C(0x7), C(0xe), C(0x3), C(0x6), C(0x3), C(0xe), C(0x9), C(0xd), },
	{ C(0x1), C(0x2), C(0x0), C(0x1), C(0x3), C(0x4), C(0x2), C(0x3), C(0x6), },
	{ C(0xf), C(0x6), C(0xd), C(0xd), C(0x0), C(0xc), C(0xe), C(0x9), C(0xe), },
	{ C(0xe), C(0xb), C(0x9), C(0x1), C(0xe), C(0xa), C(0x4), C(0x3), C(0x1), },
	{ C(0xe), C(0x3), C(0x0), C(0xb), C(0x7), C(0x3), C(0xb), C(0xb), C(0xc), },
	{ C(0x0), C(0x3), C(0x4), C(0xd), C(0xe), C(0xe), C(0xe), C(0xc), C(0xa), },
	{ C(0x0), C(0x4), C(0x2), C(0x1), C(0x7), C(0x1), C(0x0), C(0x2), C(0x1), },
	{ C(0xb), C(0x3), C(0x6), C(0xd), C(0x3), C(0x1), C(0xe), C(0x6), C(0x2), },
	{ C(0xe), C(0xe), C(0x0), C(0xc), C(0x9), C(0xd), C(0xa), C(0x5), C(0x5), },
	{ C(0x2), C(0xe), C(0xc), C(0x0), C(0xe), C(0xa), C(0xf), C(0xf), C(0xd), },
	{ C(0x1), C(0xc), C(0xa), C(0x1), C(0x6), C(0x7), C(0x0), C(0xe), C(0x0), },
	{ C(0x5), C(0x0), C(0xe), C(0x5), C(0x2), C(0xa), C(0x4), C(0x0), C(0x9), },
	{ C(0xd), C(0xd), C(0xb), C(0xc), C(0xa), C(0xd), C(0x2), C(0x0), C(0x5), },
	{ C(0x0), C(0xe), C(0x3), C(0x1), C(0xb), C(0x7), C(0x4), C(0x4), C(0x6), },
	{ C(0xe), C(0x4), C(0x5), C(0x2), C(0x3), C(0x4), C(0x1), C(0x3), C(0x1), },
	{ C(0xe), C(0x2), C(0xd), C(0x2), C(0xf), C(0xf), C(0x5), C(0x5), C(0x7), },
	{ C(0xd), C(0x2), C(0x7), C(0xc), C(0x0), C(0x5), C(0xa), C(0xe), C(0x4), },
	{ C(0x0), C(0x3), C(0x2), C(0xf), C(0x5), C(0x3), C(0x4), C(0x4), C(0x2), },
	{ C(0xf), C(0xc), C(0xe), C(0x3), C(0x2), C(0xe), C(0x6), C(0x6), C(0x2), },
	{ C(0xc), C(0xa), C(0xd), C(0xd), C(0x2), C(0x6), C(0x2), C(0x4), C(0x2), },
	{ C(0xf), C(0x4), C(0xa), C(0xd), C(0x4), C(0x4), C(0xf), C(0xa), C(0x6), },
	{ C(0xa), C(0xe), C(0x0), C(0xb), C(0x0), C(0x1), C(0x9), C(0x0), C(0xf), },
	{ C(0x5), C(0xe), C(0x1), C(0x6), C(0x0), C(0xe), C(0x6), C(0xf), C(0xa), },
	{ C(0xf), C(0xe), C(0xf), C(0xb), C(0xe), C(0xf), C(0xb), C(0xf), C(0xd), },
	{ C(0x4), C(0x1), C(0x1), C(0x3), C(0x3), C(0x1), C(0x4), C(0x3), C(0x1), },
	{ C(0xc), C(0x0), C(0x4), C(0xf), C(0x3), C(0x6), C(0x9), C(0xe), C(0x2), },
	{ C(0x0), C(0x1), C(0x5), C(0x1), C(0x5), C(0x2), C(0x2), C(0x3), C(0x0), },
};
static int backbone_model2_conv1_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 6, 20, 35, 49, 63, 78, 92 },
	{ 9, 19, 29, 39, 49, 60, 70 },
	{ 8, 18, 29, 39, 50, 60, 71 },
	{ 25, 39, 53, 67, 81, 96, 110 },
	{ 9, 22, 35, 48, 61, 74, 87 },
	{ 10, 24, 38, 52, 65, 79, 93 },
	{ 2, 16, 29, 42, 56, 69, 82 },
	{ 3, 16, 29, 42, 55, 68, 81 },
	{ 0, 12, 24, 36, 48, 60, 72 },
	{ 16, 30, 43, 57, 71, 85, 99 },
	{ 9, 21, 33, 45, 57, 69, 81 },
	{ 3, 15, 27, 39, 50, 62, 74 },
	{ 4, 18, 33, 48, 63, 77, 92 },
	{ 0, 11, 23, 36, 48, 61, 73 },
	{ 8, 21, 34, 47, 60, 73, 86 },
	{ 19, 34, 48, 63, 77, 91, 106 },
	{ 9, 19, 30, 40, 51, 61, 72 },
	{ 9, 27, 44, 61, 79, 96, 113 },
	{ 17, 30, 44, 57, 71, 85, 98 },
	{ 10, 25, 39, 54, 68, 83, 98 },
	{ 8, 20, 33, 46, 58, 71, 84 },
	{ 10, 23, 35, 48, 61, 73, 86 },
	{ 6, 17, 27, 38, 48, 59, 69 },
	{ 16, 31, 47, 62, 77, 93, 108 },
	{ 3, 20, 36, 53, 69, 86, 103 },
	{ 8, 18, 29, 39, 50, 60, 71 },
	{ 8, 21, 34, 47, 60, 73, 86 },
	{ 6, 20, 34, 49, 63, 77, 92 },
	{ 5, 20, 35, 49, 64, 79, 93 },
	{ 9, 25, 41, 57, 73, 89, 104 },
	{ 3, 14, 26, 37, 49, 60, 72 },
	{ 10, 22, 34, 46, 58, 70, 82 },
	{ 6, 18, 29, 41, 52, 64, 76 },
	{ 7, 23, 38, 54, 69, 85, 101 },
	{ 8, 29, 50, 71, 92, 113, 133 },
	{ 12, 23, 35, 46, 58, 69, 81 },
	{ 3, 16, 30, 43, 57, 70, 84 },
	{ 4, 23, 43, 62, 81, 100, 119 },
	{ 10, 26, 41, 57, 73, 89, 104 },
	{ 0, 14, 29, 43, 57, 72, 86 },
	{ -4, 9, 23, 37, 51, 65, 79 },
	{ 14, 27, 40, 53, 67, 80, 93 },
	{ 8, 21, 34, 47, 60, 73, 86 },
	{ -1, 13, 28, 43, 58, 74, 89 },
	{ 11, 27, 44, 60, 76, 92, 109 },
	{ 15, 28, 41, 55, 68, 81, 94 },
	{ 5, 18, 30, 43, 56, 68, 81 },
	{ 15, 26, 36, 47, 58, 68, 79 },
	{ 8, 22, 36, 51, 65, 80, 94 },
	{ 2, 19, 36, 53, 70, 88, 105 },
	{ 9, 24, 38, 52, 66, 81, 95 },
	{ 0, 17, 34, 52, 69, 87, 104 },
	{ 7, 19, 31, 43, 55, 66, 78 },
	{ -1, 13, 28, 43, 58, 73, 88 },
	{ 3, 20, 36, 53, 70, 86, 103 },
	{ 0, 15, 31, 47, 62, 78, 94 },
	{ 10, 22, 35, 47, 60, 72, 85 },
	{ 11, 23, 35, 47, 58, 70, 82 },
	{ 7, 22, 38, 54, 70, 86, 102 },
	{ 5, 18, 32, 45, 59, 72, 86 },
	{ 3, 17, 31, 46, 60, 74, 88 },
	{ 2, 20, 38, 56, 73, 91, 109 },
	{ 15, 27, 39, 51, 63, 75, 87 },
	{ 0, 15, 30, 45, 60, 74, 89 },
};
static int_t<4,64> backbone_model2_conv2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x7044351f1f2d320fL, 0xafb62527c59f5411L, 0x12ff30122ff2d6e0L, 0x51103113f3e2531dL) },
	{ C64(0xd00fbcf0b0bf061eL, 0x013d31404e6312d0L, 0xf03a0114d0f00defL, 0xc13330d0e000e410L) },
	{ C64(0x02ddb21a0c233b13L, 0x3cc1e157121323d4L, 0xdd53f23cdd416a20L, 0x0a25c3d2d1541a21L) },
	{ C64(0xa30e0de0cfbdf74cL, 0x020f40711b42dfe0L, 0x000ee1c4d20f0ef1L, 0x0ef410c4bbc0a0f3L) },
	{ C64(0xefffc21033efd216L, 0xe214b1cad2dffdf1L, 0x11fff3feefff130dL, 0x2ef100f2e3f22b22L) },
	{ C64(0xefc23c3ebb212dedL, 0x6e9a20110020feefL, 0xff0dd0eeddfcddd2L, 0xd021cf7ffb4ef0fcL) },
	{ C64(0xe001c5eb41edf2d1L, 0x033411a2310001e1L, 0x0010033ce10153beL, 0x0201012c1140042eL) },
	{ C64(0xf1917cf4fb0cc1eeL, 0xf00ddd2faf010a2fL, 0x5d1b2e2ade0a5d6cL, 0xfba461e6eb230d2dL) },
	{ C64(0xc1630114fb1eff10L, 0x05dc0f1dc100d04fL, 0xf1fefd7f01e2f06fL, 0xfdcd1fdedf10c2feL) },
	{ C64(0xe22ef2011d135314L, 0xe14e12f3edf0fd4fL, 0x99de05030c012112L, 0xf4421d36febd0ffdL) },
	{ C64(0x2d3e2c0b226449c2L, 0x1cfd615f66bfe26eL, 0xe1e431102f140501L, 0x1d114dfef31c4effL) },
	{ C64(0x20320f92013c2204L, 0x23ed202021cf3042L, 0x0bb3233e40b20021L, 0xe6e353201341f110L) },
	{ C64(0x302150220134d009L, 0xbf13f5dfd3cd121cL, 0x0f12030ef1b3031fL, 0xe21b3f303133604fL) },
	{ C64(0xf1c34d11dec9c01fL, 0xf20d2af2d0f3e2ffL, 0x51fb051eff2aeee0L, 0xfbe622c44c37ef1fL) },
	{ C64(0x7a22d54111f1f2b1L, 0xa346d4b0c0f363e0L, 0x20c02230233016e9L, 0x6217022113ee443cL) },
	{ C64(0xf4dff56ecfc3defbL, 0xfeefcdd0fe35d0dfL, 0x666fce0db73bbdfeL, 0x0b0fe2ae00401ffdL) },
	{ C64(0x3c1fc2ec13521111L, 0xdf724e22e0b3a240L, 0x11cf4205d116fe4bL, 0x1ead14b111d12124L) },
	{ C64(0xd1cd2e03045fa4c1L, 0x16051c0ecadf4c9fL, 0x3fde6ddef4cf14f2L, 0xd2df1d40c10feffeL) },
	{ C64(0x5fef3ff1fe61d31bL, 0x01633cedea22202fL, 0x3d321d12143ff104L, 0xf145d42106023209L) },
	{ C64(0xce34c4ffeed231d1L, 0xf0ddb332324fac01L, 0x1cd3313eccf16243L, 0x0fef0e0faa3dff7fL) },
	{ C64(0x14f13602eee2c442L, 0x01e42dee1ef020b0L, 0xde3ef1de02eefff1L, 0xd20c04412b40cfe0L) },
	{ C64(0xac23cf1ec502ef0cL, 0xe2eacefd0a212eedL, 0x1eb4fd51643f0df3L, 0xd2130aeec0ffc605L) },
	{ C64(0x102400f00ddfc04dL, 0xef23ef05cc1ed2f4L, 0xc010e7fccf0de2d0L, 0x10e0e6111d100e0bL) },
	{ C64(0xf030001223f000eeL, 0x12142ee010df3c1dL, 0xf1f1ec1f01fdef2eL, 0x0130111c621de196L) },
	{ C64(0x201b2d5cdb2200fcL, 0x00534db211cce1c1L, 0x3d12c2c04502f900L, 0xb03d42122e35e022L) },
	{ C64(0xb0ec290e9df01af0L, 0x64001e0e20e6e2ddL, 0xeeecc3b2326ce022L, 0xefc32ecd1eb1da13L) },
	{ C64(0x4ff11d00e10f01dfL, 0x01ea4e34e0123560L, 0xaefc0e7ec3f11c90L, 0xdc20e2331f30c6e3L) },
	{ C64(0xd0c42230d1dec0dfL, 0x0fee4d1ddfdf404cL, 0xc21bdef141fd0d11L, 0x0e363ff2ffee11e0L) },
	{ C64(0x1f11f2100e10cd0eL, 0x1fbee4cf340224efL, 0x0103f27ef1e2e1d3L, 0x90213e0a021f2dfaL) },
	{ C64(0x1fe54fcb1e12b246L, 0xcff263ec26adbcf2L, 0x55dfeed3f9e2dd00L, 0xf1fa130e60673cc3L) },
	{ C64(0x03adff02feece25dL, 0xecde5d702efd00f0L, 0xff210112eecd3e22L, 0xbf2cc4e05251bf0fL) },
	{ C64(0xe200ebffe0de143dL, 0x50fd4f605f30b0e1L, 0x00010f01e2ef0f22L, 0xdef02ccef0e1fff3L) },
	{ C64(0x311402eb14110f10L, 0xf14541d0f1edd5deL, 0x1ef411fc1ce116aeL, 0xdd011d1d44335003L) },
	{ C64(0x4d4e5df411c1f04cL, 0xe312d241e30f01f2L, 0x5fa25f210eb2352aL, 0x6b09f02a02452d3dL) },
	{ C64(0x223c040525f0a406L, 0x10274cd21fd19fdaL, 0x120d5f05613bafc1L, 0x0112e26bd2f2151eL) },
	{ C64(0x1c16c0900f2a3fd5L, 0x43632bc2e3df340eL, 0x5e1dfe200e303111L, 0x3fe51e1b44041016L) },
	{ C64(0x1033f2f1d3ec73c1L, 0x00f01207f22e2d61L, 0x01ed2010ddd0fec2L, 0x1f30113133fd5113L) },
	{ C64(0xece3f0a5e04b9da4L, 0x0202e50fed351f0fL, 0x234e40f0fe2c2752L, 0xbea00f05eddc1dddL) },
	{ C64(0x323b402f4d2ef04bL, 0x7b02433b01ba2e5fL, 0x3f02fa2edfe4d467L, 0x5fef0c3106015d51L) },
	{ C64(0xbff2fa321e312ffcL, 0xdff9ee012f5f1ce4L, 0x0fa1c2d0e43f4d11L, 0xf042db4e1e65c051L) },
	{ C64(0x11430bf2e5f0124eL, 0x232006e9de34412dL, 0x243a0004d131c3f1L, 0x542340dde5f02711L) },
	{ C64(0x3a10d2ff36e6e420L, 0x012203fb0f300fffL, 0xe3154a01700e133dL, 0x09ee3d5f00da59e1L) },
	{ C64(0x10222eff24ed643fL, 0x314f3030614f1d4bL, 0xee20e24d00ef001fL, 0x01125dfe200e5116L) },
	{ C64(0xa24eee11d2d1ccd7L, 0xfdeddaf20ff1afd6L, 0xd5fffe12cf0123efL, 0xe0ded3e1a9eddd54L) },
	{ C64(0x0db4b200e3ceb3ffL, 0xffed3bdefe04fb03L, 0x52ed1a20311a3bdcL, 0xfde3e4df0c53dbeeL) },
	{ C64(0x2afece364eb4b40dL, 0xe1edcc2d5e20ec20L, 0xffafce00732d2f1fL, 0xa0e1f1ef2101f001L) },
	{ C64(0x2fd016112f02acb2L, 0xdb05f2dcbed04d3dL, 0x30020fbdf014f201L, 0xf41dc221f62e1d1eL) },
	{ C64(0x3f0f1304c0ff0a13L, 0xe1fd0fe0f01bfccfL, 0x20de20aff0dde120L, 0xa0ed01fd15e23100L) },
	{ C64(0x5f45e1f6f0fef0dcL, 0x4031c031d262f6afL, 0x4db2313cf1e16f24L, 0x4e2e0e2df01e3543L) },
	{ C64(0xc3012f6e09025fceL, 0x1ce330e6fdf3c200L, 0x5e1def039c7f0f0eL, 0x1cdf41d1d1f0fffeL) },
	{ C64(0xe2cf042b61af2231L, 0x2cc7f3532321f221L, 0x1f26312d5c340505L, 0xedd03c1d24412d3dL) },
	{ C64(0x3f1334be2f602471L, 0x032b35cef2e1c029L, 0x2f134f11ea2b94e1L, 0x133ec0e0f6113eacL) },
	{ C64(0x203b00101dfde11cL, 0x2ee412021cd2f0f0L, 0xf07c9e50021f3614L, 0xcfc0c02f2241b0cfL) },
	{ C64(0xef2439e3e10fd0cfL, 0xe0234f302153e122L, 0xd1c222e0c1fd0dadL, 0xde3dd15b0e31a623L) },
	{ C64(0x643dc5b2f5ed0120L, 0x0323d1fb02bc2b21L, 0xe303d5ccefb41e20L, 0xd200422242ebe101L) },
	{ C64(0xbcf1cef0ffee113eL, 0x05ddbe15f22f27f0L, 0xf1cef550320bffb3L, 0xdec3f4e53ed4ee01L) },
	{ C64(0xee0dff130c1cf1ecL, 0x006e01eded3ff11eL, 0x1eeffa3ecf2d425fL, 0x59efee110cffce00L) },
	{ C64(0xd0e1df330efc0ff5L, 0x036efbfe0dd1fe1eL, 0x1ff2bcf2a04e4c0cL, 0x7e46cbde0df4bb14L) },
	{ C64(0xf010d24205d0d2fdL, 0x101ce11dc010b7adL, 0x33ef4411d600d000L, 0x1c11dfe1ba1be23cL) },
	{ C64(0x1500220602acf14eL, 0xc002ff1cffbd5b7dL, 0xc04fd5f503eefe3eL, 0x95312f13200df110L) },
	{ C64(0xc5c0025ccff3d3f1L, 0x6edd1bed0f24cc1dL, 0x034cedeea02cad13L, 0xdd5ae2c3de0fecbdL) },
	{ C64(0xcde1cf40f01e10feL, 0x7f6cfcd0ffe5c1fdL, 0x214eedc2d35d3c21L, 0xfc331cac00cdfbf0L) },
	{ C64(0x2a03bfbff11a3fb5L, 0xe26f2ed1113e1301L, 0x1d3ed142025d2fe9L, 0x2ee21d2b02f0f215L) },
	{ C64(0x13f00e2e51121ee2L, 0x740f0e346414e23cL, 0x11001000f22df224L, 0x03ddebff132d56a6L) },
};
static int backbone_model2_conv2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -87, -68, -49, -30, -11, 7, 27, 46, 65, 84, 103, 122, 141, 160 },
	{ -131, -113, -95, -77, -59, -41, -23, -5, 12, 29, 47, 65, 83, 101 },
	{ -142, -119, -95, -71, -48, -24, -1, 22, 46, 69, 93, 116, 140, 164 },
	{ -173, -150, -127, -104, -82, -59, -36, -14, 8, 31, 53, 76, 99, 122 },
	{ -122, -105, -88, -71, -54, -37, -20, -3, 13, 30, 47, 64, 81, 98 },
	{ -147, -129, -111, -93, -75, -57, -39, -21, -3, 14, 32, 50, 68, 87 },
	{ -102, -85, -68, -50, -33, -16, 0, 18, 35, 52, 70, 87, 104, 122 },
	{ -153, -135, -117, -100, -82, -64, -46, -29, -11, 6, 24, 41, 59, 77 },
	{ -137, -117, -98, -79, -60, -40, -21, -2, 16, 36, 55, 74, 93, 113 },
	{ -93, -77, -62, -46, -30, -15, 0, 16, 32, 47, 63, 79, 94, 110 },
	{ -95, -76, -57, -39, -20, -1, 16, 35, 54, 72, 91, 110, 128, 147 },
	{ -73, -58, -43, -28, -12, 2, 17, 32, 47, 63, 78, 93, 108, 124 },
	{ -126, -104, -83, -62, -41, -20, 0, 21, 42, 63, 85, 106, 127, 148 },
	{ -150, -130, -110, -90, -70, -50, -29, -9, 10, 30, 50, 70, 90, 110 },
	{ -113, -91, -70, -49, -28, -7, 13, 34, 55, 77, 98, 119, 140, 161 },
	{ -144, -125, -106, -87, -68, -49, -30, -11, 7, 26, 45, 64, 83, 102 },
	{ -94, -77, -59, -42, -25, -8, 8, 25, 42, 60, 77, 94, 111, 128 },
	{ -131, -114, -97, -80, -63, -46, -29, -12, 4, 22, 39, 56, 73, 90 },
	{ -103, -84, -65, -45, -26, -7, 11, 30, 49, 68, 87, 106, 125, 144 },
	{ -138, -118, -98, -79, -59, -39, -19, 0, 20, 40, 60, 80, 100, 120 },
	{ -128, -109, -90, -71, -52, -33, -14, 4, 23, 42, 61, 80, 100, 119 },
	{ -145, -125, -105, -85, -65, -45, -26, -6, 13, 33, 53, 73, 93, 113 },
	{ -122, -105, -88, -71, -54, -37, -20, -3, 13, 30, 47, 64, 81, 98 },
	{ -90, -75, -60, -45, -30, -15, -1, 13, 28, 43, 58, 73, 88, 103 },
	{ -155, -131, -108, -84, -60, -36, -13, 10, 34, 58, 81, 105, 129, 153 },
	{ -159, -139, -119, -98, -78, -58, -37, -17, 2, 23, 43, 64, 84, 104 },
	{ -110, -93, -75, -57, -40, -22, -5, 12, 30, 47, 65, 83, 100, 118 },
	{ -121, -105, -89, -74, -58, -42, -26, -11, 4, 20, 35, 51, 67, 83 },
	{ -113, -96, -78, -61, -43, -26, -8, 8, 25, 43, 60, 78, 95, 113 },
	{ -148, -125, -102, -79, -56, -33, -10, 12, 35, 58, 81, 104, 127, 150 },
	{ -132, -113, -95, -77, -59, -40, -22, -4, 14, 32, 50, 68, 87, 105 },
	{ -133, -114, -94, -74, -55, -35, -16, 3, 23, 42, 62, 81, 101, 121 },
	{ -113, -93, -73, -53, -32, -12, 7, 28, 48, 68, 88, 109, 129, 149 },
	{ -136, -115, -93, -71, -49, -27, -5, 16, 38, 60, 82, 104, 126, 148 },
	{ -137, -114, -91, -69, -46, -23, 0, 21, 44, 67, 89, 112, 135, 158 },
	{ -100, -82, -64, -47, -29, -11, 6, 24, 42, 60, 78, 96, 114, 131 },
	{ -116, -95, -73, -52, -31, -10, 11, 32, 53, 74, 96, 117, 138, 159 },
	{ -159, -137, -115, -94, -72, -51, -29, -8, 13, 35, 56, 78, 99, 121 },
	{ -102, -83, -65, -47, -29, -10, 7, 25, 43, 62, 80, 98, 116, 135 },
	{ -128, -110, -91, -72, -53, -35, -16, 2, 21, 39, 58, 77, 95, 114 },
	{ -110, -91, -71, -52, -32, -13, 5, 25, 44, 64, 83, 102, 122, 141 },
	{ -114, -96, -77, -58, -39, -21, -2, 16, 35, 54, 72, 91, 110, 129 },
	{ -94, -76, -58, -40, -21, -3, 14, 32, 51, 69, 87, 105, 124, 142 },
	{ -160, -140, -120, -101, -81, -61, -41, -21, -2, 17, 37, 57, 77, 96 },
	{ -137, -119, -102, -85, -67, -50, -32, -15, 1, 19, 36, 54, 71, 88 },
	{ -140, -120, -101, -81, -62, -43, -23, -4, 14, 34, 53, 72, 92, 111 },
	{ -138, -115, -92, -70, -47, -24, -1, 20, 43, 66, 89, 111, 134, 157 },
	{ -124, -104, -85, -65, -46, -26, -7, 12, 31, 51, 70, 90, 109, 128 },
	{ -105, -87, -70, -52, -35, -17, 0, 17, 34, 52, 69, 87, 105, 122 },
	{ -113, -97, -81, -65, -49, -34, -18, -2, 13, 29, 45, 61, 77, 92 },
	{ -113, -93, -72, -52, -31, -11, 8, 29, 49, 70, 90, 110, 131, 151 },
	{ -48, -36, -24, -12, 0, 11, 23, 35, 47, 59, 71, 84, 96, 108 },
	{ -127, -108, -89, -70, -51, -32, -13, 5, 24, 43, 61, 80, 99, 118 },
	{ -112, -95, -79, -63, -47, -31, -15, 1, 17, 33, 49, 65, 81, 97 },
	{ -121, -101, -81, -61, -41, -20, 0, 19, 39, 59, 79, 99, 120, 140 },
	{ -135, -116, -97, -78, -59, -40, -21, -2, 16, 35, 54, 73, 92, 111 },
	{ -128, -112, -96, -81, -65, -49, -33, -17, -1, 14, 30, 46, 62, 78 },
	{ -153, -132, -110, -89, -68, -47, -26, -5, 16, 37, 58, 79, 100, 121 },
	{ -152, -131, -111, -90, -70, -50, -29, -9, 11, 31, 51, 72, 92, 113 },
	{ -118, -100, -81, -63, -44, -26, -7, 10, 29, 47, 66, 84, 103, 121 },
	{ -163, -142, -122, -101, -80, -59, -38, -18, 2, 23, 44, 65, 85, 106 },
	{ -130, -112, -95, -78, -61, -43, -26, -9, 7, 25, 42, 59, 76, 93 },
	{ -112, -95, -77, -60, -42, -24, -7, 10, 27, 45, 63, 80, 98, 115 },
	{ -89, -72, -55, -38, -21, -4, 12, 29, 46, 63, 80, 97, 114, 131 },
};
static int_t<4,1> backbone_model2_conv2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xf), C(0xe), C(0xb), C(0x0), C(0xd), C(0xc), C(0x0), C(0xf), C(0xf), },
	{ C(0xf), C(0xe), C(0xd), C(0x3), C(0x6), C(0xc), C(0xf), C(0x7), C(0xc), },
	{ C(0xe), C(0xe), C(0xd), C(0xe), C(0xe), C(0xd), C(0xb), C(0xc), C(0xf), },
	{ C(0xe), C(0xf), C(0xf), C(0x0), C(0x7), C(0x5), C(0x0), C(0x5), C(0xd), },
	{ C(0x2), C(0x1), C(0xc), C(0x2), C(0x2), C(0xa), C(0x3), C(0x5), C(0xd), },
	{ C(0x1), C(0x2), C(0x0), C(0x1), C(0x0), C(0xb), C(0x5), C(0x7), C(0x4), },
	{ C(0x4), C(0xd), C(0xd), C(0x1), C(0xf), C(0xc), C(0x2), C(0x2), C(0xb), },
	{ C(0x2), C(0x0), C(0xc), C(0x2), C(0x3), C(0x2), C(0x1), C(0x6), C(0x7), },
	{ C(0x0), C(0x0), C(0x4), C(0x2), C(0x0), C(0x4), C(0x3), C(0x2), C(0x3), },
	{ C(0x5), C(0x2), C(0xf), C(0x4), C(0xe), C(0xd), C(0x1), C(0x9), C(0xd), },
	{ C(0x0), C(0xb), C(0xe), C(0xf), C(0xb), C(0xf), C(0xa), C(0xd), C(0x2), },
	{ C(0xd), C(0xa), C(0xa), C(0xf), C(0x0), C(0xe), C(0x2), C(0x3), C(0x3), },
	{ C(0x0), C(0xe), C(0xd), C(0x1), C(0xe), C(0xc), C(0x2), C(0xb), C(0xb), },
	{ C(0x0), C(0x1), C(0x1), C(0x1), C(0x4), C(0x5), C(0x1), C(0x4), C(0x5), },
	{ C(0x0), C(0x0), C(0x0), C(0x1), C(0x9), C(0xb), C(0x3), C(0xa), C(0x0), },
	{ C(0xe), C(0xe), C(0x3), C(0xf), C(0x3), C(0x7), C(0xf), C(0x3), C(0x4), },
	{ C(0xd), C(0xd), C(0xf), C(0xc), C(0xd), C(0xf), C(0xc), C(0xf), C(0xf), },
	{ C(0x1), C(0x4), C(0x3), C(0x5), C(0x2), C(0xe), C(0x6), C(0xd), C(0xd), },
	{ C(0xc), C(0xc), C(0xc), C(0x0), C(0xf), C(0xc), C(0x0), C(0x0), C(0xb), },
	{ C(0x5), C(0x3), C(0x4), C(0x3), C(0x2), C(0x2), C(0x1), C(0xf), C(0x0), },
	{ C(0x4), C(0x3), C(0xc), C(0x3), C(0x1), C(0xc), C(0x4), C(0x0), C(0xc), },
	{ C(0x2), C(0x1), C(0x5), C(0x2), C(0x2), C(0x4), C(0x2), C(0x0), C(0x3), },
	{ C(0xd), C(0xf), C(0x6), C(0xe), C(0x0), C(0x3), C(0xd), C(0x1), C(0x5), },
	{ C(0x0), C(0xd), C(0xa), C(0x2), C(0x5), C(0xd), C(0x2), C(0x3), C(0x5), },
	{ C(0xd), C(0xd), C(0xf), C(0xc), C(0xc), C(0xe), C(0xf), C(0xe), C(0xf), },
	{ C(0x2), C(0x1), C(0x0), C(0x2), C(0x4), C(0x0), C(0x5), C(0x5), C(0x2), },
	{ C(0x0), C(0x3), C(0x2), C(0x1), C(0x4), C(0x3), C(0x3), C(0x5), C(0x0), },
	{ C(0x2), C(0xf), C(0xd), C(0x6), C(0x2), C(0xd), C(0x3), C(0x4), C(0x0), },
	{ C(0xe), C(0xd), C(0xa), C(0xf), C(0xd), C(0xd), C(0x3), C(0x4), C(0x3), },
	{ C(0x0), C(0x2), C(0x2), C(0x1), C(0x3), C(0x3), C(0x2), C(0x4), C(0x3), },
	{ C(0x4), C(0x6), C(0x5), C(0x1), C(0x1), C(0x1), C(0xb), C(0xc), C(0xc), },
	{ C(0x2), C(0xe), C(0x0), C(0x2), C(0xc), C(0x2), C(0x0), C(0xf), C(0x7), },
	{ C(0xe), C(0xd), C(0x0), C(0xf), C(0xd), C(0xe), C(0xe), C(0xd), C(0xd), },
	{ C(0xd), C(0xf), C(0xe), C(0xc), C(0xc), C(0xe), C(0x1), C(0xa), C(0xd), },
	{ C(0x0), C(0xe), C(0x1), C(0xc), C(0xd), C(0xd), C(0xb), C(0xd), C(0xd), },
	{ C(0x3), C(0x7), C(0x6), C(0xd), C(0xa), C(0xe), C(0xe), C(0xc), C(0xc), },
	{ C(0xc), C(0xf), C(0xf), C(0xd), C(0xf), C(0xf), C(0xd), C(0xf), C(0x0), },
	{ C(0x1), C(0x2), C(0x4), C(0x2), C(0x3), C(0x5), C(0x2), C(0x1), C(0x1), },
	{ C(0xe), C(0xa), C(0xa), C(0x1), C(0xf), C(0xc), C(0x2), C(0x3), C(0xf), },
	{ C(0x3), C(0x5), C(0x2), C(0x1), C(0x4), C(0x3), C(0x1), C(0x2), C(0x1), },
	{ C(0x3), C(0xc), C(0xc), C(0x3), C(0xc), C(0xa), C(0x3), C(0xf), C(0xb), },
	{ C(0x1), C(0xc), C(0xa), C(0x0), C(0xc), C(0xb), C(0x0), C(0xf), C(0x1), },
	{ C(0xf), C(0xd), C(0x1), C(0xd), C(0xe), C(0xe), C(0x0), C(0x7), C(0xc), },
	{ C(0x2), C(0x3), C(0x7), C(0x0), C(0x2), C(0x4), C(0x0), C(0xe), C(0x0), },
	{ C(0x2), C(0x5), C(0x3), C(0x4), C(0x3), C(0xf), C(0x5), C(0x1), C(0xe), },
	{ C(0x1), C(0x0), C(0x4), C(0x1), C(0x3), C(0x3), C(0x2), C(0x4), C(0x4), },
	{ C(0x3), C(0x4), C(0x1), C(0x3), C(0xf), C(0x9), C(0x3), C(0xe), C(0x9), },
	{ C(0x7), C(0x3), C(0xe), C(0x4), C(0x0), C(0xc), C(0x4), C(0xf), C(0xd), },
	{ C(0x1), C(0xf), C(0xf), C(0x1), C(0xd), C(0xb), C(0x0), C(0xc), C(0xb), },
	{ C(0x5), C(0x2), C(0xe), C(0x5), C(0x2), C(0xb), C(0x6), C(0x0), C(0xc), },
	{ C(0xe), C(0xe), C(0x1), C(0xc), C(0xd), C(0x0), C(0xc), C(0xc), C(0xe), },
	{ C(0x1), C(0xd), C(0x0), C(0xf), C(0xc), C(0xc), C(0xf), C(0x0), C(0xa), },
	{ C(0xe), C(0xe), C(0xc), C(0xd), C(0xe), C(0xe), C(0xc), C(0xf), C(0xe), },
	{ C(0x6), C(0x5), C(0x0), C(0x6), C(0x1), C(0xe), C(0x1), C(0xc), C(0xd), },
	{ C(0xc), C(0xf), C(0xf), C(0xd), C(0xe), C(0xf), C(0xc), C(0xf), C(0xf), },
	{ C(0x4), C(0x1), C(0xe), C(0x4), C(0x3), C(0x0), C(0x4), C(0x4), C(0x1), },
	{ C(0xe), C(0xd), C(0xb), C(0x1), C(0x0), C(0xe), C(0x4), C(0x5), C(0x4), },
	{ C(0x2), C(0x1), C(0x2), C(0x6), C(0x3), C(0x5), C(0x4), C(0x0), C(0x1), },
	{ C(0x2), C(0x3), C(0x3), C(0x1), C(0x3), C(0x0), C(0x2), C(0x1), C(0x2), },
	{ C(0x2), C(0x4), C(0x7), C(0x1), C(0x3), C(0x3), C(0x0), C(0xf), C(0x2), },
	{ C(0x2), C(0x2), C(0x1), C(0x6), C(0x6), C(0xf), C(0x0), C(0x4), C(0xd), },
	{ C(0xe), C(0x6), C(0x1), C(0xe), C(0x7), C(0x5), C(0xd), C(0x1), C(0x0), },
	{ C(0xf), C(0x0), C(0x5), C(0xf), C(0x3), C(0x6), C(0x0), C(0xb), C(0x9), },
	{ C(0x0), C(0x3), C(0xe), C(0x5), C(0x4), C(0x9), C(0xf), C(0xa), C(0xa), },
};
static int backbone_model2_conv2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 10, 23, 36, 49, 63, 76, 89 },
	{ 17, 28, 40, 52, 63, 75, 87 },
	{ 11, 26, 40, 55, 69, 84, 98 },
	{ 11, 21, 30, 39, 48, 58, 67 },
	{ 20, 34, 49, 63, 77, 91, 105 },
	{ 16, 30, 43, 57, 70, 83, 97 },
	{ 19, 30, 41, 53, 64, 75, 86 },
	{ 19, 36, 53, 69, 86, 103, 119 },
	{ 9, 20, 30, 40, 51, 61, 72 },
	{ 23, 36, 48, 61, 74, 87, 99 },
	{ 20, 36, 51, 67, 83, 99, 114 },
	{ 18, 33, 48, 63, 78, 93, 109 },
	{ 13, 29, 44, 59, 74, 89, 104 },
	{ 12, 28, 45, 61, 77, 94, 110 },
	{ 15, 26, 37, 48, 59, 70, 81 },
	{ 21, 31, 42, 53, 63, 74, 84 },
	{ 19, 30, 40, 51, 62, 73, 84 },
	{ 21, 34, 47, 60, 73, 86, 99 },
	{ 17, 32, 47, 62, 78, 93, 108 },
	{ 14, 27, 40, 53, 66, 79, 93 },
	{ 15, 27, 39, 51, 63, 75, 87 },
	{ 9, 23, 37, 51, 65, 79, 93 },
	{ 14, 25, 37, 49, 61, 73, 85 },
	{ 18, 30, 41, 53, 65, 76, 88 },
	{ 5, 20, 35, 50, 65, 80, 95 },
	{ 14, 28, 42, 55, 69, 83, 96 },
	{ 14, 32, 50, 68, 87, 105, 123 },
	{ 16, 30, 45, 59, 73, 87, 101 },
	{ 21, 34, 47, 60, 73, 86, 99 },
	{ 11, 25, 38, 51, 65, 78, 91 },
	{ 16, 30, 44, 57, 71, 85, 98 },
	{ 12, 20, 28, 36, 44, 52, 60 },
	{ 14, 30, 45, 60, 76, 91, 107 },
	{ 18, 32, 45, 59, 73, 86, 100 },
	{ 15, 28, 42, 55, 69, 82, 96 },
	{ 32, 48, 65, 81, 98, 115, 131 },
	{ 5, 17, 30, 42, 55, 67, 79 },
	{ 12, 27, 42, 57, 72, 87, 102 },
	{ 21, 37, 53, 69, 84, 100, 116 },
	{ 13, 29, 44, 59, 75, 90, 105 },
	{ 9, 25, 40, 55, 70, 85, 100 },
	{ 18, 36, 54, 72, 90, 108, 126 },
	{ 9, 16, 24, 32, 40, 47, 55 },
	{ 15, 26, 37, 48, 59, 70, 81 },
	{ 16, 30, 44, 59, 73, 87, 102 },
	{ 15, 30, 44, 58, 72, 86, 101 },
	{ 19, 31, 43, 55, 68, 80, 92 },
	{ 2, 15, 27, 40, 53, 66, 78 },
	{ 17, 29, 42, 55, 67, 80, 92 },
	{ 32, 47, 62, 77, 93, 108, 123 },
	{ 10, 25, 39, 54, 69, 83, 98 },
	{ 23, 50, 77, 104, 131, 158, 185 },
	{ 15, 29, 44, 58, 73, 87, 101 },
	{ 15, 33, 50, 68, 85, 103, 120 },
	{ 11, 24, 36, 49, 62, 75, 88 },
	{ 16, 31, 45, 60, 74, 89, 103 },
	{ 19, 33, 47, 61, 74, 88, 102 },
	{ 18, 31, 45, 58, 71, 84, 97 },
	{ 8, 20, 32, 44, 57, 69, 81 },
	{ 15, 29, 42, 56, 69, 83, 96 },
	{ 16, 28, 40, 52, 64, 76, 88 },
	{ 21, 34, 46, 59, 71, 84, 96 },
	{ 26, 38, 50, 62, 74, 86, 99 },
	{ 25, 40, 55, 70, 84, 99, 114 },
};
static int_t<4,64> backbone_model3_conv1_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xf1100e0e3e4e3331L, 0x300100f0ffd512bfL, 0x1130f22916a4bf13L, 0xf14dfffa130f0f0eL) },
	{ C64(0x2fec2fcf11106e22L, 0xf22d2f34f32e113eL, 0x1dd2201e70d0f122L, 0x0f0e103d13f40e4eL) },
	{ C64(0xe021431c2eff1ff1L, 0xfe0001df0da50103L, 0x1d1c131ccf0fe2bfL, 0x0110c0d0ceec3301L) },
	{ C64(0x4052e6ebdad002b4L, 0x0cd202c0db2fd04eL, 0x0020efb0dcd204ddL, 0x54e2021ee022e3faL) },
	{ C64(0x03f1322b2a3f712eL, 0xf20f0cf2019b1023L, 0x0190430d3d0df200L, 0x10e1e1efafeb16efL) },
	{ C64(0xf2000d0e20f01a30L, 0x0302cfe30ee0010dL, 0x207dda33f4c1e29bL, 0x012f0cdb05e7de1dL) },
	{ C64(0x2100eddc01c05b00L, 0xe13421b30ef2f0afL, 0x033d42f0bd2fb017L, 0xa2310bd03fef1100L) },
	{ C64(0x2fcf0c74ef6232f1L, 0xe222ffc503e0a2c4L, 0xef1f0f04efdf231dL, 0xde1441e142c014e2L) },
	{ C64(0x1c03205f1112b001L, 0xdaf3deef0ee0f0f1L, 0xc10d0cf2d21e2e2eL, 0x1a12f202badbf51eL) },
	{ C64(0xf10f11243ee063feL, 0x3e136010f21c0002L, 0xfd1306e141d927cfL, 0x1d211bf1e0400e02L) },
	{ C64(0x120ed136b442bd00L, 0xf2f33200101f2a01L, 0x3106f1c50c2f4c03L, 0x1fe44e32ef2e4a3fL) },
	{ C64(0x11422d2ce1201d33L, 0x0c2dabfb3bb16211L, 0xc4152d00f01b4312L, 0x220cef0240ed46dfL) },
	{ C64(0x09cf110221100ff2L, 0xfd0fe1120e002ff0L, 0x94e1fe1000fe0232L, 0x0b220f2022cdf32fL) },
	{ C64(0xeac4f2ee1fd16e21L, 0xfbe11d04dd1f3000L, 0x03e0fd1001f0020fL, 0x1c2c1311e0b0d0fdL) },
	{ C64(0x341bdc00e16c0fdeL, 0x1fff014354d02421L, 0xbde1b2fffdfcfe05L, 0x25c1fbd03f410e46L) },
	{ C64(0x0ff02c719e2d3400L, 0x013611f2420fdb21L, 0x2d016f2924f3ede0L, 0x3b41434ee92ce0f6L) },
	{ C64(0x1fff2f13fc46ffceL, 0xe0230fcf27e4d02eL, 0xff1df1e1ff6e25dfL, 0xd0ef111310fdfef6L) },
	{ C64(0xfd0cfbf0d1bf2fe1L, 0xdf1140f10af0ddd3L, 0xe11eede02fff7100L, 0x00de1b2c30decee0L) },
	{ C64(0x1ca2f4b100bc1b62L, 0xc0145420ccf04242L, 0x11134ce104f0306eL, 0x1e0125601ea0fe2dL) },
	{ C64(0xf12052d7ffbc0cffL, 0xef2f21e021d6f251L, 0x0cbc4df9cd4c2da4L, 0x02cf1c071bda1f05L) },
	{ C64(0xccf13f02bcf2e4b1L, 0x0f2e20ef1002f5b3L, 0xef1afb0f002033e0L, 0xefc202b00cfedfd3L) },
	{ C64(0x202731e1ae5e5c16L, 0x10ef14c0e0020e14L, 0xb1ef2e3c0cdfb01dL, 0x32f2530e150f6b5dL) },
	{ C64(0x220211fc31e1ff60L, 0xc15a01d2bf013101L, 0x141ae1420442f0ffL, 0x93d1cca0c311e2eeL) },
	{ C64(0xd329fd4fe11e0f3bL, 0x10c40e3f3fffd06bL, 0x0e074f6f1e0f121fL, 0xf073ef630f61010eL) },
	{ C64(0x10e133e11050bfdeL, 0x22b1f06d04f0f61dL, 0x001fbf2c01d00f2eL, 0xfe7e1ff20eff1f0dL) },
	{ C64(0xd40121ffd001e4d3L, 0x602b2021f125f2b4L, 0x01c3cc00e3e02d1bL, 0xedd224cd51011d13L) },
	{ C64(0x2ff5e2fad134e4feL, 0x1e0eff243fc12aafL, 0x0111f0e030fe00e1L, 0x521c3001c4e01213L) },
	{ C64(0x4356c0fff2e1023aL, 0x1221e02b111f60c0L, 0x1e2f10fd13353dd0L, 0x40fec50fcb3ffef0L) },
	{ C64(0xf03e710101be2c00L, 0xee1c1f0011df0312L, 0x1e04120331b042a0L, 0x02e00e2d12201a0fL) },
	{ C64(0xeff016ed012e4121L, 0x1102e23b10020e40L, 0x5ebd66ecff0eec00L, 0x4c5c4f42ea205f51L) },
	{ C64(0x2cae12d21e3422ceL, 0xf00df2e4e640b421L, 0xed1f113504ff43f1L, 0xa9d100f1e1cf1f2dL) },
	{ C64(0x11ed01021ebe5d0fL, 0x1f0c32d1ef3f2133L, 0x1391e0e3004d2f42L, 0x1dee21037f100e20L) },
	{ C64(0x09a10ac14fefb342L, 0x132630512f93dd0bL, 0x107b33ee13e4bf1eL, 0x92200111f0e30902L) },
	{ C64(0x3001c14f62ef7e6fL, 0x02fd332305c44ee4L, 0x40ae2e5eb5fa25bcL, 0x0e331cf101de5a42L) },
	{ C64(0xfe001efd20104b20L, 0xcbf1de1341db063dL, 0xbd2f3f013e2e12b1L, 0x30100c3ce10ab1e0L) },
	{ C64(0xefe1d22420c92c2dL, 0xffb51f3ef02539f0L, 0x0fc3042ca1deb9c4L, 0x0e6f4ff4101f3920L) },
	{ C64(0x0f3d30df21f26ed0L, 0xdf3262e30efffbe2L, 0xefe01f017dce76c0L, 0xf3110f1d001f0f02L) },
	{ C64(0xcc1ddd00ff2362f0L, 0xeeef31003b2fffedL, 0xdd115dee7cff05e1L, 0x3ddc20f0bd0e143bL) },
	{ C64(0xdeef1af0f25de02eL, 0x21f0bf4162bf04fdL, 0x1b721321f063f4e6L, 0x00bf1e0db1131421L) },
	{ C64(0x5ed23ebe313d2df1L, 0xf043e2f3100c0011L, 0x05df12ef1e1eed60L, 0xd22ef60f53f01221L) },
	{ C64(0x002f31fe0fff3ddfL, 0xa163d1b432d0fbccL, 0x013d21d120003e02L, 0x122d0352dfe1e204L) },
	{ C64(0xddab3fe31cff5bf0L, 0x1ede0d0ddf11f0deL, 0xe41021d10e0df5cfL, 0xc34bde0073f22fe0L) },
	{ C64(0x0fededd43b50732dL, 0x2331112324be172eL, 0x0d90222c7edee36fL, 0xfd0d15204fef0624L) },
	{ C64(0x9f1d20f1c0d10225L, 0x1f204e0e1af31ef4L, 0x3e1101bc0fef1012L, 0x1edf3f102ff3d1aeL) },
	{ C64(0xffd0d402c113dd10L, 0x12a2200e14411feeL, 0x120fff27ef2b1020L, 0x00133a210ef1fff1L) },
	{ C64(0x3feed10cbf1431fdL, 0x062f271000f2cf0eL, 0x443df1e10ffdfe30L, 0xe012fcedfcee657fL) },
	{ C64(0xe622a1fde5e00113L, 0xeffff2f221b42e5bL, 0xec4ee036ff40f422L, 0x2194401cadf1c2efL) },
	{ C64(0x214400612061efd0L, 0xf2bee01234d1311fL, 0x0f12ea7d0f122123L, 0x63f3d5f221ff01e5L) },
	{ C64(0x1d34d0f203b29e14L, 0xef252ddfd2dd001aL, 0xd0f90100b221f11eL, 0x1530fe223f2fc3b5L) },
	{ C64(0x212445de5e0bcf1fL, 0x0d31d0fcdf40136eL, 0xebef4312163dffa4L, 0x503f2510ac0af6c2L) },
	{ C64(0x26325f461f02deffL, 0xde2ff0edb22c1f33L, 0xe10f02152edf0fefL, 0xf302df075f40f302L) },
	{ C64(0xdeefa1ff34e21eefL, 0xedff23f42101eeecL, 0x31feff014de623e3L, 0xe0fd03fe1250ba21L) },
	{ C64(0xa150124041d53231L, 0xff1e11dfdd22353eL, 0xfe23ef321000f26bL, 0x2a231e11a12ca2baL) },
	{ C64(0x1132230144401bf3L, 0xecf1ced142f02112L, 0x0e145ffdf1302fb6L, 0x230e101f242c1001L) },
	{ C64(0x10e10fdafe0f0407L, 0x204af1c20031c171L, 0x1e0fd031f11feff0L, 0xa2d351bcef200f12L) },
	{ C64(0xcf1e23fef2f4d201L, 0x11fe130e303dc514L, 0xe1110cf30a5c320bL, 0xf0d309f51beaf1d1L) },
	{ C64(0xe10e70011ce3f0ceL, 0x00d22d2cff2fbeefL, 0x550022b03ef2e213L, 0xae1dd2125f33dea0L) },
	{ C64(0xf02ec242da3134e1L, 0x31e33ff40034091cL, 0xde02f92a0112c353L, 0x0f10e01de1e2cd01L) },
	{ C64(0x00022d2193cf1f7eL, 0xfe44f1fd0d133d23L, 0xd11312cf0f7f01fdL, 0xc0a1fef21610f202L) },
	{ C64(0x0743d00edfd01e1eL, 0xe1f252e004ef4d12L, 0x1e000f21722d35ffL, 0x16d40fcf1021d2e2L) },
	{ C64(0x01b1ddcedbe02ddeL, 0x11e4310dcd3ed00aL, 0x3200eea3f0dc2210L, 0xc1efe20caeef1f02L) },
	{ C64(0x324e9f3012abe002L, 0xf21d1322fd35e0f2L, 0x2c0f0a31e3f52f39L, 0x21f4140321b4041eL) },
	{ C64(0x10eea44f0326e21cL, 0xf1c154e2d2eb0bb1L, 0x039003d23ef1404bL, 0x0f3122041ffe2f40L) },
	{ C64(0xa34f44de1d21c2a3L, 0x11ad120c1b24c3ffL, 0x126bcfee3cb61c13L, 0x541bb3c0c22d0ffdL) },
};
static int backbone_model3_conv1_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -113, -93, -74, -55, -36, -17, 1, 21, 40, 59, 78, 97, 116, 136 },
	{ -95, -79, -63, -46, -30, -14, 1, 18, 34, 50, 66, 82, 99, 115 },
	{ -113, -97, -81, -65, -49, -32, -16, 0, 15, 31, 47, 63, 79, 96 },
	{ -106, -91, -76, -60, -45, -30, -15, 0, 14, 29, 44, 59, 74, 89 },
	{ -125, -106, -86, -67, -48, -28, -9, 10, 29, 49, 68, 88, 107, 126 },
	{ -130, -112, -94, -76, -58, -39, -21, -3, 14, 32, 50, 68, 86, 105 },
	{ -87, -73, -59, -46, -32, -18, -5, 8, 22, 36, 49, 63, 77, 90 },
	{ -88, -72, -56, -41, -25, -10, 5, 21, 36, 52, 67, 83, 99, 114 },
	{ -138, -119, -99, -80, -61, -41, -22, -3, 16, 35, 54, 74, 93, 112 },
	{ -94, -78, -62, -46, -30, -15, 0, 16, 32, 48, 64, 80, 96, 112 },
	{ -116, -97, -78, -59, -40, -21, -1, 17, 36, 55, 74, 93, 113, 132 },
	{ -113, -96, -80, -63, -46, -29, -12, 4, 21, 37, 54, 71, 88, 105 },
	{ -85, -72, -59, -47, -34, -21, -8, 4, 17, 30, 43, 56, 68, 81 },
	{ -132, -113, -94, -75, -56, -37, -18, 0, 19, 38, 57, 76, 95, 114 },
	{ -112, -95, -77, -59, -42, -24, -6, 10, 28, 46, 63, 81, 99, 117 },
	{ -109, -92, -75, -59, -42, -25, -8, 7, 24, 41, 58, 74, 91, 108 },
	{ -96, -81, -65, -49, -34, -18, -3, 12, 28, 43, 59, 74, 90, 106 },
	{ -118, -102, -86, -70, -54, -38, -22, -6, 9, 25, 41, 57, 73, 89 },
	{ -104, -88, -71, -55, -39, -23, -6, 9, 25, 42, 58, 74, 90, 107 },
	{ -134, -115, -97, -79, -61, -42, -24, -6, 11, 30, 48, 66, 84, 103 },
	{ -103, -88, -73, -58, -43, -27, -12, 2, 17, 33, 48, 63, 78, 94 },
	{ -133, -112, -91, -70, -49, -28, -7, 13, 34, 55, 76, 97, 118, 139 },
	{ -103, -87, -71, -55, -40, -24, -8, 7, 23, 38, 54, 70, 86, 102 },
	{ -83, -69, -55, -41, -28, -14, 0, 13, 27, 41, 54, 68, 82, 96 },
	{ -86, -73, -59, -46, -33, -19, -6, 6, 20, 33, 47, 60, 73, 87 },
	{ -85, -71, -58, -45, -31, -18, -5, 8, 21, 34, 48, 61, 74, 88 },
	{ -95, -80, -65, -50, -35, -20, -5, 8, 23, 38, 53, 68, 83, 98 },
	{ -81, -69, -57, -45, -33, -21, -9, 2, 14, 26, 38, 50, 62, 74 },
	{ -92, -79, -66, -53, -40, -26, -13, 0, 12, 26, 39, 52, 65, 79 },
	{ -106, -88, -71, -54, -36, -19, -2, 14, 32, 49, 66, 83, 101, 118 },
	{ -100, -83, -66, -49, -32, -15, 1, 18, 35, 52, 69, 86, 103, 120 },
	{ -107, -89, -71, -54, -36, -18, -1, 16, 34, 51, 69, 87, 104, 122 },
	{ -136, -115, -93, -71, -49, -27, -5, 15, 37, 59, 81, 103, 125, 146 },
	{ -122, -101, -81, -60, -40, -20, 0, 20, 40, 61, 81, 102, 122, 142 },
	{ -125, -108, -90, -72, -55, -37, -20, -2, 15, 32, 50, 67, 85, 103 },
	{ -145, -124, -103, -82, -61, -40, -19, 1, 22, 43, 64, 85, 106, 127 },
	{ -91, -75, -59, -42, -26, -10, 5, 22, 38, 54, 71, 87, 103, 119 },
	{ -101, -86, -71, -56, -40, -25, -10, 4, 19, 34, 49, 64, 79, 94 },
	{ -119, -100, -81, -63, -44, -25, -6, 12, 31, 50, 69, 88, 106, 125 },
	{ -110, -92, -74, -56, -38, -20, -2, 14, 32, 50, 68, 86, 104, 122 },
	{ -84, -70, -57, -43, -29, -16, -2, 10, 24, 37, 51, 65, 78, 92 },
	{ -102, -87, -72, -57, -42, -27, -12, 2, 17, 33, 48, 63, 78, 93 },
	{ -112, -91, -71, -51, -30, -10, 10, 30, 51, 71, 91, 112, 132, 153 },
	{ -114, -96, -77, -59, -41, -22, -4, 14, 32, 50, 69, 87, 106, 124 },
	{ -96, -81, -66, -51, -35, -20, -5, 9, 24, 40, 55, 70, 85, 100 },
	{ -106, -88, -70, -52, -34, -16, 1, 19, 37, 55, 73, 90, 108, 126 },
	{ -98, -83, -68, -52, -37, -22, -6, 8, 23, 39, 54, 69, 85, 100 },
	{ -109, -91, -73, -55, -37, -19, 0, 17, 35, 53, 71, 89, 108, 126 },
	{ -99, -85, -71, -57, -43, -28, -14, 0, 13, 27, 41, 56, 70, 84 },
	{ -123, -104, -85, -66, -47, -28, -9, 9, 28, 47, 65, 84, 103, 122 },
	{ -105, -87, -70, -53, -36, -19, -1, 15, 32, 49, 66, 84, 101, 118 },
	{ -108, -92, -76, -61, -45, -30, -14, 0, 16, 32, 47, 63, 78, 94 },
	{ -113, -95, -77, -59, -42, -24, -6, 11, 29, 46, 64, 82, 100, 117 },
	{ -112, -95, -78, -61, -44, -28, -11, 5, 22, 39, 55, 72, 89, 106 },
	{ -85, -72, -58, -45, -32, -18, -5, 8, 21, 35, 48, 62, 75, 88 },
	{ -102, -85, -69, -52, -35, -19, -2, 14, 31, 47, 64, 81, 98, 114 },
	{ -95, -81, -67, -53, -38, -24, -10, 3, 17, 31, 46, 60, 74, 88 },
	{ -118, -100, -82, -64, -46, -28, -9, 8, 26, 44, 62, 80, 98, 116 },
	{ -92, -78, -64, -50, -36, -22, -8, 5, 19, 33, 47, 61, 75, 89 },
	{ -121, -101, -81, -61, -41, -21, -1, 18, 38, 58, 78, 98, 118, 138 },
	{ -141, -121, -102, -83, -63, -44, -25, -5, 13, 32, 52, 71, 90, 110 },
	{ -88, -73, -58, -44, -29, -14, 0, 15, 29, 44, 59, 74, 89, 104 },
	{ -100, -83, -66, -48, -31, -14, 3, 20, 37, 55, 72, 89, 107, 124 },
	{ -128, -109, -90, -71, -52, -33, -14, 5, 24, 43, 62, 81, 100, 119 },
};
static int_t<4,1> backbone_model3_conv1_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xb), C(0x2), C(0x6), C(0xd), C(0xd), C(0x2), C(0xa), C(0x1), C(0x6), },
	{ C(0xc), C(0xb), C(0xb), C(0xe), C(0xe), C(0xe), C(0x1), C(0x5), C(0x2), },
	{ C(0x3), C(0x2), C(0x1), C(0x2), C(0x2), C(0xf), C(0x0), C(0x2), C(0x0), },
	{ C(0xb), C(0xf), C(0x0), C(0xd), C(0xf), C(0x3), C(0xc), C(0xe), C(0xf), },
	{ C(0xc), C(0x0), C(0xe), C(0xe), C(0xe), C(0x1), C(0x0), C(0xd), C(0xd), },
	{ C(0x9), C(0xa), C(0x0), C(0x2), C(0xf), C(0x0), C(0x1), C(0xc), C(0xe), },
	{ C(0x4), C(0xd), C(0xa), C(0x4), C(0xf), C(0xc), C(0x5), C(0x0), C(0xe), },
	{ C(0x0), C(0x4), C(0x5), C(0x1), C(0x5), C(0x2), C(0xb), C(0xe), C(0x0), },
	{ C(0x2), C(0xa), C(0xf), C(0x3), C(0x9), C(0x2), C(0x4), C(0x2), C(0xd), },
	{ C(0x6), C(0x2), C(0xc), C(0x2), C(0xb), C(0xf), C(0x1), C(0xd), C(0xf), },
	{ C(0x0), C(0xd), C(0xb), C(0x0), C(0xd), C(0xe), C(0xf), C(0xe), C(0xf), },
	{ C(0x0), C(0xf), C(0x0), C(0xe), C(0x9), C(0x0), C(0xf), C(0x7), C(0xc), },
	{ C(0x1), C(0x1), C(0xf), C(0x9), C(0x0), C(0x1), C(0x3), C(0x1), C(0x0), },
	{ C(0x2), C(0x2), C(0xb), C(0x9), C(0x2), C(0xe), C(0x3), C(0x4), C(0x1), },
	{ C(0x2), C(0xf), C(0x2), C(0x1), C(0x7), C(0x0), C(0x0), C(0x2), C(0xb), },
	{ C(0x2), C(0x7), C(0x3), C(0xf), C(0xe), C(0x4), C(0x1), C(0xf), C(0x5), },
	{ C(0x1), C(0x4), C(0x5), C(0x1), C(0x5), C(0x2), C(0xf), C(0xf), C(0xd), },
	{ C(0x0), C(0x5), C(0x4), C(0xd), C(0x3), C(0x6), C(0xc), C(0xd), C(0x3), },
	{ C(0x9), C(0xa), C(0x1), C(0xf), C(0x5), C(0x5), C(0xf), C(0x2), C(0x3), },
	{ C(0xf), C(0xe), C(0x0), C(0x4), C(0x0), C(0x1), C(0x3), C(0x6), C(0x4), },
	{ C(0x2), C(0x3), C(0x1), C(0x2), C(0x7), C(0xf), C(0xd), C(0xa), C(0xa), },
	{ C(0x0), C(0xe), C(0xf), C(0xd), C(0x6), C(0xd), C(0x1), C(0x7), C(0x1), },
	{ C(0xd), C(0xa), C(0x0), C(0xe), C(0xc), C(0x1), C(0xe), C(0x2), C(0x1), },
	{ C(0x6), C(0x7), C(0x2), C(0xe), C(0xb), C(0xe), C(0xf), C(0xf), C(0x1), },
	{ C(0x6), C(0x4), C(0xc), C(0x1), C(0x0), C(0x1), C(0xc), C(0xb), C(0x0), },
	{ C(0xe), C(0xe), C(0xb), C(0xe), C(0xe), C(0x0), C(0x2), C(0x7), C(0x4), },
	{ C(0x4), C(0x1), C(0x1), C(0x1), C(0xe), C(0x0), C(0xf), C(0x9), C(0xb), },
	{ C(0x1), C(0x0), C(0xa), C(0xf), C(0x5), C(0x4), C(0xd), C(0xa), C(0x4), },
	{ C(0x9), C(0xd), C(0x5), C(0xb), C(0x1), C(0x3), C(0x2), C(0x0), C(0x0), },
	{ C(0x2), C(0x1), C(0xd), C(0x4), C(0x6), C(0x0), C(0x3), C(0x0), C(0x4), },
	{ C(0x0), C(0x2), C(0x5), C(0x1), C(0x9), C(0xf), C(0xf), C(0xe), C(0xf), },
	{ C(0x4), C(0x2), C(0x4), C(0xd), C(0xf), C(0x2), C(0xa), C(0xa), C(0x0), },
	{ C(0xd), C(0xa), C(0xc), C(0xf), C(0x1), C(0x1), C(0xe), C(0xe), C(0x2), },
	{ C(0xf), C(0x0), C(0x4), C(0x0), C(0x6), C(0x3), C(0x2), C(0x5), C(0x1), },
	{ C(0x4), C(0xc), C(0xf), C(0xd), C(0xe), C(0x1), C(0xa), C(0xd), C(0x0), },
	{ C(0xd), C(0xf), C(0xe), C(0xe), C(0xf), C(0xe), C(0xc), C(0xe), C(0xc), },
	{ C(0xd), C(0x3), C(0x7), C(0xe), C(0x1), C(0x3), C(0x0), C(0xf), C(0xf), },
	{ C(0xa), C(0x0), C(0x0), C(0xb), C(0x3), C(0x1), C(0x1), C(0x4), C(0x6), },
	{ C(0x1), C(0x3), C(0x2), C(0x2), C(0x3), C(0x1), C(0x2), C(0x4), C(0x2), },
	{ C(0x0), C(0x6), C(0x4), C(0x3), C(0x2), C(0x0), C(0xe), C(0xd), C(0xf), },
	{ C(0x4), C(0x1), C(0xa), C(0x2), C(0xf), C(0xf), C(0xa), C(0xf), C(0x6), },
	{ C(0x4), C(0xa), C(0xa), C(0x0), C(0x7), C(0xe), C(0xd), C(0x1), C(0x4), },
	{ C(0xe), C(0xf), C(0xe), C(0xd), C(0xc), C(0xe), C(0xe), C(0xd), C(0x0), },
	{ C(0x2), C(0x3), C(0x2), C(0x1), C(0xa), C(0x1), C(0x0), C(0xd), C(0xe), },
	{ C(0xb), C(0xf), C(0x5), C(0xc), C(0x1), C(0x3), C(0xf), C(0x1), C(0x5), },
	{ C(0x1), C(0xc), C(0x2), C(0x0), C(0x6), C(0xf), C(0x2), C(0x6), C(0x0), },
	{ C(0x6), C(0x1), C(0x1), C(0xd), C(0xa), C(0x0), C(0xb), C(0x1), C(0xf), },
	{ C(0x2), C(0xc), C(0xe), C(0xc), C(0x3), C(0x3), C(0xc), C(0x7), C(0x3), },
	{ C(0x0), C(0xe), C(0x1), C(0xe), C(0x9), C(0xd), C(0xf), C(0xe), C(0x0), },
	{ C(0x0), C(0xe), C(0x0), C(0x3), C(0x2), C(0x0), C(0x2), C(0x6), C(0x3), },
	{ C(0xe), C(0xc), C(0x0), C(0x0), C(0x4), C(0xe), C(0x4), C(0x7), C(0xf), },
	{ C(0x7), C(0x4), C(0xe), C(0xe), C(0x3), C(0xd), C(0xf), C(0x4), C(0x0), },
	{ C(0x0), C(0x2), C(0xf), C(0xd), C(0x9), C(0x1), C(0x3), C(0x3), C(0x0), },
	{ C(0xe), C(0xa), C(0xf), C(0xd), C(0x3), C(0x3), C(0x9), C(0x2), C(0x2), },
	{ C(0x2), C(0xa), C(0x2), C(0x0), C(0xf), C(0xf), C(0x3), C(0x7), C(0x2), },
	{ C(0x0), C(0xa), C(0xf), C(0xf), C(0xa), C(0x3), C(0x1), C(0xa), C(0x3), },
	{ C(0x0), C(0xe), C(0xd), C(0x0), C(0x9), C(0x2), C(0x2), C(0x6), C(0x1), },
	{ C(0xb), C(0xb), C(0xd), C(0x1), C(0xf), C(0x0), C(0xf), C(0xd), C(0x0), },
	{ C(0x1), C(0xb), C(0xe), C(0x6), C(0xd), C(0xd), C(0x6), C(0x2), C(0x0), },
	{ C(0x7), C(0xe), C(0xc), C(0x0), C(0x0), C(0x4), C(0xf), C(0x2), C(0x4), },
	{ C(0x6), C(0x0), C(0x9), C(0x1), C(0x1), C(0xb), C(0x1), C(0x3), C(0xb), },
	{ C(0x0), C(0xc), C(0xf), C(0xf), C(0xd), C(0x0), C(0xe), C(0xd), C(0xf), },
	{ C(0xb), C(0xa), C(0xc), C(0x1), C(0xc), C(0xe), C(0x4), C(0x5), C(0x3), },
	{ C(0xe), C(0xe), C(0xb), C(0xf), C(0x1), C(0x9), C(0x0), C(0xf), C(0xa), },
};
static int backbone_model3_conv1_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 2, 13, 24, 35, 46, 58, 69 },
	{ 4, 16, 29, 42, 54, 67, 80 },
	{ 1, 11, 21, 30, 40, 50, 60 },
	{ 8, 23, 38, 52, 67, 81, 96 },
	{ 7, 17, 26, 36, 46, 55, 65 },
	{ -1, 13, 28, 43, 58, 73, 89 },
	{ 10, 24, 37, 51, 65, 79, 93 },
	{ 14, 27, 39, 52, 64, 76, 89 },
	{ 4, 14, 25, 35, 45, 56, 66 },
	{ 7, 16, 25, 34, 43, 52, 61 },
	{ 0, 15, 31, 47, 62, 78, 94 },
	{ 5, 14, 23, 32, 40, 49, 58 },
	{ 4, 11, 17, 24, 30, 37, 43 },
	{ 4, 12, 19, 26, 33, 40, 47 },
	{ 1, 10, 20, 29, 39, 48, 58 },
	{ 6, 21, 36, 52, 67, 82, 97 },
	{ 7, 17, 27, 37, 47, 58, 68 },
	{ -2, 10, 23, 36, 48, 61, 74 },
	{ 8, 20, 32, 44, 55, 67, 79 },
	{ 5, 18, 30, 43, 55, 68, 80 },
	{ -4, 10, 26, 41, 57, 72, 88 },
	{ 3, 14, 25, 36, 47, 58, 69 },
	{ 12, 22, 32, 41, 51, 61, 70 },
	{ 7, 20, 33, 46, 59, 71, 84 },
	{ 9, 19, 30, 40, 50, 61, 71 },
	{ 9, 20, 31, 42, 53, 64, 74 },
	{ 5, 15, 25, 35, 45, 55, 65 },
	{ 10, 23, 36, 49, 63, 76, 89 },
	{ 7, 18, 28, 39, 49, 60, 70 },
	{ 1, 16, 31, 46, 62, 77, 92 },
	{ 11, 20, 29, 37, 46, 55, 64 },
	{ 6, 17, 27, 37, 47, 57, 68 },
	{ 8, 18, 29, 39, 49, 59, 69 },
	{ 0, 16, 34, 52, 69, 87, 104 },
	{ 0, 13, 27, 40, 53, 67, 80 },
	{ 14, 25, 37, 48, 60, 71, 83 },
	{ 1, 12, 22, 32, 43, 53, 63 },
	{ 6, 16, 27, 37, 48, 58, 68 },
	{ 9, 23, 36, 50, 64, 78, 92 },
	{ 8, 19, 30, 41, 52, 63, 74 },
	{ 8, 18, 28, 38, 47, 57, 67 },
	{ 7, 18, 30, 42, 54, 66, 78 },
	{ 3, 17, 31, 45, 59, 73, 87 },
	{ 3, 10, 17, 24, 31, 38, 45 },
	{ 0, 13, 26, 40, 53, 66, 79 },
	{ 3, 13, 23, 33, 43, 53, 63 },
	{ 2, 16, 30, 44, 57, 71, 85 },
	{ 9, 18, 27, 36, 46, 55, 64 },
	{ 10, 25, 41, 56, 72, 88, 103 },
	{ 0, 11, 22, 34, 46, 58, 70 },
	{ 7, 16, 25, 34, 44, 53, 62 },
	{ 0, 12, 25, 38, 51, 64, 77 },
	{ 3, 10, 18, 25, 33, 40, 48 },
	{ -4, 6, 18, 29, 41, 52, 64 },
	{ 16, 25, 35, 44, 54, 63, 73 },
	{ 2, 20, 38, 55, 73, 90, 108 },
	{ 2, 13, 24, 36, 47, 59, 70 },
	{ 9, 18, 28, 38, 48, 58, 68 },
	{ 16, 27, 39, 51, 63, 75, 87 },
	{ 3, 11, 19, 27, 35, 43, 51 },
	{ 13, 24, 35, 46, 57, 68, 79 },
	{ 1, 15, 29, 42, 56, 70, 84 },
	{ -6, 8, 23, 38, 53, 68, 84 },
	{ 17, 31, 45, 59, 73, 87, 101 },
};
static int_t<4,64> backbone_model3_conv2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xb24032ce0b22042eL, 0x542011302a2010e1L, 0x0df3c3ffbac63c04L, 0xe34f2d2220fdc324L) },
	{ C64(0x2fd0f62eff1e0efaL, 0xedf101eed0daf421L, 0x1f95ee2f1edc1ee3L, 0x00ffd21d121042f2L) },
	{ C64(0xdf0d034503131c00L, 0xc2cde03f1f0e0012L, 0xe0de712c6e1e10feL, 0x70d1a411a20f01f0L) },
	{ C64(0x510ff052e2f11221L, 0xf300e523e2c02f43L, 0xcb0ff3bfeaf1533dL, 0xf300f0223011130bL) },
	{ C64(0x203c3cece5e20c0fL, 0xf00d3ce702d011ebL, 0xdccf0c75701a0bbfL, 0x12004de0f3fefdc4L) },
	{ C64(0x14fd2d23f2c3254eL, 0x132626dd01f134a6L, 0x71ae104ffc0c1fdeL, 0xcff33a506be50ef2L) },
	{ C64(0x7c1f0020e3fe11faL, 0xddcbfe40cf25fc60L, 0x36dd6cddf420023fL, 0xf22304e32d1dc0b3L) },
	{ C64(0x240312156e130f34L, 0xf2e0fe3f430dbee4L, 0xf02123005e10202cL, 0x13fdd242051e31dfL) },
	{ C64(0xc2fdfec301121cceL, 0xff7121fffe4f1460L, 0x0e50deee0c44e00fL, 0xce211bcedfc0d05fL) },
	{ C64(0xe12d5f00ce0332d3L, 0xdf0a0e31ed441d35L, 0x40e0f1fc0ff07f5fL, 0xc1fffde2f11bfe35L) },
	{ C64(0xb1d112ef2fe0410eL, 0xcc201e1101e11f1fL, 0xfddfcfd0fe2cfc3dL, 0xdd4ff0700fdfe0bfL) },
	{ C64(0x23f10f1d22fac1f0L, 0x1e6fb0e2f1e10131L, 0x0fd2f11fd1040130L, 0x0f0e1ffaf1111f00L) },
	{ C64(0x254200324e15103eL, 0x14c02652c322ff1fL, 0x15592d002f141071L, 0x43033e22d4535432L) },
	{ C64(0x3dde0f36e5dcf310L, 0xfdff40a00010f130L, 0x1ddff1d01260f401L, 0xff16313c4e2feef0L) },
	{ C64(0xce43e633ede0de0cL, 0x12d04a05d005de4eL, 0x2c022f652beed0d3L, 0xced200e0deee3ed1L) },
	{ C64(0x41f1202efe1d2cd2L, 0x1ea2a140311100c1L, 0x05322101feb2010fL, 0x0f2fb2e0f0fe10efL) },
	{ C64(0x26edd1f2acf21721L, 0xd50cdee300d2d3eeL, 0xee10fb101ccf6d03L, 0x3201edff13fe3001L) },
	{ C64(0x2dceee5316fbde02L, 0x0df0efc0eef0f31eL, 0x234e4cd0166ab3d1L, 0xfd00fe410df1ddd0L) },
	{ C64(0x20f1fde0e70f3f2fL, 0x0e0e3105110e1fffL, 0x2d1f41f1612e191aL, 0x2f0f2ef1ad1ed020L) },
	{ C64(0x2e550121ff44f130L, 0x31de3f2efeee0202L, 0x0213013f2e3d5031L, 0x02a13fe50f4d3120L) },
	{ C64(0x5cfdca45d600d03dL, 0xe1220dd2dd1d1401L, 0xf5124def55fdf6c1L, 0x1feed0ee007ed12dL) },
	{ C64(0x1e21a325e23fa52eL, 0x0b2fe100e2914363L, 0x2101502f4ce44cd2L, 0x36d340fee44313c4L) },
	{ C64(0x412f2e22b34d32f6L, 0x126cdb333e122cf2L, 0xaf213c2001d23c52L, 0xf100000d0d1a3f39L) },
	{ C64(0x1623023220ee5f39L, 0xcd42c501f31f4a11L, 0x02fb0c0111013145L, 0x2e1da6ffe5c22216L) },
	{ C64(0x3d04d1cd0e42b1eaL, 0x110e0c6bebe1b62eL, 0xe7e049efeeff0f1fL, 0x142131f6fe0ceeeeL) },
	{ C64(0xccf5110f3c62fea4L, 0x3f31055fd03ef6fbL, 0x5ea20d330d000164L, 0xe200003236c01370L) },
	{ C64(0x1210de24ff04feedL, 0xde1e0e520e0e0f16L, 0x1b12e2de6120c5deL, 0x0eece131ff0fd01fL) },
	{ C64(0x0f59d13fd2efe24eL, 0x2f03f3b2f4ef62f0L, 0xf222211206e112e2L, 0x43c113daf040222dL) },
	{ C64(0xfc401fcf0e3f90daL, 0x62e5ccbdde17f3ddL, 0x14270ce1dd101de5L, 0xcfd00eeddf7e0ffcL) },
	{ C64(0x2bdfe131ec21ddd5L, 0xa34f10d2a3f2c170L, 0xd04fb10f9fe5d610L, 0x010fcd0d5f0fd03fL) },
	{ C64(0xbc4e0e300ad11df2L, 0x1f0321cf15011befL, 0xe1f2fd41febf06c7L, 0x63f20e02250e003fL) },
	{ C64(0x1d3f30341024204fL, 0x1f7f4eb21322fe1eL, 0xec5ffe0fdb4200efL, 0xb0355aecd0cedfe5L) },
	{ C64(0xff022f021620e211L, 0x20f1e0100d02f112L, 0xadeee46aeb30c22aL, 0x7f1e0eff4d0ebd00L) },
	{ C64(0xd75026e10940207aL, 0x50f4346a42310cd2L, 0x32d41febcba42061L, 0xf132171e26200164L) },
	{ C64(0xb2f104ef5f3fdffdL, 0xe3242ded0d3db5baL, 0xea530fbfeee3ef1dL, 0xee10121ee0fb0622L) },
	{ C64(0xf1df01f102f01e29L, 0x0d040ee1dffd11fdL, 0x1edefe332fd0deb4L, 0x1feffe4ef1d3ee06L) },
	{ C64(0x24056d322e303ee0L, 0x1442e303fe1b34a0L, 0x321a1000d13e00bfL, 0x102fb224c1d2a233L) },
	{ C64(0x0df0d21e1e0f3050L, 0x0fe24fdfe0ffe110L, 0xef50d202c007c32eL, 0xf2f0300e6e221e40L) },
	{ C64(0x42f513ed1e1da5e6L, 0xd021df06f20420eeL, 0x02a502420defe3efL, 0x42ffc70461edd4f5L) },
	{ C64(0xc1a423bf1e1ed303L, 0xb11f0e130e01253fL, 0x2ef4dfe20001dd1bL, 0xde3211d3dfa0ffc0L) },
	{ C64(0xec3d0feff0772dbeL, 0xf23d6cee1e40cf0cL, 0xc00f0e131d0d011fL, 0x132500e3dc0deffdL) },
	{ C64(0xde52edc03f341dcfL, 0x4eef0e2db4f4ad0aL, 0xf6f05fcfdf0e2a01L, 0x54672011e601d2d0L) },
	{ C64(0x2100337111102e05L, 0xd240e4e0f43a5fe1L, 0x1749403ce31f26deL, 0x6ebdc39000c2313fL) },
	{ C64(0xfc5205013230fb5eL, 0x4130dfbcc60f2f30L, 0xe1133e1c6f5df31eL, 0x33cdd44ed21026f2L) },
	{ C64(0x61e3f53e21414224L, 0x201230e140f0f0beL, 0x1fba213315a3b041L, 0x3ff1326133d65c36L) },
	{ C64(0xa3f1e2ee5fd13df2L, 0x1223020f42ea2211L, 0xe1fe2142226c30b5L, 0x111214240f04231dL) },
	{ C64(0x6e02010ce51129c3L, 0x2a02f3e1e21f2f52L, 0xf4f133002030332eL, 0xb1221ff041411febL) },
	{ C64(0x4ffcee6cd701f1feL, 0x01d00fc6f10efe2aL, 0x00202d23334dffffL, 0x300f1eef1bdf0deeL) },
	{ C64(0xd1342ee05b01e232L, 0x322e03413c3045f2L, 0x40e2ec24dfc3ae21L, 0xfe1104453b00b137L) },
	{ C64(0x3d15e054f6112b0fL, 0xcefff01fb0db1030L, 0xd6fe6d3d221e232aL, 0x600fc111c1012020L) },
	{ C64(0x62110121c2df0012L, 0xc0de15f2b0b41c61L, 0xd32a12fd0e043d15L, 0x2d125194200404f2L) },
	{ C64(0xdf1bd3e60b25e2dfL, 0x04fa2c2faeefa23dL, 0x901e201cce3f2fe2L, 0x44d43f00e10052efL) },
	{ C64(0x12f47f1f1e031fbeL, 0xe701ee330d61ddb2L, 0x02ff20e01ff1f1e1L, 0x0b1ae1bf10f0f12cL) },
	{ C64(0xadef7604f0d01211L, 0xc4405b0e2d761f1dL, 0x10ec0cd2fbeecc3fL, 0x2b0542bf0ffe2f1aL) },
	{ C64(0x4131b930d330c4e0L, 0x3932224413ef3003L, 0x033d11d3c56011a2L, 0xf3cd51f42012b2feL) },
	{ C64(0xd1e2322340ef2f40L, 0x93ce21d03210ff32L, 0x0fd0eff103fe112fL, 0xfa75b11b3fef00f0L) },
	{ C64(0x3e1302021241e166L, 0xe10113fb13232313L, 0xb10ff7e9ddf6b22eL, 0x21dff20f1f41cde2L) },
	{ C64(0x0ebe3de2b30fce1fL, 0xd1fd0d01ff04c4f0L, 0x5c16e1cc03b00e2fL, 0xffedfedfe620fc4eL) },
	{ C64(0x1e2f00e121f1d20fL, 0x0eddd2ad2d1eb506L, 0xb02b1b40f2151f20L, 0x5adef03fda313fe0L) },
	{ C64(0x00053f090033ec12L, 0x06dd01305f41e0fdL, 0xf21dd0f1d1ffffc1L, 0x1ef9eef51feffff0L) },
	{ C64(0xcd4aff5e92efe101L, 0xed1d04e561f44f13L, 0x21f5e0101fa051e3L, 0x031111aeff4ff61cL) },
	{ C64(0x3c1ffee21d01d421L, 0x20026dfeef063f13L, 0x12030def2031ff4fL, 0x02e35141206af0a1L) },
	{ C64(0x47c0eade95ff1f09L, 0xef24f512ffde3ffdL, 0x24e203edfecf5042L, 0x3102d591f0e3b341L) },
	{ C64(0x1d3420fe430f0061L, 0x2a21e6edf2003504L, 0x13432af2ed2fdd02L, 0x190102053abcfff3L) },
};
static int backbone_model3_conv2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -132, -109, -86, -63, -40, -17, 6, 29, 52, 75, 98, 121, 144, 168 },
	{ -114, -98, -83, -67, -52, -36, -21, -5, 9, 25, 40, 56, 72, 87 },
	{ -114, -96, -78, -60, -42, -24, -6, 11, 29, 47, 65, 83, 101, 120 },
	{ -86, -70, -53, -36, -20, -3, 12, 29, 46, 62, 79, 95, 112, 129 },
	{ -141, -124, -106, -89, -72, -55, -38, -21, -3, 13, 30, 47, 64, 81 },
	{ -136, -114, -92, -69, -47, -25, -2, 19, 41, 63, 86, 108, 130, 153 },
	{ -145, -124, -102, -81, -60, -38, -17, 3, 25, 46, 68, 89, 110, 132 },
	{ -118, -96, -75, -53, -32, -10, 10, 32, 53, 75, 96, 118, 140, 161 },
	{ -123, -103, -84, -64, -45, -25, -6, 13, 32, 52, 71, 91, 110, 130 },
	{ -141, -118, -95, -72, -49, -26, -3, 18, 41, 64, 87, 110, 133, 156 },
	{ -134, -115, -96, -77, -58, -39, -19, 0, 18, 37, 56, 75, 94, 113 },
	{ -99, -84, -68, -52, -37, -21, -6, 9, 24, 40, 56, 71, 87, 102 },
	{ -69, -50, -31, -12, 6, 25, 44, 63, 82, 101, 120, 138, 157, 176 },
	{ -116, -99, -82, -65, -48, -31, -14, 2, 19, 36, 53, 70, 87, 104 },
	{ -127, -110, -94, -78, -61, -45, -28, -12, 4, 20, 37, 53, 70, 86 },
	{ -119, -100, -82, -63, -44, -26, -7, 11, 29, 48, 66, 85, 104, 122 },
	{ -122, -103, -85, -66, -47, -29, -10, 8, 26, 45, 64, 83, 101, 120 },
	{ -156, -136, -116, -96, -76, -56, -37, -17, 2, 22, 42, 62, 82, 102 },
	{ -114, -96, -79, -62, -45, -28, -10, 6, 23, 40, 58, 75, 92, 109 },
	{ -100, -82, -64, -45, -27, -9, 9, 27, 45, 63, 82, 100, 118, 136 },
	{ -192, -164, -136, -108, -80, -52, -24, 3, 31, 59, 87, 115, 143, 171 },
	{ -112, -92, -73, -53, -33, -14, 5, 25, 44, 64, 83, 103, 123, 142 },
	{ -120, -101, -82, -62, -43, -23, -4, 14, 34, 53, 73, 92, 112, 131 },
	{ -95, -76, -57, -37, -18, 0, 19, 38, 58, 77, 96, 115, 134, 153 },
	{ -165, -143, -120, -98, -76, -54, -32, -9, 12, 34, 56, 78, 101, 123 },
	{ -125, -102, -79, -57, -34, -11, 10, 33, 56, 78, 101, 123, 146, 169 },
	{ -100, -85, -70, -55, -40, -25, -10, 5, 20, 35, 50, 65, 80, 95 },
	{ -110, -92, -73, -55, -37, -19, 0, 17, 35, 54, 72, 90, 108, 127 },
	{ -142, -122, -103, -83, -63, -43, -23, -3, 16, 36, 56, 75, 95, 115 },
	{ -110, -94, -78, -62, -46, -30, -14, 1, 17, 33, 49, 65, 81, 97 },
	{ -108, -92, -76, -60, -43, -27, -11, 4, 20, 36, 52, 68, 84, 100 },
	{ -125, -105, -86, -66, -46, -26, -6, 13, 32, 52, 72, 92, 112, 131 },
	{ -97, -83, -69, -55, -41, -27, -13, 1, 15, 29, 43, 57, 71, 85 },
	{ -87, -66, -45, -24, -3, 17, 38, 59, 80, 101, 122, 142, 163, 184 },
	{ -126, -107, -87, -68, -49, -29, -10, 8, 28, 47, 67, 86, 105, 125 },
	{ -117, -101, -85, -68, -52, -36, -19, -3, 12, 29, 45, 62, 78, 94 },
	{ -101, -82, -64, -46, -27, -9, 8, 26, 45, 63, 81, 100, 118, 136 },
	{ -98, -81, -65, -48, -31, -15, 1, 18, 34, 51, 68, 84, 101, 118 },
	{ -144, -120, -97, -73, -50, -27, -3, 19, 43, 66, 89, 113, 136, 160 },
	{ -117, -101, -84, -67, -51, -34, -18, -1, 15, 31, 48, 64, 81, 98 },
	{ -148, -127, -106, -85, -63, -42, -21, 0, 20, 41, 63, 84, 105, 126 },
	{ -136, -115, -95, -74, -54, -34, -13, 6, 27, 47, 68, 88, 108, 129 },
	{ -106, -88, -70, -52, -33, -15, 2, 20, 38, 56, 74, 93, 111, 129 },
	{ -118, -97, -76, -55, -35, -14, 6, 26, 47, 68, 88, 109, 130, 151 },
	{ -92, -74, -55, -37, -18, 0, 18, 37, 55, 74, 92, 111, 129, 148 },
	{ -290, -252, -214, -175, -137, -99, -60, -22, 15, 53, 92, 130, 168, 207 },
	{ -116, -97, -79, -60, -42, -23, -5, 13, 31, 50, 68, 87, 105, 124 },
	{ -141, -123, -104, -86, -68, -49, -31, -12, 5, 24, 42, 61, 79, 98 },
	{ -103, -82, -62, -42, -22, -1, 18, 38, 58, 79, 99, 119, 139, 160 },
	{ -132, -111, -90, -69, -48, -27, -6, 14, 35, 56, 77, 98, 119, 140 },
	{ -105, -86, -68, -49, -30, -11, 6, 25, 44, 63, 81, 100, 119, 138 },
	{ -139, -120, -100, -80, -60, -41, -21, -1, 17, 37, 57, 77, 96, 116 },
	{ -110, -94, -77, -61, -44, -28, -11, 4, 21, 37, 53, 70, 86, 103 },
	{ -143, -122, -102, -81, -61, -40, -20, 0, 21, 41, 62, 82, 103, 123 },
	{ -104, -87, -70, -53, -36, -19, -2, 14, 32, 49, 66, 83, 100, 117 },
	{ -99, -83, -68, -52, -36, -20, -5, 10, 26, 42, 57, 73, 89, 104 },
	{ -102, -84, -65, -46, -27, -8, 10, 29, 47, 66, 85, 104, 123, 142 },
	{ -121, -104, -88, -71, -54, -37, -20, -3, 13, 30, 46, 63, 80, 97 },
	{ -137, -116, -96, -75, -55, -35, -14, 5, 26, 46, 66, 87, 107, 128 },
	{ -105, -91, -77, -63, -48, -34, -20, -6, 7, 22, 36, 50, 64, 78 },
	{ -118, -99, -81, -62, -44, -26, -7, 10, 29, 47, 66, 84, 102, 121 },
	{ -130, -110, -91, -71, -52, -32, -13, 6, 25, 44, 64, 83, 103, 122 },
	{ -115, -94, -74, -53, -33, -12, 7, 28, 48, 69, 89, 110, 131, 151 },
	{ -115, -96, -76, -57, -38, -19, 0, 19, 38, 57, 77, 96, 115, 135 },
};
static int_t<4,1> backbone_model3_conv2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0x9), C(0xd), C(0x1), C(0xd), C(0x2), C(0x1), C(0x1), C(0x1), C(0x0), },
	{ C(0x4), C(0x1), C(0xb), C(0x3), C(0x2), C(0xb), C(0x6), C(0x3), C(0xc), },
	{ C(0x0), C(0x9), C(0xf), C(0x1), C(0x7), C(0x2), C(0xf), C(0x4), C(0xf), },
	{ C(0x6), C(0x2), C(0xf), C(0x3), C(0xe), C(0xb), C(0xe), C(0xb), C(0xd), },
	{ C(0xd), C(0xd), C(0x0), C(0x6), C(0x4), C(0x6), C(0x1), C(0x1), C(0x1), },
	{ C(0x2), C(0x2), C(0x1), C(0x0), C(0x0), C(0x1), C(0x5), C(0x4), C(0x2), },
	{ C(0x0), C(0x0), C(0x5), C(0x1), C(0x5), C(0x5), C(0x0), C(0x4), C(0x1), },
	{ C(0x7), C(0x5), C(0x2), C(0x3), C(0x0), C(0x0), C(0x0), C(0xe), C(0xd), },
	{ C(0x5), C(0x4), C(0x1), C(0x0), C(0x6), C(0xe), C(0x0), C(0x0), C(0x1), },
	{ C(0x3), C(0x3), C(0x0), C(0x3), C(0x1), C(0x3), C(0x0), C(0x1), C(0x2), },
	{ C(0xf), C(0x6), C(0x4), C(0x9), C(0x4), C(0x3), C(0xa), C(0x0), C(0x3), },
	{ C(0xe), C(0x7), C(0x1), C(0x2), C(0x9), C(0xd), C(0xf), C(0xf), C(0x2), },
	{ C(0xe), C(0x3), C(0x6), C(0xc), C(0xd), C(0x0), C(0xa), C(0xb), C(0xd), },
	{ C(0xd), C(0x6), C(0x1), C(0x9), C(0x6), C(0x1), C(0xe), C(0xe), C(0xf), },
	{ C(0x2), C(0x7), C(0x3), C(0x2), C(0x4), C(0x2), C(0xf), C(0xd), C(0x0), },
	{ C(0x1), C(0xa), C(0x1), C(0x4), C(0xa), C(0x5), C(0xf), C(0x3), C(0x1), },
	{ C(0xf), C(0xf), C(0x2), C(0xd), C(0x0), C(0x4), C(0x0), C(0x3), C(0x7), },
	{ C(0xc), C(0x0), C(0x3), C(0xa), C(0x3), C(0x7), C(0xe), C(0xc), C(0x3), },
	{ C(0xa), C(0xb), C(0xe), C(0x3), C(0x5), C(0x0), C(0x3), C(0x5), C(0xf), },
	{ C(0xc), C(0xf), C(0x0), C(0xe), C(0xb), C(0x7), C(0xd), C(0xa), C(0x4), },
	{ C(0x2), C(0x7), C(0x3), C(0x0), C(0x2), C(0x3), C(0x0), C(0xf), C(0x0), },
	{ C(0x2), C(0x6), C(0xc), C(0x3), C(0x3), C(0x9), C(0xd), C(0x9), C(0xb), },
	{ C(0x0), C(0xf), C(0xf), C(0xd), C(0xf), C(0xe), C(0xd), C(0xe), C(0xc), },
	{ C(0xa), C(0xa), C(0x0), C(0xc), C(0x0), C(0x0), C(0xd), C(0xf), C(0xf), },
	{ C(0xd), C(0xd), C(0x1), C(0xe), C(0x7), C(0x3), C(0x0), C(0x7), C(0xe), },
	{ C(0xc), C(0xf), C(0x0), C(0xd), C(0x0), C(0xd), C(0xa), C(0xf), C(0xf), },
	{ C(0xd), C(0xe), C(0x0), C(0x4), C(0x7), C(0xd), C(0x2), C(0xf), C(0xe), },
	{ C(0xc), C(0xa), C(0x1), C(0x2), C(0xe), C(0xd), C(0x4), C(0xe), C(0xa), },
	{ C(0x6), C(0x6), C(0x1), C(0x2), C(0x5), C(0xe), C(0x0), C(0xb), C(0x0), },
	{ C(0x1), C(0x3), C(0x1), C(0x3), C(0x6), C(0x4), C(0xd), C(0x0), C(0xf), },
	{ C(0x6), C(0x5), C(0x2), C(0x3), C(0x2), C(0xd), C(0x3), C(0xf), C(0xd), },
	{ C(0x0), C(0x6), C(0x3), C(0x3), C(0xb), C(0x7), C(0x1), C(0xf), C(0x0), },
	{ C(0x2), C(0xc), C(0xf), C(0x5), C(0xc), C(0xd), C(0x5), C(0x3), C(0xa), },
	{ C(0xf), C(0xf), C(0xd), C(0xc), C(0xa), C(0xd), C(0xe), C(0xb), C(0xe), },
	{ C(0xc), C(0x6), C(0x4), C(0x1), C(0x4), C(0x0), C(0x3), C(0x3), C(0xf), },
	{ C(0xe), C(0x3), C(0x4), C(0xf), C(0x4), C(0x2), C(0x1), C(0x5), C(0xe), },
	{ C(0x4), C(0x9), C(0xa), C(0x3), C(0xa), C(0x2), C(0x3), C(0xf), C(0x1), },
	{ C(0x1), C(0xf), C(0xf), C(0x3), C(0xf), C(0x1), C(0x5), C(0x5), C(0x4), },
	{ C(0x3), C(0x5), C(0x4), C(0x0), C(0x2), C(0x3), C(0x1), C(0x0), C(0x3), },
	{ C(0x6), C(0xb), C(0xb), C(0x4), C(0xf), C(0xd), C(0x3), C(0xf), C(0xd), },
	{ C(0xf), C(0xf), C(0xe), C(0x7), C(0x6), C(0xc), C(0x1), C(0x1), C(0x0), },
	{ C(0x6), C(0x6), C(0x0), C(0x0), C(0xe), C(0x2), C(0xe), C(0x4), C(0x2), },
	{ C(0x9), C(0xb), C(0xe), C(0x4), C(0xd), C(0xe), C(0x2), C(0x6), C(0x2), },
	{ C(0x0), C(0x1), C(0x1), C(0x3), C(0x0), C(0x1), C(0x4), C(0x7), C(0x5), },
	{ C(0x0), C(0xe), C(0xd), C(0xe), C(0xd), C(0xe), C(0xc), C(0x0), C(0xd), },
	{ C(0x9), C(0xa), C(0xc), C(0x0), C(0x0), C(0x0), C(0x1), C(0x3), C(0x1), },
	{ C(0x5), C(0x3), C(0xd), C(0x3), C(0xe), C(0xa), C(0xb), C(0x9), C(0xe), },
	{ C(0x1), C(0x4), C(0x7), C(0xe), C(0x3), C(0x3), C(0xc), C(0xe), C(0xf), },
	{ C(0xf), C(0x0), C(0xf), C(0xd), C(0xe), C(0xe), C(0x1), C(0x9), C(0xd), },
	{ C(0xf), C(0xf), C(0x0), C(0xd), C(0xd), C(0xf), C(0x6), C(0x7), C(0x3), },
	{ C(0xe), C(0xb), C(0xd), C(0xb), C(0xe), C(0x0), C(0xd), C(0x1), C(0x2), },
	{ C(0x1), C(0xc), C(0x2), C(0x0), C(0x6), C(0x1), C(0x2), C(0x6), C(0xf), },
	{ C(0x2), C(0x9), C(0xc), C(0x1), C(0x4), C(0x6), C(0xf), C(0x0), C(0x4), },
	{ C(0x2), C(0x4), C(0x0), C(0x3), C(0x1), C(0x7), C(0x2), C(0xf), C(0x6), },
	{ C(0x6), C(0xa), C(0xe), C(0x4), C(0x9), C(0x0), C(0xf), C(0xe), C(0x0), },
	{ C(0x0), C(0xa), C(0x1), C(0x2), C(0x9), C(0x7), C(0x1), C(0x1), C(0x1), },
	{ C(0xd), C(0x1), C(0x5), C(0xb), C(0xc), C(0x1), C(0xe), C(0xc), C(0xb), },
	{ C(0x4), C(0x4), C(0x3), C(0x5), C(0x3), C(0x1), C(0xe), C(0xd), C(0xd), },
	{ C(0xd), C(0xf), C(0x0), C(0xd), C(0xc), C(0xe), C(0xd), C(0xd), C(0xe), },
	{ C(0x1), C(0xe), C(0xd), C(0x0), C(0x7), C(0x2), C(0x0), C(0x1), C(0xf), },
	{ C(0xb), C(0xe), C(0x5), C(0xf), C(0xe), C(0x2), C(0xd), C(0xa), C(0x0), },
	{ C(0xb), C(0x9), C(0xb), C(0x1), C(0x6), C(0xc), C(0x1), C(0x5), C(0x1), },
	{ C(0xc), C(0xf), C(0x1), C(0xc), C(0xa), C(0x4), C(0xe), C(0xa), C(0x4), },
	{ C(0xe), C(0x2), C(0xf), C(0xa), C(0x1), C(0x1), C(0x9), C(0xd), C(0xf), },
};
static int backbone_model3_conv2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 8, 15, 22, 30, 37, 45, 52 },
	{ 14, 27, 39, 51, 63, 75, 88 },
	{ 2, 13, 23, 34, 45, 55, 66 },
	{ 13, 25, 37, 48, 60, 72, 84 },
	{ 19, 30, 42, 53, 65, 76, 88 },
	{ 7, 21, 35, 48, 62, 76, 89 },
	{ 3, 17, 30, 44, 58, 71, 85 },
	{ 5, 19, 33, 48, 62, 76, 90 },
	{ 6, 17, 29, 40, 52, 64, 75 },
	{ 7, 17, 26, 35, 45, 54, 63 },
	{ 14, 26, 37, 49, 61, 73, 85 },
	{ 0, 10, 19, 29, 38, 48, 57 },
	{ 12, 23, 35, 47, 59, 71, 83 },
	{ 8, 22, 35, 49, 62, 76, 90 },
	{ 11, 25, 40, 54, 68, 82, 97 },
	{ 3, 14, 25, 36, 47, 58, 69 },
	{ 14, 24, 34, 44, 54, 64, 74 },
	{ 20, 31, 43, 54, 66, 77, 89 },
	{ 16, 27, 37, 48, 58, 68, 79 },
	{ 6, 18, 29, 41, 52, 64, 76 },
	{ 8, 17, 27, 36, 45, 54, 64 },
	{ 17, 31, 45, 60, 74, 88, 102 },
	{ 8, 18, 28, 39, 49, 59, 70 },
	{ 2, 18, 33, 49, 65, 80, 96 },
	{ 15, 24, 34, 43, 53, 62, 72 },
	{ 11, 22, 33, 43, 54, 65, 75 },
	{ 8, 19, 29, 40, 51, 62, 73 },
	{ 8, 22, 35, 49, 63, 77, 90 },
	{ 8, 21, 34, 48, 61, 74, 87 },
	{ 13, 27, 42, 56, 70, 84, 99 },
	{ 12, 27, 41, 55, 69, 84, 98 },
	{ 0, 10, 22, 33, 45, 57, 68 },
	{ 16, 30, 44, 57, 71, 84, 98 },
	{ 7, 23, 38, 54, 70, 85, 101 },
	{ -9, 6, 22, 38, 55, 71, 87 },
	{ 0, 12, 24, 37, 49, 62, 74 },
	{ 17, 30, 42, 55, 68, 80, 93 },
	{ 10, 24, 39, 54, 68, 83, 97 },
	{ 12, 27, 42, 57, 72, 87, 102 },
	{ 13, 25, 36, 47, 58, 70, 81 },
	{ 8, 17, 26, 35, 43, 52, 61 },
	{ 0, 11, 23, 34, 46, 58, 70 },
	{ 13, 24, 35, 47, 58, 69, 80 },
	{ 9, 22, 35, 48, 61, 73, 86 },
	{ 0, 15, 30, 44, 59, 74, 88 },
	{ -19, -12, -5, 1, 8, 15, 23 },
	{ 19, 32, 45, 58, 71, 84, 97 },
	{ 16, 26, 35, 45, 54, 64, 73 },
	{ 12, 23, 33, 43, 54, 64, 74 },
	{ 10, 18, 27, 35, 44, 52, 61 },
	{ 8, 20, 33, 46, 58, 71, 84 },
	{ 5, 18, 31, 43, 56, 69, 82 },
	{ 11, 23, 34, 46, 57, 69, 80 },
	{ 9, 21, 33, 45, 58, 70, 82 },
	{ 5, 19, 33, 46, 60, 74, 87 },
	{ -2, 11, 25, 40, 54, 68, 82 },
	{ 13, 24, 35, 47, 58, 69, 81 },
	{ 11, 22, 34, 45, 57, 68, 80 },
	{ 14, 27, 40, 52, 65, 78, 90 },
	{ -1, 8, 18, 27, 37, 47, 57 },
	{ 9, 22, 35, 48, 61, 74, 88 },
	{ 6, 17, 28, 39, 50, 61, 72 },
	{ 16, 32, 48, 64, 80, 96, 113 },
	{ 15, 26, 38, 49, 60, 71, 83 },
};
static int_t<4,64> backbone_model4_conv1_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x16220efdd201220cL, 0xee0df4260edd110eL, 0x0fe011ff0d5d3e2fL, 0x0dfff40220f1dffeL) },
	{ C64(0x03d30f0efd100113L, 0x033e35f24322c23dL, 0x0d244f016d140243L, 0x01f2e321f23ed00fL) },
	{ C64(0xc5eb0b1ceef0421fL, 0xe2b33ec1de2d9f7dL, 0x2d10d36d6ae3c0d4L, 0xdcccea333cbdf0a0L) },
	{ C64(0xda4d09f36c144c72L, 0xefe5e2001ac021deL, 0x33b3e2c7ed421d3eL, 0x2c4424dcf11fe5eeL) },
	{ C64(0x2cb3f11bf0f102dfL, 0x2501f0f104e1f220L, 0xddd0ef3022041f04L, 0x0c0f0cdd0eeef013L) },
	{ C64(0x310ef40202d2b520L, 0x131d22e903130fb3L, 0xd2a3e30cf000b204L, 0xd530a21a646413fdL) },
	{ C64(0x001213640ec0e3e1L, 0x21d0af4d6211cd30L, 0xa3e221fb30f3e001L, 0x0cf0dd3f2d100e92L) },
	{ C64(0x3f11240f232f0102L, 0xf200fff123c21121L, 0xf0ff211121011e01L, 0x1e1213ffc2bd3201L) },
	{ C64(0x0ed606ee40eee0c0L, 0x12000c5d25c52000L, 0xffdf2c5c36de2de0L, 0xfb3bf112f24d1d0dL) },
	{ C64(0xff2f4ded502305ceL, 0xe10ff3131fb301edL, 0x20b0e2f3206badfeL, 0x33153dbf0edf12fcL) },
	{ C64(0xed6b2d204e232ee0L, 0x3e65fd22eb0dfc20L, 0x3f2ed1263ef0f0dfL, 0x3d323b52f4e3f2f0L) },
	{ C64(0xd45610fe00ff250fL, 0xdcf25f0035f4eed0L, 0xcefbf1a302ec4ab2L, 0xfe01fff15c5af1d3L) },
	{ C64(0x31b20def21111310L, 0x142e5f2ff2f0e642L, 0x0112df21d1f00253L, 0x020cf1bf0fb43154L) },
	{ C64(0xf3ecf030fffd049dL, 0x1252eae40ffb21e3L, 0x544cbdae01bee0e2L, 0x021f2e130a035b4eL) },
	{ C64(0x3f31c650be02a11fL, 0x0261b5ddfff30ed0L, 0xfe2442fb2112e32fL, 0xb3f4b233f64122efL) },
	{ C64(0xef310c2f01e0fd43L, 0x012b22df3e73ddb0L, 0x00516fd01ed0e102L, 0x00f2f16ec61de211L) },
	{ C64(0x0b21f00f01ee4c1fL, 0xef33f100bbe122ceL, 0x1503fce1d2e0ede0L, 0x0e1eef15a0011ffdL) },
	{ C64(0x10c205a9103ee0e1L, 0x30e32f01f1bef019L, 0x2ecdfd3d000eff2fL, 0x2d0f0c353e2ebf53L) },
	{ C64(0x02d1e12f02df1700L, 0xe0f42fbf0e1224ffL, 0x0f11a0f0411500dfL, 0x1f0002a11c200001L) },
	{ C64(0xecf0f0e00fef0fefL, 0xff20ffef00d01c0fL, 0x00fe00fff4e0efffL, 0xff000f20ef51f0ffL) },
	{ C64(0x11e2d3eff000e305L, 0xa4d041f12d0103a9L, 0x0e12014ef012ff34L, 0x1c2fef21121b01cfL) },
	{ C64(0xee161eef0f03f703L, 0x110e014253135600L, 0x23f06106f33f600dL, 0xebf61fc11fff1f30L) },
	{ C64(0xf11e02011b6eb51cL, 0xeac0ed1033ec0eefL, 0x02ff301f0ced1fecL, 0xf4e600ed12c12ffcL) },
	{ C64(0xf204f141e9ebe31fL, 0x13113dcc235ef262L, 0x004f1f1befb3d333L, 0xc1cdf0032d302a13L) },
	{ C64(0x5219e133212030feL, 0xc20611fffc2ceed2L, 0x1ed5913e2f01f0c2L, 0xf0f1111121fef053L) },
	{ C64(0xde12fe420f010d3eL, 0xe12003210b1ff13aL, 0x39ed105e3fff3322L, 0xfa00fd162f460120L) },
	{ C64(0x014605e0f010fb04L, 0x2f0e12213001fe1fL, 0x1f2b704fbd2a110eL, 0xff01f110f3ffcf02L) },
	{ C64(0x41d303f201d10af6L, 0x421fd050e3d3e02fL, 0xdd0e5f1012ff0035L, 0x0b1c012c22101f23L) },
	{ C64(0x22fc2f2c0ff10f0eL, 0x16ebbde1e62e01ecL, 0x214f00206f25d0f2L, 0x1df42e0e3f21612cL) },
	{ C64(0xf2c202a10f3e02e1L, 0x1ebf0e0134cf2061L, 0x150deff2a0d034e4L, 0xe4e0101ff02f3ef1L) },
	{ C64(0xb24fe00c000b3d1eL, 0x4ffe50a31321ff12L, 0xe23fdf0f4112e21dL, 0x22fe00f2cf12cf12L) },
	{ C64(0x0522fdff022d02ecL, 0xe2ef403066d04401L, 0xdeae4ff1ef1e0af5L, 0x1dfef7ee02ec2f30L) },
	{ C64(0x4e00f5061f0f1fe6L, 0xafd40f400eb001b0L, 0xe2bf2cd0aef223e1L, 0x10f001e420cebdb0L) },
	{ C64(0x5f2f130212ef0ec0L, 0x5d0ebd32071f3d45L, 0xf36e10cf2f0f12f2L, 0x152027dfcfb32f0dL) },
	{ C64(0x31020cb90d203e23L, 0x4bd0f203122ed26aL, 0xe1e20ff21c0e0023L, 0x02dfe000fffca1ffL) },
	{ C64(0x521df223fed00004L, 0xf05ddf345dcf1d35L, 0x21e0e20d2ffd0012L, 0xf1240df13ad55fdfL) },
	{ C64(0xde1de0ee02ff31ecL, 0xe61320f0f2b057d1L, 0x33f1ce10ee0ee2e5L, 0xfd0f02020fe140deL) },
	{ C64(0x231e00fffe23c10fL, 0xc00de1df1e3f03ddL, 0x3def023fdb1d01ffL, 0x01050e115e2f2fdfL) },
	{ C64(0xaff22f02003ffe0fL, 0xd4212252722e11a3L, 0x2a14010f0eb12fb0L, 0x0010f2e31d20c0feL) },
	{ C64(0xf0e2ecee12b1f636L, 0x4301231f0ba5063cL, 0xf5f4a1e30e365062L, 0x0e2ef1f0f1bfd2d4L) },
	{ C64(0x3eee14fa0fcfff10L, 0xf3d22f1bdf1de5e9L, 0x31ef0f5d00d30d3fL, 0xde01f33e142fd151L) },
	{ C64(0x24e50cfc1f0014f1L, 0x332bd1feed313f4fL, 0x0000cf1d340fe111L, 0x0efd1fefe0623fe2L) },
	{ C64(0x0d7f0d40e211f6eeL, 0x1f26c0defbdfeef0L, 0xfd0211c150de0fe2L, 0xf3f20e7205ecd033L) },
	{ C64(0x14fa0e31011e00f1L, 0xe42ffffeb3fd02edL, 0x2402a0f04ae2cc43L, 0x03ea2ff25e01f15eL) },
	{ C64(0x0f21fe4de130f3ddL, 0x133feee0a10fe521L, 0xb0212fb132151121L, 0xfa1f0e24b1ce2121L) },
	{ C64(0xfe1510fae20e061fL, 0x06d26030f23036fbL, 0xe5e110e2e2300e5fL, 0x0eeef0cffeae0161L) },
	{ C64(0xd004001d20e0e210L, 0x1f4002ffea021f3fL, 0x30f4203051101e1cL, 0x0f00f301c120dff0L) },
	{ C64(0xe30ff204132010f3L, 0x5231214131d01161L, 0x2faa0ffffe0de13fL, 0xf0010cf16dd70f35L) },
	{ C64(0xeffde41422fef2ffL, 0xaee43152102f44dbL, 0xff10ce0cd23f2e39L, 0x011e014431e3114eL) },
	{ C64(0x25fdf3c12020fc03L, 0x2ffa2ff0be201a33L, 0xf42ee0fddf3fb604L, 0x223c0e3d1d43feffL) },
	{ C64(0x2f11f42eef1ee50fL, 0x4114b2f10e020033L, 0x0f10d31f3f1233edL, 0x1f233f11d2302092L) },
	{ C64(0x613cf211e1012dfaL, 0xf3c1befef14de200L, 0xce0ef00c0e300ff0L, 0x1d021dfd3eec3041L) },
	{ C64(0x0def06edff101512L, 0x172363dd35b32fcbL, 0xe3e510ffe62602e3L, 0x1ce00362d36ae1deL) },
	{ C64(0x121112a01fcfececL, 0x3fffeaf2e3fa2d22L, 0x300a001ee0ac3001L, 0xed1e1fc1ea311edfL) },
	{ C64(0xe0122b5f23b1f61bL, 0xe62ed1ef0dd462eeL, 0x0663c0a43f421603L, 0x12022fb2fe476002L) },
	{ C64(0x7000130101c20306L, 0xf211aee1fe5101dbL, 0x1c20d0cf210111f5L, 0x000100302f5e50edL) },
	{ C64(0x2c2f03e310f33f24L, 0x3fc32021e0df0375L, 0xd2a1e0af05f00cffL, 0x0221f0e1efece10dL) },
	{ C64(0x0d2f3b1212363d1eL, 0xee9fb413ed413ddfL, 0xf24eb106015032d0L, 0x6e4f4c0fdd61e3f1L) },
	{ C64(0xe1e609b3e0ad6b10L, 0xfba2cb112a0f2f60L, 0x1f2b204ce6ddffefL, 0x1efc0cf32c2ff1f2L) },
	{ C64(0xea1d201ff1411d03L, 0x2105414fff0f0dcfL, 0x10e3fe11e0d0efc6L, 0x01f2fa5302d1e00dL) },
	{ C64(0xe12011e012d20eecL, 0xdf3d0e01dec3ed11L, 0x222103cf2f2cafeeL, 0x6161f200cfc0440dL) },
	{ C64(0xbcfbeee100cfe11aL, 0xcee501efe3cc003fL, 0x11af200fe3dc1eecL, 0x30f00ff2c220101dL) },
	{ C64(0x12101ec0d621d3feL, 0xc24ee140001132c2L, 0xdf2e001c1d0feef6L, 0xfe11f0f2330051efL) },
	{ C64(0xc1f12eabe03e16d1L, 0x41e35ef2fafb0136L, 0x01c22e0d9001053fL, 0xe0a2fb55fe206a11L) },
};
static int backbone_model4_conv1_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -130, -109, -89, -68, -47, -27, -6, 14, 35, 55, 76, 97, 117, 138 },
	{ -140, -114, -88, -62, -36, -10, 15, 41, 67, 93, 119, 145, 171, 197 },
	{ -258, -225, -192, -160, -127, -94, -62, -29, 3, 35, 68, 101, 133, 166 },
	{ -164, -136, -109, -82, -55, -27, 0, 26, 54, 81, 108, 136, 163, 190 },
	{ -144, -124, -103, -83, -62, -42, -21, -1, 19, 39, 60, 80, 101, 121 },
	{ -207, -176, -144, -113, -82, -50, -19, 12, 43, 75, 106, 138, 169, 201 },
	{ -172, -149, -125, -102, -79, -56, -32, -9, 13, 36, 59, 83, 106, 129 },
	{ -103, -84, -65, -46, -27, -9, 9, 28, 47, 66, 85, 103, 122, 141 },
	{ -147, -122, -98, -74, -50, -25, -1, 22, 47, 71, 95, 120, 144, 168 },
	{ -163, -135, -107, -79, -51, -23, 4, 32, 60, 87, 115, 143, 171, 199 },
	{ -135, -109, -84, -58, -33, -7, 17, 43, 68, 94, 119, 144, 170, 195 },
	{ -177, -150, -122, -95, -67, -40, -13, 14, 41, 69, 96, 123, 151, 178 },
	{ -156, -129, -103, -76, -49, -23, 3, 30, 56, 83, 109, 136, 163, 189 },
	{ -190, -162, -134, -106, -79, -51, -23, 4, 32, 60, 87, 115, 143, 171 },
	{ -184, -156, -127, -99, -71, -42, -14, 13, 42, 70, 98, 127, 155, 183 },
	{ -131, -111, -91, -72, -52, -33, -13, 6, 25, 45, 64, 84, 103, 123 },
	{ -154, -132, -110, -88, -66, -44, -21, 0, 22, 44, 66, 88, 110, 133 },
	{ -140, -119, -99, -79, -59, -39, -18, 1, 21, 41, 62, 82, 102, 122 },
	{ -108, -90, -73, -55, -37, -19, -1, 16, 34, 52, 70, 87, 105, 123 },
	{ -150, -130, -110, -90, -70, -50, -30, -10, 9, 29, 49, 69, 89, 109 },
	{ -124, -105, -87, -68, -50, -31, -13, 5, 23, 42, 60, 79, 97, 116 },
	{ -129, -102, -75, -48, -21, 5, 32, 59, 87, 114, 141, 168, 195, 222 },
	{ -134, -116, -98, -80, -61, -43, -25, -7, 10, 29, 47, 65, 83, 102 },
	{ -230, -199, -167, -136, -105, -73, -42, -10, 20, 52, 83, 114, 146, 177 },
	{ -125, -105, -86, -66, -46, -27, -7, 11, 31, 51, 70, 90, 110, 129 },
	{ -114, -95, -76, -56, -37, -18, 1, 20, 39, 59, 78, 97, 116, 136 },
	{ -124, -105, -85, -66, -47, -27, -8, 10, 30, 49, 68, 88, 107, 126 },
	{ -117, -97, -77, -58, -38, -18, 0, 20, 40, 60, 79, 99, 119, 138 },
	{ -142, -120, -98, -76, -54, -32, -10, 10, 32, 54, 76, 98, 120, 142 },
	{ -181, -158, -134, -110, -86, -62, -38, -14, 9, 32, 56, 80, 104, 128 },
	{ -133, -115, -96, -78, -60, -42, -24, -6, 11, 29, 47, 65, 84, 102 },
	{ -120, -99, -78, -57, -36, -16, 4, 25, 46, 67, 87, 108, 129, 150 },
	{ -141, -121, -101, -81, -61, -41, -21, -1, 18, 38, 57, 77, 97, 117 },
	{ -122, -102, -81, -61, -41, -21, -1, 18, 38, 58, 78, 99, 119, 139 },
	{ -134, -117, -99, -82, -64, -47, -29, -12, 5, 22, 40, 57, 75, 92 },
	{ -137, -116, -95, -74, -53, -32, -11, 9, 30, 51, 72, 93, 114, 135 },
	{ -106, -88, -71, -54, -36, -19, -1, 15, 32, 50, 67, 85, 102, 120 },
	{ -125, -107, -89, -71, -53, -35, -17, 0, 18, 36, 54, 72, 89, 107 },
	{ -108, -89, -70, -51, -31, -12, 6, 25, 44, 63, 82, 101, 120, 139 },
	{ -135, -112, -89, -67, -44, -21, 1, 24, 46, 69, 92, 115, 138, 160 },
	{ -131, -112, -92, -72, -53, -33, -13, 6, 25, 45, 65, 84, 104, 124 },
	{ -142, -119, -97, -74, -51, -28, -5, 16, 39, 62, 85, 108, 131, 153 },
	{ -120, -100, -81, -62, -43, -24, -5, 13, 32, 52, 71, 90, 109, 128 },
	{ -161, -137, -112, -88, -64, -39, -15, 8, 33, 57, 81, 106, 130, 154 },
	{ -135, -115, -95, -75, -55, -34, -14, 5, 25, 45, 65, 86, 106, 126 },
	{ -133, -110, -87, -64, -41, -18, 4, 27, 50, 72, 95, 118, 141, 164 },
	{ -112, -92, -72, -53, -33, -13, 6, 26, 46, 66, 85, 105, 125, 145 },
	{ -114, -93, -72, -52, -31, -11, 9, 30, 50, 71, 91, 112, 133, 153 },
	{ -96, -78, -60, -42, -25, -7, 10, 28, 46, 64, 81, 99, 117, 135 },
	{ -158, -138, -119, -100, -80, -61, -41, -22, -2, 16, 36, 55, 74, 94 },
	{ -105, -86, -67, -48, -29, -10, 8, 27, 46, 65, 84, 103, 122, 141 },
	{ -141, -122, -102, -83, -63, -44, -24, -5, 14, 33, 53, 72, 92, 111 },
	{ -141, -117, -94, -70, -46, -22, 1, 25, 49, 73, 97, 121, 144, 168 },
	{ -195, -169, -142, -116, -89, -62, -36, -9, 16, 43, 69, 96, 122, 149 },
	{ -154, -125, -96, -68, -39, -10, 18, 47, 76, 104, 133, 162, 191, 220 },
	{ -109, -90, -71, -52, -34, -15, 3, 22, 40, 59, 78, 97, 116, 134 },
	{ -113, -95, -77, -59, -41, -23, -5, 12, 30, 48, 65, 83, 101, 119 },
	{ -189, -157, -126, -95, -63, -32, -1, 30, 61, 92, 124, 155, 187, 218 },
	{ -220, -190, -159, -129, -98, -68, -37, -7, 22, 53, 83, 114, 144, 175 },
	{ -120, -102, -83, -64, -45, -27, -8, 10, 28, 47, 66, 85, 103, 122 },
	{ -139, -118, -96, -75, -53, -32, -10, 10, 32, 54, 75, 97, 118, 140 },
	{ -149, -128, -107, -86, -65, -45, -24, -3, 17, 37, 58, 79, 100, 121 },
	{ -105, -86, -67, -48, -30, -11, 7, 25, 44, 63, 82, 100, 119, 138 },
	{ -144, -123, -103, -83, -62, -42, -22, -1, 18, 38, 59, 79, 99, 120 },
};
static int_t<4,1> backbone_model4_conv1_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0x1), C(0x2), C(0xd), C(0x2), C(0x7), C(0xd), C(0x2), C(0x2), C(0xe), },
	{ C(0xc), C(0xa), C(0xd), C(0xc), C(0xc), C(0x5), C(0x4), C(0x5), C(0x3), },
	{ C(0x1), C(0x1), C(0x1), C(0x3), C(0x1), C(0x1), C(0x4), C(0x2), C(0x2), },
	{ C(0x2), C(0x2), C(0x3), C(0x7), C(0xf), C(0x1), C(0x1), C(0x1), C(0x2), },
	{ C(0xf), C(0x4), C(0x3), C(0x0), C(0x5), C(0x2), C(0xe), C(0xe), C(0xf), },
	{ C(0x4), C(0x3), C(0x3), C(0xb), C(0xb), C(0xc), C(0xb), C(0xc), C(0xc), },
	{ C(0xf), C(0xf), C(0xd), C(0x0), C(0xc), C(0x9), C(0x3), C(0x4), C(0xf), },
	{ C(0x1), C(0x0), C(0x3), C(0xc), C(0xe), C(0xf), C(0xd), C(0xe), C(0xf), },
	{ C(0xf), C(0x2), C(0x0), C(0x2), C(0x3), C(0x1), C(0x2), C(0x4), C(0x2), },
	{ C(0xf), C(0xe), C(0x2), C(0xc), C(0x7), C(0x2), C(0x0), C(0x0), C(0x2), },
	{ C(0x2), C(0x5), C(0x5), C(0xf), C(0x7), C(0xf), C(0xf), C(0xf), C(0xe), },
	{ C(0xc), C(0xa), C(0x3), C(0xe), C(0xb), C(0x2), C(0xf), C(0xe), C(0x0), },
	{ C(0x4), C(0x0), C(0xc), C(0x4), C(0x6), C(0xd), C(0x0), C(0x2), C(0xa), },
	{ C(0xd), C(0xe), C(0xe), C(0xb), C(0xd), C(0x0), C(0x0), C(0x0), C(0xe), },
	{ C(0xe), C(0xf), C(0xe), C(0xd), C(0xf), C(0xe), C(0xe), C(0xe), C(0xe), },
	{ C(0x7), C(0x6), C(0xd), C(0x4), C(0xc), C(0x0), C(0xf), C(0xe), C(0x1), },
	{ C(0x9), C(0xa), C(0x3), C(0xc), C(0x1), C(0x5), C(0xf), C(0x2), C(0x5), },
	{ C(0xe), C(0xf), C(0xe), C(0x0), C(0xb), C(0x9), C(0x0), C(0x2), C(0xd), },
	{ C(0x6), C(0x0), C(0x9), C(0x6), C(0x0), C(0xa), C(0xf), C(0xf), C(0x1), },
	{ C(0x3), C(0x3), C(0x4), C(0xe), C(0x2), C(0x2), C(0xc), C(0xf), C(0x1), },
	{ C(0x2), C(0xd), C(0xa), C(0x0), C(0xc), C(0xd), C(0x1), C(0x3), C(0x5), },
	{ C(0xd), C(0x4), C(0x7), C(0xa), C(0x1), C(0x2), C(0xf), C(0x6), C(0x3), },
	{ C(0xc), C(0xf), C(0xe), C(0xf), C(0xa), C(0x4), C(0x6), C(0x6), C(0x6), },
	{ C(0xf), C(0x2), C(0xd), C(0xb), C(0x9), C(0x4), C(0xf), C(0x1), C(0xf), },
	{ C(0xa), C(0x2), C(0x5), C(0xc), C(0x1), C(0x1), C(0xa), C(0x1), C(0x4), },
	{ C(0xd), C(0x9), C(0xc), C(0x0), C(0xf), C(0x2), C(0xf), C(0xf), C(0x1), },
	{ C(0xe), C(0x9), C(0xd), C(0x3), C(0x1), C(0xf), C(0x5), C(0x5), C(0xd), },
	{ C(0x5), C(0x7), C(0x3), C(0xc), C(0x1), C(0x1), C(0xb), C(0xd), C(0xd), },
	{ C(0xf), C(0x6), C(0x6), C(0xe), C(0x1), C(0x4), C(0xe), C(0xd), C(0x3), },
	{ C(0x0), C(0xe), C(0x9), C(0x1), C(0x1), C(0xb), C(0x0), C(0x1), C(0x2), },
	{ C(0x1), C(0x0), C(0x1), C(0xf), C(0x6), C(0xe), C(0xd), C(0x9), C(0x0), },
	{ C(0x2), C(0xf), C(0xb), C(0x2), C(0xc), C(0xb), C(0x4), C(0xc), C(0xd), },
	{ C(0x5), C(0xb), C(0xd), C(0x6), C(0x1), C(0x9), C(0x5), C(0x6), C(0xf), },
	{ C(0xd), C(0xe), C(0x0), C(0x0), C(0x5), C(0x4), C(0x3), C(0x6), C(0x1), },
	{ C(0xb), C(0xb), C(0xc), C(0xf), C(0x5), C(0xe), C(0x3), C(0x2), C(0xf), },
	{ C(0x1), C(0x6), C(0x6), C(0x0), C(0x0), C(0x2), C(0xf), C(0x0), C(0x1), },
	{ C(0x0), C(0xc), C(0x2), C(0xb), C(0x0), C(0x4), C(0x0), C(0x3), C(0x7), },
	{ C(0x5), C(0x3), C(0x3), C(0x1), C(0x1), C(0xf), C(0xc), C(0xf), C(0xc), },
	{ C(0x5), C(0x2), C(0xf), C(0x4), C(0xd), C(0xd), C(0x0), C(0xc), C(0xd), },
	{ C(0x3), C(0x0), C(0x1), C(0x4), C(0x3), C(0xf), C(0xe), C(0x6), C(0x3), },
	{ C(0xc), C(0x2), C(0x4), C(0xa), C(0xa), C(0x3), C(0xf), C(0x0), C(0x0), },
	{ C(0x0), C(0xe), C(0x0), C(0x2), C(0x2), C(0x1), C(0x0), C(0x7), C(0x1), },
	{ C(0x6), C(0x6), C(0x3), C(0x3), C(0x0), C(0xc), C(0xd), C(0xb), C(0xe), },
	{ C(0x5), C(0x1), C(0x0), C(0x2), C(0x3), C(0x0), C(0xf), C(0x3), C(0x3), },
	{ C(0x4), C(0x3), C(0x2), C(0x0), C(0x1), C(0xc), C(0xe), C(0xc), C(0xa), },
	{ C(0xb), C(0xb), C(0x0), C(0xf), C(0xb), C(0x3), C(0xd), C(0xd), C(0x4), },
	{ C(0xc), C(0xc), C(0xc), C(0x1), C(0xe), C(0xe), C(0x2), C(0x3), C(0x1), },
	{ C(0xe), C(0xe), C(0xc), C(0xe), C(0xd), C(0xc), C(0x3), C(0x7), C(0x6), },
	{ C(0xe), C(0x4), C(0x3), C(0xa), C(0x1), C(0x2), C(0xa), C(0xd), C(0x0), },
	{ C(0xb), C(0x9), C(0xf), C(0x9), C(0x6), C(0x4), C(0xa), C(0x2), C(0x3), },
	{ C(0xf), C(0xf), C(0x1), C(0xf), C(0xb), C(0x0), C(0xc), C(0xa), C(0x3), },
	{ C(0xd), C(0xe), C(0x1), C(0xa), C(0x1), C(0x2), C(0x5), C(0x6), C(0xf), },
	{ C(0x4), C(0x2), C(0x4), C(0x1), C(0x1), C(0x2), C(0x3), C(0x2), C(0x1), },
	{ C(0x3), C(0x3), C(0x2), C(0xf), C(0x9), C(0x3), C(0xf), C(0x9), C(0x1), },
	{ C(0xe), C(0xf), C(0x0), C(0xe), C(0xf), C(0xe), C(0xe), C(0xe), C(0xc), },
	{ C(0xe), C(0x0), C(0xd), C(0x0), C(0xf), C(0xf), C(0xe), C(0x5), C(0x7), },
	{ C(0xf), C(0x3), C(0x3), C(0xb), C(0xb), C(0x4), C(0xd), C(0xe), C(0x6), },
	{ C(0x0), C(0x6), C(0x2), C(0x2), C(0xd), C(0x5), C(0x2), C(0x2), C(0x1), },
	{ C(0x2), C(0x1), C(0x2), C(0x3), C(0x2), C(0x2), C(0x2), C(0x3), C(0x2), },
	{ C(0x5), C(0x1), C(0xc), C(0x0), C(0x5), C(0xb), C(0x3), C(0xf), C(0x9), },
	{ C(0x1), C(0x0), C(0xf), C(0x0), C(0x7), C(0x0), C(0xf), C(0x0), C(0x1), },
	{ C(0x6), C(0xa), C(0xe), C(0x7), C(0xc), C(0x9), C(0x3), C(0x3), C(0x2), },
	{ C(0x1), C(0xe), C(0x0), C(0xb), C(0x2), C(0xe), C(0x2), C(0x7), C(0x0), },
	{ C(0xb), C(0x6), C(0xa), C(0x0), C(0x2), C(0xd), C(0xe), C(0xb), C(0xe), },
};
static int backbone_model4_conv1_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 6, 16, 27, 38, 48, 59, 70 },
	{ 5, 16, 27, 38, 49, 60, 71 },
	{ 2, 13, 23, 33, 44, 54, 64 },
	{ 5, 15, 24, 34, 43, 53, 63 },
	{ -2, 7, 17, 28, 38, 48, 58 },
	{ 12, 25, 38, 52, 65, 78, 91 },
	{ 6, 17, 28, 39, 50, 61, 72 },
	{ 0, 8, 17, 25, 34, 43, 51 },
	{ 4, 15, 26, 37, 48, 59, 69 },
	{ 3, 10, 18, 25, 32, 39, 46 },
	{ 4, 18, 31, 44, 58, 71, 85 },
	{ 7, 19, 31, 43, 54, 66, 78 },
	{ 8, 18, 28, 38, 49, 59, 69 },
	{ 12, 23, 33, 43, 54, 64, 74 },
	{ 5, 17, 30, 42, 54, 66, 78 },
	{ 9, 20, 32, 43, 55, 67, 78 },
	{ 0, 13, 26, 39, 51, 64, 77 },
	{ 18, 31, 44, 57, 70, 83, 97 },
	{ 4, 15, 26, 37, 48, 59, 70 },
	{ 2, 11, 21, 30, 40, 49, 59 },
	{ 10, 21, 32, 43, 54, 65, 76 },
	{ 2, 17, 32, 47, 62, 77, 92 },
	{ 8, 22, 35, 49, 62, 76, 89 },
	{ 6, 13, 21, 28, 35, 43, 50 },
	{ 11, 22, 34, 45, 57, 69, 80 },
	{ 5, 17, 29, 41, 54, 66, 78 },
	{ -1, 11, 24, 36, 49, 62, 75 },
	{ 1, 15, 29, 43, 57, 72, 86 },
	{ 6, 21, 35, 49, 63, 77, 91 },
	{ -4, 3, 11, 20, 28, 36, 45 },
	{ 2, 12, 23, 33, 43, 54, 64 },
	{ 1, 17, 33, 48, 64, 80, 96 },
	{ 9, 23, 37, 52, 66, 80, 94 },
	{ 14, 27, 40, 54, 67, 80, 93 },
	{ 8, 20, 32, 43, 55, 67, 78 },
	{ 11, 22, 33, 43, 54, 65, 76 },
	{ 3, 16, 29, 41, 54, 67, 79 },
	{ 5, 15, 24, 34, 43, 53, 62 },
	{ 8, 18, 27, 36, 45, 55, 64 },
	{ 3, 14, 25, 36, 47, 58, 69 },
	{ 8, 21, 35, 49, 63, 76, 90 },
	{ -3, 9, 21, 33, 46, 58, 71 },
	{ 10, 22, 35, 48, 61, 73, 86 },
	{ 3, 16, 28, 40, 52, 65, 77 },
	{ 5, 15, 26, 36, 47, 57, 68 },
	{ 8, 23, 37, 51, 66, 80, 94 },
	{ 0, 11, 22, 34, 45, 56, 68 },
	{ 7, 21, 34, 47, 60, 73, 86 },
	{ 7, 20, 32, 45, 58, 70, 83 },
	{ 0, 14, 29, 44, 59, 74, 89 },
	{ 3, 14, 25, 36, 47, 58, 69 },
	{ 6, 18, 29, 41, 53, 65, 77 },
	{ 12, 24, 36, 49, 61, 73, 85 },
	{ 10, 18, 26, 35, 43, 51, 59 },
	{ 3, 13, 23, 33, 44, 54, 64 },
	{ 2, 12, 21, 31, 40, 50, 59 },
	{ 3, 14, 24, 35, 46, 57, 67 },
	{ 8, 17, 26, 36, 45, 54, 63 },
	{ -1, 14, 30, 46, 62, 78, 93 },
	{ 8, 19, 31, 42, 54, 65, 76 },
	{ 3, 10, 17, 23, 30, 37, 44 },
	{ 4, 17, 30, 43, 56, 69, 82 },
	{ 5, 14, 23, 32, 41, 50, 59 },
	{ 9, 21, 32, 43, 54, 65, 76 },
};
static int_t<4,64> backbone_model4_conv2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xf11d401943c4fd3fL, 0xf0402e03bd1c2222L, 0x3105f5241260f2e0L, 0xaed20f241e41deffL) },
	{ C64(0x65b1f10fb1efee00L, 0xf022ef51ee05271aL, 0xe00ae0f3e1ee0060L, 0x0fc2100edef0f11fL) },
	{ C64(0xf2ef3f0f61cf3e15L, 0xd2d14e0d3321ee2dL, 0xd1fcf010e2ede2b0L, 0xd2023c2df1e12f50L) },
	{ C64(0x11005a31df7b0fdfL, 0x00d006001c3bfeadL, 0xd11d0fd22100f6fdL, 0x0d4ff6de1dea2e6fL) },
	{ C64(0xfc62fbb0fc01db2eL, 0x0fd1ac90923e7cefL, 0xfd11521fe4f0efb1L, 0xeceeff4da00eec0dL) },
	{ C64(0x20fe0d4fef41e1f0L, 0xf114041dea3ef0ecL, 0xae2e2aabf24d301eL, 0x1110402e1ff6f324L) },
	{ C64(0xf03fdedfe2cb1724L, 0x5ee74fdfcc0fd1e2L, 0xff6235f3f4cddeafL, 0xe2d4f00e06e1dc0eL) },
	{ C64(0x520f111b3421411fL, 0xa021effd1def23dfL, 0x2121f10e10fe02c5L, 0xe1320ff11be24e3eL) },
	{ C64(0x34e03f4f0b1ef1c2L, 0x0d2f1e1fbdd21461L, 0xa22f0e292e36fe4cL, 0xf2fc142c076a2eefL) },
	{ C64(0x2d1feed166f00f7cL, 0x0fe0efbd03d10034L, 0x520de6f30fd1e2d0L, 0xdd00c1ffde011f0eL) },
	{ C64(0xf221fcbe403020d1L, 0x0c3023e0ec01d05fL, 0xdf0f2dfafdb0d7fdL, 0xdbdb26c0e5fcf1fdL) },
	{ C64(0x41e0553d24e11402L, 0x11e0f030edb2dd2fL, 0xbeebe2002f111c5aL, 0xe50dcd01d0e30023L) },
	{ C64(0x2ede432214f6bf1eL, 0x22e415fad020231fL, 0x5ce333feec1ef411L, 0xa1edaff30943e53cL) },
	{ C64(0xd1f0f47ff6a4d4d1L, 0xf0530310ed43ed0dL, 0x53d340f02c7322d0L, 0xb4e02225635306f1L) },
	{ C64(0x011131c1f4f1b3efL, 0x0f0f25d3e200324fL, 0xefe01231a231f5e0L, 0xa39c02f1d24093feL) },
	{ C64(0xc3ed14eee140003fL, 0x6ecb04f05020c13fL, 0x212bf4c6ef2e5671L, 0xec1cf1ee21522220L) },
	{ C64(0x1e2eeff11eb21002L, 0xff4e313a00140101L, 0xeb013f1491430000L, 0x1d0f2fe02ea1d30aL) },
	{ C64(0xc1ffd5f003cd003fL, 0x1bf1ee1e140f2f3eL, 0x2f190dbf3e025bbfL, 0xd3eef12024d130ceL) },
	{ C64(0x4d20301dd1df310fL, 0x00b11dd2e019166bL, 0x1a11202111e41f2dL, 0x22230ffe2eef2010L) },
	{ C64(0xb02feff12c0e1217L, 0xf44c3ff6dd41ffa0L, 0xd0fc132411f001d7L, 0x2cf3bf1fd3ffefe3L) },
	{ C64(0x10e1dde0201f10f2L, 0x03134531202010fdL, 0x22c011201fbfd3f1L, 0x403201c1fdc1f1b3L) },
	{ C64(0xd3302f2dc02031f3L, 0x50a2eef1cac0d251L, 0x2e54d010321efffeL, 0xbf01e1eedf012e2eL) },
	{ C64(0xe0a3f5cff29f3111L, 0xd0211311c3321430L, 0x2eaf300ff0af01d2L, 0x50013ba51b21d3b5L) },
	{ C64(0x3f0eae441e211cfcL, 0xd2b430ddc12f63efL, 0x52f220db26c21101L, 0x010d923d0f34133dL) },
	{ C64(0x01212d31afe41101L, 0x1100d131d01f1ff9L, 0x1e0e30f5235c2323L, 0x2f22f1033122a0d3L) },
	{ C64(0x424f1a0e304ff350L, 0x13f32fd10021e044L, 0x0013e223534f1e32L, 0xdeff0b1f41942c1fL) },
	{ C64(0x0f17f1de1f10f1d3L, 0xee3de0130101ee0fL, 0xe0feffee5d02f1ecL, 0x01003160e140d210L) },
	{ C64(0x50e125625313a3acL, 0x1d550f33312f1431L, 0x4e12d45e2941d362L, 0xd2faa3cf621d1320L) },
	{ C64(0xbd32a111c5141ef1L, 0x6f5501c0ee3d01eeL, 0x1d4f600cd3ba02f1L, 0x203f4f2b232d25fdL) },
	{ C64(0x32c1f0f2ddf31fe4L, 0xdebee110f11d347fL, 0xcf2f0e030fee0ffdL, 0x00e1ceffece0f02eL) },
	{ C64(0xe1332e0212301f23L, 0x021f0121e2e1fee0L, 0xe1fd10fe44d12eefL, 0x6e720b0e31e01ef5L) },
	{ C64(0x1d36f1cdaf2fdf4cL, 0x4eeeff01f2a0a010L, 0x1ffec0324f1ef34cL, 0x41f1e06fff0defcfL) },
	{ C64(0xe2ff1e1e7f102230L, 0x443d004c02fec23bL, 0xf0fd24ef00e0105eL, 0x2c0300ec5521d042L) },
	{ C64(0xce03de13f0f1d03cL, 0x6eefe021d02dab1cL, 0x2d111f7ffd2d103fL, 0x1e1300ef14a40df2L) },
	{ C64(0x11a31ff005311f1dL, 0xe22e420e2410f0efL, 0xe29ffef124cfe5b2L, 0x221120233f3f22e0L) },
	{ C64(0x4110e31103fee30dL, 0x3ae1a0e133293062L, 0x020fc1230fd12732L, 0xf12411e3011efdc1L) },
	{ C64(0xc25d0ee0ff31f371L, 0xe1e2cfe121d2ea10L, 0xeeffd1f4107c20d3L, 0xd426fe0f0002d014L) },
	{ C64(0xcded13d12df10e1fL, 0xeef1d021efe1c0d0L, 0x300001e0eff02ff1L, 0x0ebfe1f2fdcf1ae0L) },
	{ C64(0x3502df20c4221203L, 0x2efe0cc05121e340L, 0xf3fedd0d42a12f3eL, 0x2533011001300734L) },
	{ C64(0x1f0a4c20f0fae131L, 0x020dfb0d21f13f42L, 0xd021e221ec21fd33L, 0x0f1219ce0d910e0fL) },
	{ C64(0x0abc022f214210d0L, 0xdfdf210f1022dfc4L, 0x0f5221b1e0ae21eeL, 0x3e1ec2b0f1e01e1dL) },
	{ C64(0x2b001040ff30ccdcL, 0x00bf04fc132121f3L, 0x2ac11ef1ed502201L, 0x2d21d32d0000eefeL) },
	{ C64(0xc1f21dbd3dd9125fL, 0x1aef26f12ef0134dL, 0x2f3df7b7eed1d702L, 0xdeb2e31de2f200adL) },
	{ C64(0x101160f002011301L, 0x124244f1c4225240L, 0xd001103f30e4024cL, 0xf20b21f301f0e0fbL) },
	{ C64(0xf2ffa213e3f41034L, 0xf22be3f4f3515f3aL, 0xdcda4f06022c3d23L, 0x201ef021150f0232L) },
	{ C64(0xd2370e0f0b3dde4fL, 0x0ed2e1edceeb111eL, 0xe43ef0de05d2cedfL, 0x0ed0e36ce00b1b03L) },
	{ C64(0xb361ff2403040ffdL, 0x502e00a1efc0cefdL, 0x44c0005f16ec424dL, 0x33ee001e035235f2L) },
	{ C64(0x41e0dc2f120eb1afL, 0xd03dffe3abfce231L, 0xdff0e33a4df30170L, 0x0bcddffe0ebd19afL) },
	{ C64(0x1e1ce35f0416c921L, 0xf333abe12c023e1aL, 0x6102f60f2ec01242L, 0xc25cb4020234433dL) },
	{ C64(0xeee0f1d0f1ff10ffL, 0xdff2f01feff100f0L, 0x0f2f10fefff10df1L, 0xeedefef12dd0e2dfL) },
	{ C64(0xcb1f1fd2f22313dfL, 0xf11c041b0431efb6L, 0x1c444bfcc04002aeL, 0x0d114e2432c2e21eL) },
	{ C64(0x1e0e130e2ebf2310L, 0xe1544f0c32023320L, 0x0153f201fd03b31eL, 0xc2fb0302f43e2e1cL) },
	{ C64(0x219e1041ed253fafL, 0x2e2e600120c2a10fL, 0x1f1ec01e12aa200cL, 0x34c102dd400e320dL) },
	{ C64(0x23bf0cd1df301141L, 0x010b3ccf6213e1f0L, 0xb6efb22134311e00L, 0x24400edff3ef6c00L) },
	{ C64(0x5bdf201f211f11c0L, 0x01d000f21c0bf201L, 0x0f011212bf0321fdL, 0x30ef03fffff19f2dL) },
	{ C64(0x71b5dacff06f1e4fL, 0xed053d12311e6cfdL, 0x04302edc63f31d20L, 0xd04ed22ef0af11d0L) },
	{ C64(0x0ca04d4ff203ee0aL, 0x21ae0f2d04fbe151L, 0x3a151e0d1220202dL, 0xf0041ffefd01ff23L) },
	{ C64(0xbf011f07fcfbef0dL, 0xf234142ccfd40eb4L, 0x02dff1e2efedf4e3L, 0x4ece221f0dfcdefeL) },
	{ C64(0x0e357eee3c0c713aL, 0x12ee30ea171d3f32L, 0x02d3f31b01e1e01cL, 0x009feefffa0bee03L) },
	{ C64(0x24e10fe7edfffff2L, 0xf1120f02edc5153dL, 0xee0cd050dcecee13L, 0x1dcfee1fd1ebff1aL) },
	{ C64(0x1f1f02111f24efffL, 0xa1eeebefcdd322d4L, 0xcfe1c1012df12ef0L, 0xfe1a9e20d0101f0eL) },
	{ C64(0x22103feff3f23203L, 0xde3e032c2024e2efL, 0xad3d0c33fff0e2f2L, 0x3f422ef240c0f0beL) },
	{ C64(0xfe16010fe3120331L, 0xd00f1df0121d1eeeL, 0xe202c0317b4ecec2L, 0xd643b372e000efc3L) },
	{ C64(0x2fffe2efe0e1e3dfL, 0x1f06331f0002341dL, 0x0f0fe212fec13d4fL, 0x1fed0fc13ed0f3ecL) },
};
static int backbone_model4_conv2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -107, -89, -70, -52, -33, -15, 3, 21, 40, 58, 77, 95, 114, 133 },
	{ -99, -85, -71, -57, -43, -29, -15, -1, 13, 27, 41, 55, 69, 83 },
	{ -115, -98, -81, -64, -46, -29, -12, 4, 22, 39, 56, 73, 90, 108 },
	{ -119, -103, -87, -71, -55, -39, -23, -7, 8, 24, 40, 56, 72, 88 },
	{ -136, -120, -104, -87, -71, -55, -38, -22, -6, 10, 26, 42, 59, 75 },
	{ -139, -118, -97, -77, -56, -35, -14, 6, 26, 47, 68, 89, 110, 131 },
	{ -118, -100, -82, -64, -46, -27, -9, 8, 26, 44, 62, 80, 98, 116 },
	{ -96, -80, -64, -47, -31, -15, 0, 17, 33, 49, 65, 82, 98, 114 },
	{ -160, -138, -115, -92, -69, -46, -24, -1, 21, 44, 67, 89, 112, 135 },
	{ -124, -105, -85, -66, -47, -27, -8, 10, 30, 49, 68, 88, 107, 126 },
	{ -133, -116, -98, -81, -64, -46, -29, -11, 5, 22, 40, 57, 75, 92 },
	{ -136, -116, -96, -75, -55, -35, -15, 4, 25, 45, 65, 85, 105, 126 },
	{ -74, -60, -46, -31, -17, -3, 10, 25, 39, 53, 67, 82, 96, 110 },
	{ -93, -74, -55, -36, -17, 1, 20, 38, 57, 76, 95, 114, 133, 152 },
	{ -105, -88, -71, -55, -38, -21, -4, 11, 28, 45, 61, 78, 95, 112 },
	{ -122, -101, -79, -58, -36, -14, 6, 28, 49, 71, 93, 114, 136, 157 },
	{ -115, -96, -78, -60, -42, -24, -6, 11, 29, 47, 66, 84, 102, 120 },
	{ -129, -110, -90, -70, -50, -31, -11, 8, 28, 47, 67, 87, 106, 126 },
	{ -112, -96, -79, -63, -46, -29, -13, 3, 19, 36, 52, 69, 86, 102 },
	{ -100, -84, -68, -52, -36, -20, -4, 11, 27, 43, 59, 75, 91, 107 },
	{ -127, -107, -87, -67, -47, -27, -7, 12, 33, 53, 73, 93, 113, 133 },
	{ -101, -86, -71, -56, -41, -26, -11, 3, 18, 33, 48, 63, 77, 92 },
	{ -125, -105, -86, -66, -46, -27, -7, 12, 31, 51, 71, 90, 110, 130 },
	{ -105, -88, -71, -54, -37, -20, -3, 13, 30, 47, 64, 81, 99, 116 },
	{ -116, -96, -77, -57, -37, -18, 1, 21, 40, 60, 80, 99, 119, 139 },
	{ -112, -92, -72, -52, -32, -12, 7, 27, 47, 67, 87, 107, 127, 147 },
	{ -124, -105, -87, -68, -49, -31, -12, 5, 24, 42, 61, 80, 98, 117 },
	{ -85, -68, -51, -34, -17, 0, 15, 32, 49, 66, 83, 100, 116, 133 },
	{ -129, -108, -88, -68, -48, -28, -7, 12, 32, 52, 73, 93, 113, 133 },
	{ -102, -89, -76, -64, -51, -38, -26, -13, 0, 11, 24, 37, 49, 62 },
	{ -107, -90, -73, -56, -39, -22, -5, 11, 28, 45, 62, 80, 97, 114 },
	{ -122, -105, -88, -71, -53, -36, -19, -2, 14, 31, 48, 65, 83, 100 },
	{ -91, -75, -59, -43, -27, -11, 4, 20, 36, 52, 68, 84, 100, 116 },
	{ -120, -102, -83, -64, -46, -27, -9, 9, 27, 46, 64, 83, 101, 120 },
	{ -93, -77, -61, -45, -29, -13, 2, 18, 34, 50, 66, 82, 98, 114 },
	{ -121, -102, -83, -65, -46, -27, -8, 10, 29, 48, 67, 86, 104, 123 },
	{ -116, -96, -77, -58, -38, -19, 0, 19, 38, 57, 77, 96, 115, 135 },
	{ -122, -104, -85, -67, -48, -30, -11, 6, 25, 44, 62, 81, 99, 118 },
	{ -117, -98, -79, -61, -42, -23, -4, 14, 33, 51, 70, 89, 108, 127 },
	{ -118, -101, -84, -67, -50, -33, -16, 0, 17, 34, 51, 68, 85, 102 },
	{ -126, -107, -88, -70, -51, -32, -13, 4, 23, 42, 60, 79, 98, 117 },
	{ -120, -99, -78, -56, -35, -14, 6, 27, 48, 70, 91, 112, 133, 154 },
	{ -145, -118, -90, -62, -35, -7, 19, 47, 75, 102, 130, 157, 185, 213 },
	{ -114, -95, -77, -58, -39, -21, -2, 16, 35, 53, 72, 91, 109, 128 },
	{ -95, -79, -63, -46, -30, -14, 1, 17, 33, 49, 66, 82, 98, 114 },
	{ -147, -128, -108, -89, -69, -50, -30, -11, 8, 27, 47, 66, 86, 105 },
	{ -90, -73, -56, -40, -23, -6, 10, 26, 43, 60, 77, 94, 110, 127 },
	{ -184, -160, -136, -112, -89, -65, -41, -17, 6, 29, 53, 77, 101, 124 },
	{ -90, -73, -57, -40, -23, -6, 10, 27, 44, 60, 77, 94, 111, 128 },
	{ -136, -116, -96, -75, -55, -35, -15, 5, 25, 45, 65, 85, 106, 126 },
	{ -114, -95, -77, -58, -39, -20, -1, 16, 35, 54, 73, 92, 110, 129 },
	{ -107, -90, -72, -54, -37, -19, -1, 15, 33, 51, 68, 86, 104, 122 },
	{ -137, -117, -98, -78, -58, -39, -19, 0, 19, 39, 59, 78, 98, 118 },
	{ -112, -95, -78, -61, -44, -27, -10, 6, 23, 40, 57, 74, 91, 108 },
	{ -103, -88, -73, -58, -43, -28, -13, 1, 16, 31, 46, 61, 76, 92 },
	{ -129, -110, -90, -70, -50, -31, -11, 8, 28, 47, 67, 87, 107, 126 },
	{ -134, -114, -95, -76, -57, -38, -18, 0, 19, 38, 58, 77, 96, 115 },
	{ -106, -90, -74, -59, -43, -27, -11, 4, 19, 35, 51, 67, 83, 98 },
	{ -103, -88, -74, -59, -45, -30, -16, -1, 13, 27, 42, 56, 71, 85 },
	{ -127, -110, -93, -75, -58, -41, -24, -6, 10, 27, 44, 61, 79, 96 },
	{ -133, -115, -97, -79, -61, -43, -24, -6, 11, 29, 47, 65, 83, 101 },
	{ -126, -106, -86, -67, -47, -27, -8, 11, 30, 50, 70, 89, 109, 129 },
	{ -124, -104, -85, -65, -45, -25, -5, 14, 34, 54, 74, 94, 114, 134 },
	{ -138, -116, -94, -73, -51, -29, -8, 13, 35, 56, 78, 100, 122, 143 },
};
static int_t<4,1> backbone_model4_conv2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xe), C(0xf), C(0x0), C(0xd), C(0xd), C(0xf), C(0xf), C(0xc), C(0xc), },
	{ C(0x0), C(0x4), C(0x0), C(0xb), C(0x6), C(0x3), C(0xb), C(0xf), C(0x2), },
	{ C(0x5), C(0x5), C(0x2), C(0x2), C(0x3), C(0x1), C(0xd), C(0xe), C(0x0), },
	{ C(0x2), C(0x7), C(0x3), C(0xe), C(0x1), C(0x1), C(0x0), C(0xd), C(0x2), },
	{ C(0x2), C(0xb), C(0xc), C(0x7), C(0x3), C(0xc), C(0x5), C(0x5), C(0x4), },
	{ C(0x9), C(0xf), C(0x0), C(0xa), C(0x1), C(0x0), C(0xf), C(0x0), C(0x0), },
	{ C(0x3), C(0x3), C(0x0), C(0x2), C(0x6), C(0x3), C(0x3), C(0x1), C(0x3), },
	{ C(0x3), C(0x2), C(0xe), C(0xe), C(0xb), C(0xc), C(0xc), C(0xd), C(0x0), },
	{ C(0x0), C(0x1), C(0x7), C(0xf), C(0x3), C(0x7), C(0x0), C(0x2), C(0x3), },
	{ C(0xf), C(0x0), C(0x0), C(0x4), C(0x5), C(0xd), C(0x5), C(0x5), C(0xd), },
	{ C(0x0), C(0x6), C(0x7), C(0xf), C(0x0), C(0x4), C(0xe), C(0xf), C(0x2), },
	{ C(0xc), C(0xb), C(0xb), C(0xe), C(0xf), C(0x0), C(0x4), C(0x5), C(0x6), },
	{ C(0x5), C(0xe), C(0x1), C(0xb), C(0x9), C(0xe), C(0x0), C(0xd), C(0x0), },
	{ C(0xe), C(0x0), C(0xf), C(0xb), C(0xe), C(0xf), C(0xd), C(0xd), C(0x0), },
	{ C(0xd), C(0xc), C(0x2), C(0xc), C(0x4), C(0xe), C(0x0), C(0xf), C(0xa), },
	{ C(0x0), C(0xf), C(0xf), C(0xe), C(0x1), C(0x6), C(0x3), C(0x6), C(0x3), },
	{ C(0xf), C(0x4), C(0x3), C(0x9), C(0xe), C(0x2), C(0xa), C(0xa), C(0xf), },
	{ C(0xb), C(0xc), C(0xa), C(0x1), C(0x2), C(0xe), C(0x2), C(0x1), C(0xf), },
	{ C(0xf), C(0x6), C(0x2), C(0x1), C(0x2), C(0xf), C(0xf), C(0xa), C(0x9), },
	{ C(0x4), C(0x5), C(0x2), C(0x4), C(0x1), C(0x0), C(0x5), C(0x1), C(0x0), },
	{ C(0xf), C(0xc), C(0xc), C(0x2), C(0x1), C(0xb), C(0x1), C(0x1), C(0xe), },
	{ C(0x1), C(0x2), C(0x1), C(0x4), C(0x2), C(0xc), C(0x5), C(0x1), C(0xc), },
	{ C(0x3), C(0x2), C(0xb), C(0x1), C(0xc), C(0x9), C(0x1), C(0xb), C(0xe), },
	{ C(0x1), C(0xf), C(0xe), C(0x1), C(0xd), C(0xa), C(0x1), C(0x3), C(0x9), },
	{ C(0xe), C(0x3), C(0xe), C(0xe), C(0x0), C(0x0), C(0xa), C(0xd), C(0xe), },
	{ C(0xd), C(0xf), C(0xe), C(0xd), C(0xf), C(0xd), C(0xe), C(0xf), C(0xe), },
	{ C(0xf), C(0x2), C(0xf), C(0xf), C(0x7), C(0x4), C(0x1), C(0xe), C(0xe), },
	{ C(0x3), C(0x4), C(0xe), C(0x3), C(0xb), C(0xb), C(0xd), C(0x9), C(0xe), },
	{ C(0x0), C(0x0), C(0x1), C(0xe), C(0xa), C(0x1), C(0xe), C(0xa), C(0xd), },
	{ C(0x1), C(0xf), C(0xe), C(0x4), C(0x1), C(0xc), C(0x3), C(0x6), C(0x0), },
	{ C(0x4), C(0x3), C(0xf), C(0x7), C(0x1), C(0x0), C(0xe), C(0xe), C(0xc), },
	{ C(0xf), C(0x4), C(0xe), C(0x0), C(0x7), C(0x2), C(0x0), C(0xc), C(0xf), },
	{ C(0xe), C(0xd), C(0xf), C(0x1), C(0xf), C(0xe), C(0x6), C(0x6), C(0x4), },
	{ C(0x1), C(0x1), C(0x3), C(0x3), C(0x2), C(0x4), C(0xd), C(0x9), C(0xb), },
	{ C(0x1), C(0xa), C(0xe), C(0x4), C(0xb), C(0x2), C(0x3), C(0xf), C(0xc), },
	{ C(0x1), C(0x0), C(0xe), C(0xf), C(0xe), C(0xe), C(0xb), C(0xb), C(0xd), },
	{ C(0xc), C(0xd), C(0x0), C(0xc), C(0xe), C(0xf), C(0xe), C(0xf), C(0x0), },
	{ C(0x3), C(0x2), C(0x2), C(0x3), C(0x2), C(0x1), C(0x2), C(0x0), C(0xf), },
	{ C(0xf), C(0xf), C(0x6), C(0xc), C(0xc), C(0xf), C(0xf), C(0xd), C(0xb), },
	{ C(0x9), C(0x2), C(0xe), C(0xf), C(0x2), C(0x2), C(0xd), C(0xf), C(0x0), },
	{ C(0x9), C(0xf), C(0xc), C(0xf), C(0xe), C(0x2), C(0xd), C(0xe), C(0x3), },
	{ C(0x2), C(0x1), C(0x4), C(0x0), C(0x9), C(0x2), C(0x2), C(0xf), C(0x2), },
	{ C(0x7), C(0x7), C(0x3), C(0x3), C(0x0), C(0xf), C(0x2), C(0x0), C(0x0), },
	{ C(0x5), C(0x0), C(0xa), C(0x2), C(0xf), C(0xd), C(0x5), C(0xf), C(0xd), },
	{ C(0xd), C(0x0), C(0xc), C(0xe), C(0xd), C(0xe), C(0xe), C(0xa), C(0xd), },
	{ C(0xe), C(0x7), C(0xe), C(0x4), C(0x7), C(0xc), C(0x0), C(0x0), C(0x0), },
	{ C(0x5), C(0x5), C(0x4), C(0x1), C(0xf), C(0xf), C(0xc), C(0xa), C(0xb), },
	{ C(0xe), C(0xe), C(0xe), C(0xf), C(0xd), C(0xc), C(0xd), C(0xf), C(0xd), },
	{ C(0xe), C(0x0), C(0x9), C(0x0), C(0xf), C(0x9), C(0x1), C(0x0), C(0xb), },
	{ C(0x2), C(0x1), C(0x2), C(0x2), C(0x1), C(0x1), C(0x1), C(0x1), C(0x1), },
	{ C(0xd), C(0xf), C(0x1), C(0x9), C(0x1), C(0x1), C(0xd), C(0xd), C(0x0), },
	{ C(0x1), C(0xd), C(0xb), C(0x7), C(0x0), C(0xc), C(0xf), C(0xd), C(0xd), },
	{ C(0xd), C(0xb), C(0xa), C(0x1), C(0x0), C(0xd), C(0x2), C(0x1), C(0xb), },
	{ C(0x0), C(0x3), C(0x4), C(0x1), C(0xa), C(0x5), C(0x4), C(0x4), C(0x1), },
	{ C(0xf), C(0x3), C(0x1), C(0x2), C(0x4), C(0x9), C(0x1), C(0xf), C(0xf), },
	{ C(0x0), C(0x7), C(0x1), C(0x6), C(0xe), C(0x3), C(0x0), C(0x1), C(0xf), },
	{ C(0x1), C(0x0), C(0xe), C(0x0), C(0xc), C(0xd), C(0xb), C(0xc), C(0xf), },
	{ C(0x3), C(0x3), C(0x4), C(0x3), C(0x4), C(0x3), C(0x1), C(0x0), C(0xd), },
	{ C(0x2), C(0x2), C(0x5), C(0x0), C(0x3), C(0x5), C(0x2), C(0x4), C(0x2), },
	{ C(0x2), C(0x0), C(0x0), C(0x2), C(0x3), C(0xe), C(0x0), C(0x6), C(0x2), },
	{ C(0xb), C(0xe), C(0x1), C(0xe), C(0xe), C(0x2), C(0xe), C(0xc), C(0xd), },
	{ C(0xe), C(0xe), C(0xe), C(0xe), C(0xd), C(0xe), C(0x3), C(0x2), C(0xc), },
	{ C(0xe), C(0x7), C(0x3), C(0x2), C(0x2), C(0x0), C(0x1), C(0x2), C(0x1), },
	{ C(0x2), C(0x2), C(0x2), C(0x0), C(0x2), C(0x3), C(0x1), C(0x2), C(0x2), },
};
static int backbone_model4_conv2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 5, 16, 28, 39, 51, 63, 74 },
	{ 14, 26, 38, 50, 62, 74, 86 },
	{ 10, 19, 28, 37, 47, 56, 65 },
	{ 10, 20, 31, 41, 52, 62, 73 },
	{ 11, 25, 38, 52, 65, 78, 92 },
	{ 7, 16, 25, 35, 44, 53, 63 },
	{ 10, 21, 32, 44, 55, 66, 78 },
	{ 6, 17, 28, 39, 51, 62, 73 },
	{ 12, 28, 44, 60, 75, 91, 107 },
	{ 7, 18, 29, 40, 51, 62, 73 },
	{ 9, 22, 35, 48, 61, 74, 87 },
	{ 5, 16, 27, 37, 48, 59, 70 },
	{ 15, 30, 45, 60, 75, 90, 105 },
	{ 5, 18, 30, 43, 55, 68, 80 },
	{ 4, 14, 23, 32, 41, 50, 59 },
	{ 8, 16, 24, 32, 40, 47, 55 },
	{ 7, 19, 32, 44, 57, 69, 82 },
	{ 6, 18, 30, 41, 53, 64, 76 },
	{ 11, 22, 33, 45, 56, 67, 78 },
	{ 9, 21, 32, 44, 56, 67, 79 },
	{ 0, 8, 17, 27, 36, 45, 54 },
	{ 9, 18, 28, 37, 46, 56, 65 },
	{ 16, 28, 40, 52, 64, 76, 88 },
	{ 9, 20, 31, 41, 52, 62, 73 },
	{ 7, 16, 25, 34, 43, 52, 60 },
	{ 1, 13, 25, 37, 49, 61, 73 },
	{ 1, 9, 16, 24, 31, 39, 46 },
	{ 13, 27, 40, 54, 67, 81, 94 },
	{ 3, 15, 26, 38, 50, 62, 74 },
	{ 15, 25, 36, 46, 57, 68, 78 },
	{ 8, 17, 26, 35, 45, 54, 63 },
	{ 0, 10, 19, 29, 39, 49, 58 },
	{ 4, 14, 24, 34, 44, 53, 63 },
	{ 6, 15, 24, 33, 41, 50, 59 },
	{ 6, 18, 29, 40, 51, 62, 73 },
	{ 3, 14, 25, 35, 46, 57, 68 },
	{ 7, 18, 28, 39, 50, 61, 72 },
	{ -6, 1, 9, 18, 26, 34, 43 },
	{ 1, 11, 21, 31, 40, 50, 60 },
	{ 0, 8, 16, 24, 31, 39, 47 },
	{ 9, 22, 35, 48, 60, 73, 86 },
	{ -1, 3, 9, 14, 20, 25, 31 },
	{ -16, -8, 0, 8, 16, 24, 33 },
	{ 10, 20, 31, 41, 51, 61, 71 },
	{ 14, 24, 35, 45, 55, 66, 76 },
	{ 4, 15, 26, 36, 47, 58, 68 },
	{ 14, 27, 39, 52, 64, 77, 90 },
	{ 8, 19, 29, 39, 50, 60, 70 },
	{ 12, 25, 39, 53, 66, 80, 94 },
	{ -1, 5, 11, 18, 25, 31, 38 },
	{ 8, 19, 30, 41, 53, 64, 75 },
	{ 3, 13, 24, 34, 45, 55, 66 },
	{ 7, 19, 31, 43, 55, 68, 80 },
	{ 6, 18, 30, 42, 55, 67, 79 },
	{ 5, 13, 22, 30, 39, 47, 56 },
	{ 3, 12, 22, 32, 42, 51, 61 },
	{ 7, 16, 24, 33, 42, 50, 59 },
	{ 12, 22, 32, 42, 52, 62, 72 },
	{ 15, 28, 42, 55, 69, 83, 96 },
	{ 9, 19, 30, 40, 51, 62, 72 },
	{ 16, 28, 39, 51, 63, 74, 86 },
	{ 6, 18, 30, 42, 55, 67, 79 },
	{ 4, 14, 23, 33, 42, 52, 61 },
	{ 0, 8, 18, 27, 36, 46, 55 },
};
static int_t<4,64> backbone_model5_conv1_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x02e321a34d13f100L, 0x1ce121f4fab13c0bL, 0xfca0ff1b4a9c2ffcL, 0x2fedf0c100ae1e10L) },
	{ C64(0x102a2c1d21ea421eL, 0xc2450eef2d0f1c00L, 0xff2dc140eb0b31c2L, 0xafd02306022f121fL) },
	{ C64(0xdf2113feaec20c15L, 0xbfd52bed0f16f201L, 0x011e20144f13124aL, 0x01f10ff40d30f300L) },
	{ C64(0x0233d0a2e0e0e1fdL, 0x0e14010fe1efb2efL, 0x311e00d1324ff001L, 0x131fc03ec5f100faL) },
	{ C64(0x1ef1fa71d2f32effL, 0x3212f32110043feeL, 0xf000124e0eefff21L, 0x2fd112e03e1f4b34L) },
	{ C64(0x1c2c313cc0d03243L, 0xaf3c1e11d12d0213L, 0x2220113cc4532130L, 0x0150fc231de0f300L) },
	{ C64(0xed34bdfb0ddf001dL, 0x0d0ce4f1324bbfe1L, 0x1ece303ad0e10cdfL, 0x112edf3cff042defL) },
	{ C64(0x294d0fe0d00a003eL, 0x2fff2e0c42700320L, 0x21f121532205e1a3L, 0x5230ce0e1c030bf3L) },
	{ C64(0xf1c21d13df123bf5L, 0xc11eedee2fd3fbe1L, 0xffdf312e2dd0ffcfL, 0xbdc326ef05ce5f22L) },
	{ C64(0x1311edcdcff1f1fcL, 0x3fdb0af2112601d4L, 0x16e7210125d01f41L, 0x330fbad0ec1ff3beL) },
	{ C64(0xef3fd03b1fe010feL, 0xef090de002e05fe2L, 0xf12a400cd0e11de1L, 0x0d00c0101306d2eeL) },
	{ C64(0x31023204110102f1L, 0x5101041200d0d221L, 0x11001fd1010e103fL, 0x2030303f12112110L) },
	{ C64(0x13ef0fffef213f12L, 0x2cdd5ef1ce2dffebL, 0xf1f20efd4ef00ddeL, 0xf0e1de00ee0deeffL) },
	{ C64(0xfcfc4210919fcf04L, 0xdc0254f01df22f0aL, 0xda11dfff39fd0dfcL, 0x0ac9c43d301eb120L) },
	{ C64(0xf0d200dd1e011201L, 0x2e391312001bc201L, 0x2013102d1201feefL, 0x2e4020dd2fce1201L) },
	{ C64(0x010e014cd209f0f2L, 0x13f5de1e10420ff2L, 0x1013d226f12d12d3L, 0xe3f01e221e6cc0f5L) },
	{ C64(0x41fe40c1112dc0d1L, 0x12ffdaf210251350L, 0xf23ff0a4ee30f4d0L, 0xef11dc243263913fL) },
	{ C64(0x000e0ccf1f191210L, 0x0f0bedfe1cfec114L, 0x2d2401f22f20af9eL, 0x0f22f3010eff3fffL) },
	{ C64(0xe1a13050000a2103L, 0x0efa2d130ef22f02L, 0x01c2113fefd01fddL, 0xfe012f111cf00114L) },
	{ C64(0xf12e2042f020e0ccL, 0xe3ffbfef1ce2c12fL, 0x1e4ddff4d03f01f0L, 0xdf1e454ff1612f11L) },
	{ C64(0x20302b300eef13fcL, 0xb0e03101e520a2f2L, 0xe31eb10a2f0d4f3fL, 0xe320102ff145002dL) },
	{ C64(0x0e55d22d101021e0L, 0x2000010e222e0002L, 0x140d6f0121202f13L, 0x4442030021e561e3L) },
	{ C64(0x4bfaf10141fde42fL, 0xf331d0f0643121ffL, 0x0c0f12020110b0b3L, 0x002fa2d100dffa0fL) },
	{ C64(0x2c14e3a033c2212fL, 0x1403123ef1f0f3e5L, 0x11540ecaf15cc43fL, 0xd02dd4dbd6c0435bL) },
	{ C64(0xf5eeecfee1e31c41L, 0xa45f1443e65bffc0L, 0x2cf614cf42ff30bdL, 0xe322fdf00cce4eeeL) },
	{ C64(0xf002a6ce10f31b30L, 0x30e30d013e12fedfL, 0x0190e0332fd0b025L, 0x20bdf105ee0c3ee1L) },
	{ C64(0xe35eee1f02f1e111L, 0xf50f0020061defceL, 0x1ff1e2fee71700e0L, 0xef20ff062f0140fdL) },
	{ C64(0x0e53fc32ced1f7dcL, 0x0f0f13e1f011edffL, 0xfe12002039ed1fd4L, 0x30fccd4b0e53d01eL) },
	{ C64(0x143304feffa33210L, 0x63e13ee30eae1d11L, 0x0c01bf4eec103f32L, 0x0adb20134e10d20aL) },
	{ C64(0xdd00bcf030eb0fd0L, 0x310ee30e10f66f52L, 0x00ab10e00fccd240L, 0xe2d012d12efe03efL) },
	{ C64(0x062f1e10202df31eL, 0xd013ff20de1bd021L, 0x1dddc2c3c23001c7L, 0xb230fb6ee633f21eL) },
	{ C64(0x310001eff1d1412eL, 0xeff04c01001e6114L, 0x14e03121d2f413fdL, 0x21f0991f4de2df10L) },
	{ C64(0xe2c12e0a3e03ccfdL, 0xe221ce101f00a00fL, 0x104fbffa0f3fe10fL, 0xd00d52ff2cdadfddL) },
	{ C64(0x00f0e2a4000f02ffL, 0x1de012ff0f233fc1L, 0x0da32f1132a06120L, 0x32301111fb2222cdL) },
	{ C64(0x0bf1f21470fbeefcL, 0x20e4b41e00f20d3fL, 0xffff10e0c0fde4bfL, 0x00e355e00dad3000L) },
	{ C64(0x3f171100101d3e11L, 0x61d2410efe30c1e3L, 0xf423ff0022512fdeL, 0x5fff00d1221df302L) },
	{ C64(0x23fb20e3431af410L, 0x420ee300ff12502cL, 0x20f230e101ef03eeL, 0x1f30eff1f131b030L) },
	{ C64(0x23f42212ff11da0fL, 0x1bd2f40cbfe21111L, 0x0010f0e31303e119L, 0xd0f03f20c101e2f1L) },
	{ C64(0x10fe029e21e1030fL, 0xf03c11f200004e00L, 0x1e01c1f1febd00e0L, 0xfdfe21f1fe1ed01bL) },
	{ C64(0xeedddcedf77aff0dL, 0xf54cd161031effbbL, 0x5fc0d6c014dfdbf4L, 0xd123ffe0fefddfe0L) },
	{ C64(0x41ac220211d00151L, 0xe111f212d43e0203L, 0x11f100e0c12f20bfL, 0xc2131be0d000a030L) },
	{ C64(0x6fe05e53132e032eL, 0xc12eaf1021112016L, 0x0511f1eff1106330L, 0x034112b02ffe00f4L) },
	{ C64(0xfc223361ae0aefd1L, 0xc1f4eb92f1921ad3L, 0x3eed0f15c01ce10fL, 0xe1e020ef021e06e5L) },
	{ C64(0x4034a33f4010e24fL, 0x13fd10011020e110L, 0x0121de0122dfda44L, 0x11fd2eefaff12ebcL) },
	{ C64(0x0f1b1f51a3040f04L, 0x30f16dff165e13cfL, 0xf40110214124324eL, 0x201cd06cfe6ee001L) },
	{ C64(0x3d1422010ffe002fL, 0x3dd102efeac20001L, 0xe11cfd45fbe20f10L, 0x0d0e213ff123d111L) },
	{ C64(0x5212f03411a2234dL, 0x00f41ff222142324L, 0x11eab122d0100e11L, 0x03d1b0340ef11e30L) },
	{ C64(0x300f0e24ff0dcdfbL, 0xe214fdfe3213cf10L, 0xf0ffd0f30dfeffdeL, 0xf2de1f0ede00ee01L) },
	{ C64(0xfe3012cf00e313f0L, 0x2104f30f100f0445L, 0x2d0000fe21320f21L, 0x401fe43115e110feL) },
	{ C64(0x4a47e101debe1f50L, 0x35f112fd2342e020L, 0xe0fd304000011ddeL, 0x5ef152df611202eeL) },
	{ C64(0x004d4fd00021ef0fL, 0xe021fd1fff0f02d0L, 0xef7fff0f000211d1L, 0xa0300bcf0212def2L) },
	{ C64(0xe4ee111ed0013046L, 0x5d116231204c20c9L, 0x1e0460fa6215602dL, 0x2c30aff0ee30eb1aL) },
	{ C64(0xeff0f0ef604ff1f0L, 0x0e0ffe0efd1cd2f0L, 0x06ee1f01f01020f5L, 0x1567ed0fd0001015L) },
	{ C64(0x1eae250fd1e03d02L, 0x00203f01f021f101L, 0xf006e0dc3d4ce34eL, 0xd25211f4fd1ef25dL) },
	{ C64(0x01fe2001d0edde0fL, 0xeff111f01f010f0eL, 0xfe10d013fefef0f0L, 0xedfd1f0f0f2fc00fL) },
	{ C64(0xff0f0ade21ee2f43L, 0xe00e402d3f3eb21fL, 0x030221413117ffa0L, 0x3f34c1240f023c30L) },
	{ C64(0x2f110612d23b3a1eL, 0xb3f013fd401b5032L, 0x04ee6f3fc4f36653L, 0x6e3e035a01c7601eL) },
	{ C64(0xc3ec3ceee003ecf3L, 0xdffa1f011cff1d33L, 0xfd42e2e21bfef0f0L, 0xfe0e6110fe1cc310L) },
	{ C64(0xe33112ff011b02afL, 0x2401010111ad1f0eL, 0x1de5124cf013021fL, 0x1c0001d24d0ff30eL) },
	{ C64(0x3ed0572f343de20fL, 0xa0f6ef20f003b6e5L, 0x1311d1d3f621c40fL, 0xf562f0f1e31fd106L) },
	{ C64(0x53124040f2103153L, 0xc614fe13010ec2deL, 0x11742101e1542114L, 0x9d5020f432c00b41L) },
	{ C64(0xae30b3b1d0ebffd0L, 0xfff6000ddffc1231L, 0x3cd000261260d424L, 0x0002c151a1edd0caL) },
	{ C64(0xaaed0dcfd000ffb2L, 0x2d0d3dfd3e02d020L, 0x1ebdf1313cc1add2L, 0x1f02f20f073f1fffL) },
	{ C64(0x4fe30192f2e12332L, 0xc5ee1623ef12ff4bL, 0x2f036f133da020f1L, 0x0e40d1f220010d1cL) },
};
static int backbone_model5_conv1_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -211, -185, -159, -133, -107, -81, -55, -30, -4, 21, 47, 73, 99, 125 },
	{ -182, -156, -129, -102, -76, -49, -22, 3, 30, 57, 83, 110, 137, 163 },
	{ -144, -122, -100, -79, -57, -35, -13, 8, 29, 51, 73, 95, 117, 139 },
	{ -145, -124, -104, -83, -63, -42, -21, -1, 19, 39, 60, 80, 101, 122 },
	{ -126, -104, -82, -60, -38, -16, 5, 27, 49, 71, 93, 115, 137, 159 },
	{ -139, -115, -91, -67, -43, -19, 4, 28, 52, 76, 100, 124, 148, 172 },
	{ -203, -173, -142, -112, -82, -52, -21, 8, 38, 68, 99, 129, 159, 189 },
	{ -163, -134, -104, -75, -45, -16, 12, 42, 71, 101, 130, 160, 189, 218 },
	{ -180, -154, -129, -103, -77, -51, -26, 0, 25, 50, 76, 102, 128, 153 },
	{ -334, -289, -245, -200, -156, -111, -66, -22, 22, 66, 111, 156, 200, 245 },
	{ -170, -146, -122, -97, -73, -49, -25, -1, 23, 47, 71, 95, 120, 144 },
	{ -147, -120, -92, -65, -38, -11, 16, 43, 70, 98, 125, 152, 179, 207 },
	{ -269, -233, -196, -160, -124, -88, -51, -15, 20, 57, 93, 129, 166, 202 },
	{ -248, -216, -184, -152, -120, -87, -55, -23, 8, 40, 72, 104, 136, 169 },
	{ -161, -135, -109, -83, -57, -31, -5, 20, 46, 72, 98, 124, 150, 176 },
	{ -177, -151, -125, -99, -73, -47, -21, 4, 30, 56, 82, 108, 134, 160 },
	{ -215, -186, -156, -127, -97, -68, -38, -9, 19, 49, 78, 108, 137, 167 },
	{ -170, -147, -125, -102, -79, -56, -33, -11, 11, 34, 57, 79, 102, 125 },
	{ -127, -107, -87, -67, -47, -27, -7, 12, 32, 52, 73, 93, 113, 133 },
	{ -215, -185, -155, -125, -95, -65, -35, -5, 24, 54, 84, 114, 144, 174 },
	{ -147, -124, -101, -78, -55, -32, -10, 12, 35, 58, 81, 104, 127, 150 },
	{ -128, -102, -77, -52, -26, -1, 24, 49, 74, 100, 125, 151, 176, 201 },
	{ -181, -152, -122, -93, -64, -34, -5, 23, 53, 82, 111, 141, 170, 199 },
	{ -161, -136, -110, -85, -59, -34, -8, 16, 42, 67, 93, 118, 144, 169 },
	{ -213, -181, -149, -116, -84, -52, -20, 12, 44, 76, 108, 141, 173, 205 },
	{ -164, -139, -114, -89, -64, -38, -13, 11, 36, 61, 86, 112, 137, 162 },
	{ -127, -104, -81, -57, -34, -11, 11, 35, 58, 81, 104, 128, 151, 174 },
	{ -251, -218, -185, -151, -118, -85, -51, -18, 14, 48, 81, 114, 148, 181 },
	{ -220, -188, -156, -124, -92, -60, -28, 3, 35, 67, 99, 130, 162, 194 },
	{ -198, -169, -141, -112, -83, -55, -26, 2, 31, 59, 88, 117, 146, 174 },
	{ -190, -161, -132, -104, -75, -46, -18, 10, 39, 67, 96, 125, 153, 182 },
	{ -159, -133, -107, -81, -55, -29, -3, 22, 48, 74, 100, 127, 153, 179 },
	{ -171, -150, -128, -107, -86, -65, -44, -22, -1, 19, 40, 62, 83, 104 },
	{ -137, -115, -92, -70, -47, -24, -2, 20, 42, 65, 87, 110, 132, 155 },
	{ -193, -166, -138, -111, -83, -55, -28, 0, 26, 54, 82, 109, 137, 164 },
	{ -134, -111, -87, -63, -39, -15, 8, 31, 55, 79, 103, 127, 151, 174 },
	{ -122, -101, -80, -60, -39, -18, 1, 22, 43, 64, 84, 105, 126, 146 },
	{ -164, -140, -116, -92, -68, -44, -20, 3, 27, 52, 76, 100, 124, 148 },
	{ -166, -142, -119, -95, -72, -48, -25, -1, 21, 45, 68, 91, 115, 138 },
	{ -196, -166, -137, -108, -78, -49, -20, 9, 38, 68, 97, 126, 156, 185 },
	{ -156, -131, -106, -81, -57, -32, -7, 17, 42, 66, 91, 116, 141, 166 },
	{ -163, -131, -100, -69, -38, -7, 23, 55, 86, 117, 148, 179, 210, 242 },
	{ -276, -241, -207, -172, -137, -102, -68, -33, 1, 36, 71, 105, 140, 175 },
	{ -137, -115, -92, -70, -48, -25, -3, 18, 41, 63, 85, 108, 130, 152 },
	{ -183, -150, -117, -85, -52, -20, 12, 44, 77, 109, 142, 174, 207, 239 },
	{ -189, -161, -132, -104, -76, -48, -20, 7, 36, 64, 92, 120, 148, 176 },
	{ -135, -109, -84, -59, -33, -8, 16, 42, 67, 92, 118, 143, 169, 194 },
	{ -217, -188, -159, -130, -101, -72, -43, -14, 14, 43, 72, 101, 130, 159 },
	{ -152, -124, -95, -67, -38, -10, 18, 46, 75, 103, 131, 160, 188, 217 },
	{ -163, -134, -104, -75, -45, -16, 12, 42, 71, 101, 130, 159, 189, 218 },
	{ -159, -136, -114, -91, -69, -47, -24, -2, 20, 42, 65, 87, 110, 132 },
	{ -187, -153, -119, -85, -51, -17, 16, 50, 84, 118, 151, 185, 219, 253 },
	{ -156, -131, -107, -82, -57, -33, -8, 16, 40, 65, 89, 114, 139, 163 },
	{ -154, -130, -106, -81, -57, -32, -8, 16, 40, 65, 89, 113, 138, 162 },
	{ -231, -200, -168, -137, -105, -74, -42, -11, 20, 51, 83, 115, 146, 178 },
	{ -126, -102, -78, -54, -30, -6, 17, 41, 65, 88, 112, 136, 160, 184 },
	{ -200, -167, -134, -101, -68, -35, -2, 30, 63, 96, 129, 162, 195, 228 },
	{ -180, -155, -130, -106, -81, -57, -32, -7, 16, 41, 66, 90, 115, 140 },
	{ -143, -121, -99, -76, -54, -32, -10, 11, 34, 56, 78, 100, 122, 144 },
	{ -185, -152, -119, -86, -53, -20, 12, 45, 78, 111, 144, 176, 209, 242 },
	{ -126, -102, -77, -53, -28, -4, 20, 44, 69, 93, 118, 142, 167, 191 },
	{ -188, -162, -136, -110, -85, -59, -33, -7, 17, 43, 69, 94, 120, 146 },
	{ -165, -143, -121, -99, -77, -55, -33, -11, 11, 33, 55, 77, 99, 121 },
	{ -176, -146, -117, -88, -59, -30, 0, 28, 57, 86, 115, 145, 174, 203 },
};
static int_t<4,1> backbone_model5_conv1_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xb), C(0xd), C(0xa), C(0xf), C(0x4), C(0x1), C(0xc), C(0xe), C(0x1), },
	{ C(0x1), C(0xf), C(0x9), C(0x3), C(0x1), C(0xa), C(0x1), C(0x0), C(0xb), },
	{ C(0x9), C(0xc), C(0x3), C(0x9), C(0x0), C(0x4), C(0x0), C(0x3), C(0x3), },
	{ C(0xc), C(0x1), C(0x0), C(0x3), C(0x2), C(0xe), C(0x7), C(0xf), C(0xa), },
	{ C(0x6), C(0x4), C(0xd), C(0x2), C(0xf), C(0xe), C(0xb), C(0xd), C(0x0), },
	{ C(0xd), C(0xf), C(0xc), C(0xe), C(0x0), C(0xf), C(0xe), C(0xf), C(0xe), },
	{ C(0xb), C(0xd), C(0x6), C(0xb), C(0xd), C(0x5), C(0xc), C(0x1), C(0x7), },
	{ C(0x7), C(0x2), C(0x7), C(0x1), C(0xd), C(0x1), C(0x1), C(0xd), C(0x1), },
	{ C(0xd), C(0x3), C(0x7), C(0xf), C(0x0), C(0x4), C(0x0), C(0x0), C(0x2), },
	{ C(0xe), C(0x9), C(0xd), C(0xf), C(0xd), C(0x0), C(0xd), C(0xf), C(0x0), },
	{ C(0x0), C(0xc), C(0xd), C(0x5), C(0xc), C(0xd), C(0x5), C(0x5), C(0x6), },
	{ C(0xc), C(0x3), C(0x7), C(0xa), C(0xe), C(0x3), C(0xb), C(0xf), C(0x1), },
	{ C(0x1), C(0x2), C(0x3), C(0x1), C(0x1), C(0x2), C(0x1), C(0x2), C(0x3), },
	{ C(0x3), C(0x2), C(0x3), C(0x3), C(0x1), C(0x2), C(0x2), C(0x1), C(0x2), },
	{ C(0x9), C(0xe), C(0x2), C(0xc), C(0xe), C(0x1), C(0x1), C(0x1), C(0x0), },
	{ C(0xa), C(0x3), C(0x4), C(0xb), C(0x6), C(0x2), C(0xa), C(0x0), C(0x2), },
	{ C(0xd), C(0xa), C(0xa), C(0x2), C(0x6), C(0x1), C(0x0), C(0x5), C(0xe), },
	{ C(0x9), C(0xd), C(0xa), C(0x0), C(0x2), C(0x2), C(0x3), C(0x2), C(0x5), },
	{ C(0x5), C(0xf), C(0x9), C(0x3), C(0x1), C(0xc), C(0xe), C(0x1), C(0x3), },
	{ C(0xb), C(0xd), C(0x1), C(0xf), C(0x3), C(0x5), C(0xe), C(0x3), C(0x5), },
	{ C(0x5), C(0x1), C(0xc), C(0x4), C(0xf), C(0xd), C(0x3), C(0xe), C(0xa), },
	{ C(0x7), C(0x1), C(0xb), C(0x7), C(0x1), C(0xd), C(0x0), C(0xd), C(0xd), },
	{ C(0x9), C(0xf), C(0xe), C(0xe), C(0x3), C(0x1), C(0x1), C(0x4), C(0x1), },
	{ C(0x3), C(0x4), C(0x9), C(0x3), C(0x0), C(0xb), C(0xd), C(0xc), C(0xc), },
	{ C(0xb), C(0x0), C(0xc), C(0x0), C(0x6), C(0x2), C(0x1), C(0x7), C(0x5), },
	{ C(0xf), C(0xb), C(0xd), C(0x5), C(0xf), C(0xd), C(0x2), C(0xe), C(0xd), },
	{ C(0xe), C(0xc), C(0x1), C(0xc), C(0xf), C(0x7), C(0xf), C(0x1), C(0x7), },
	{ C(0xf), C(0xe), C(0xb), C(0x3), C(0xe), C(0x9), C(0x2), C(0x1), C(0xc), },
	{ C(0xf), C(0xf), C(0xd), C(0xf), C(0x0), C(0xd), C(0xd), C(0xf), C(0xe), },
	{ C(0x0), C(0xd), C(0xe), C(0x0), C(0xf), C(0x2), C(0x2), C(0x4), C(0x7), },
	{ C(0x2), C(0xf), C(0xf), C(0x4), C(0x0), C(0x0), C(0x7), C(0x1), C(0x0), },
	{ C(0xe), C(0x9), C(0xd), C(0x1), C(0xe), C(0x3), C(0x2), C(0x3), C(0x3), },
	{ C(0x0), C(0xc), C(0xf), C(0xe), C(0xc), C(0xb), C(0x2), C(0x4), C(0x5), },
	{ C(0x2), C(0x2), C(0xf), C(0x0), C(0x3), C(0x2), C(0xc), C(0xc), C(0xc), },
	{ C(0x7), C(0x6), C(0x1), C(0x1), C(0x1), C(0xe), C(0x0), C(0x1), C(0xf), },
	{ C(0x0), C(0xf), C(0xc), C(0x0), C(0xf), C(0xd), C(0x7), C(0x3), C(0x4), },
	{ C(0x9), C(0xf), C(0x5), C(0x0), C(0xd), C(0x3), C(0x5), C(0xe), C(0xf), },
	{ C(0xa), C(0x1), C(0x4), C(0x9), C(0xf), C(0x1), C(0xb), C(0x0), C(0x1), },
	{ C(0x2), C(0x1), C(0x2), C(0xf), C(0xc), C(0xa), C(0xf), C(0x1), C(0x0), },
	{ C(0xf), C(0xf), C(0xf), C(0x6), C(0x7), C(0x2), C(0xe), C(0x0), C(0x0), },
	{ C(0x1), C(0x3), C(0x3), C(0xf), C(0xe), C(0xe), C(0xe), C(0xd), C(0xb), },
	{ C(0x4), C(0xf), C(0x1), C(0x4), C(0x0), C(0xd), C(0x6), C(0x3), C(0x0), },
	{ C(0x6), C(0x2), C(0x5), C(0x1), C(0xe), C(0x0), C(0x4), C(0x0), C(0x2), },
	{ C(0x1), C(0x3), C(0x1), C(0x1), C(0xc), C(0xd), C(0xe), C(0x0), C(0xa), },
	{ C(0xe), C(0xf), C(0xc), C(0xf), C(0x0), C(0xe), C(0xf), C(0xf), C(0xe), },
	{ C(0xe), C(0x0), C(0x5), C(0x9), C(0xe), C(0x5), C(0x9), C(0xe), C(0x2), },
	{ C(0x1), C(0x2), C(0x2), C(0x1), C(0x2), C(0x1), C(0xb), C(0xa), C(0xb), },
	{ C(0x3), C(0x2), C(0x5), C(0x2), C(0x2), C(0x5), C(0xb), C(0xd), C(0xe), },
	{ C(0xb), C(0xa), C(0x3), C(0xc), C(0xf), C(0x5), C(0x1), C(0x4), C(0x4), },
	{ C(0xa), C(0xd), C(0xb), C(0xf), C(0x1), C(0xf), C(0x1), C(0x2), C(0x2), },
	{ C(0x3), C(0x2), C(0xd), C(0xd), C(0x5), C(0x0), C(0xb), C(0xe), C(0x4), },
	{ C(0xf), C(0x1), C(0xc), C(0x0), C(0x3), C(0xf), C(0xb), C(0xf), C(0xa), },
	{ C(0x7), C(0xf), C(0xf), C(0x7), C(0xf), C(0xd), C(0x1), C(0xd), C(0x0), },
	{ C(0xc), C(0x1), C(0x7), C(0xe), C(0x0), C(0x6), C(0xc), C(0xd), C(0x2), },
	{ C(0x2), C(0x0), C(0x3), C(0x2), C(0x1), C(0x4), C(0xf), C(0xf), C(0x2), },
	{ C(0xf), C(0xf), C(0x9), C(0x2), C(0x1), C(0xd), C(0x4), C(0x1), C(0xd), },
	{ C(0x1), C(0x2), C(0x1), C(0xe), C(0xf), C(0xe), C(0xb), C(0xc), C(0xa), },
	{ C(0xe), C(0xc), C(0x9), C(0x2), C(0x1), C(0x1), C(0x1), C(0x1), C(0x3), },
	{ C(0x4), C(0x5), C(0x3), C(0xe), C(0x0), C(0xd), C(0xb), C(0xc), C(0xa), },
	{ C(0x3), C(0x0), C(0x5), C(0xf), C(0xf), C(0x2), C(0x3), C(0x3), C(0x5), },
	{ C(0xc), C(0xd), C(0xd), C(0xd), C(0xf), C(0x2), C(0x5), C(0x7), C(0x7), },
	{ C(0x4), C(0xd), C(0x1), C(0x1), C(0x2), C(0x1), C(0x6), C(0x6), C(0x1), },
	{ C(0x3), C(0x6), C(0x6), C(0xd), C(0x2), C(0x4), C(0x9), C(0xc), C(0xd), },
	{ C(0xf), C(0x0), C(0xf), C(0x3), C(0x6), C(0x1), C(0x2), C(0x4), C(0x2), },
};
static int backbone_model5_conv1_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 10, 22, 34, 46, 58, 69, 81 },
	{ 6, 21, 36, 52, 67, 82, 97 },
	{ 7, 22, 36, 51, 66, 80, 95 },
	{ 10, 21, 32, 44, 55, 66, 77 },
	{ 7, 17, 26, 36, 46, 55, 65 },
	{ 5, 14, 24, 33, 43, 52, 61 },
	{ 10, 22, 34, 45, 57, 68, 80 },
	{ 1, 14, 27, 39, 52, 64, 77 },
	{ 2, 14, 27, 40, 53, 65, 78 },
	{ -14, -4, 5, 15, 25, 35, 45 },
	{ 8, 21, 33, 46, 59, 72, 84 },
	{ 4, 17, 31, 45, 58, 72, 85 },
	{ 5, 14, 24, 33, 43, 53, 62 },
	{ 8, 16, 24, 32, 40, 48, 56 },
	{ 8, 18, 29, 39, 49, 59, 69 },
	{ 7, 17, 28, 39, 49, 60, 71 },
	{ 4, 13, 21, 30, 39, 48, 57 },
	{ 3, 16, 29, 42, 55, 68, 81 },
	{ 7, 17, 26, 35, 45, 54, 63 },
	{ 7, 19, 31, 43, 55, 67, 79 },
	{ 7, 19, 31, 42, 54, 66, 78 },
	{ 8, 22, 36, 50, 64, 78, 92 },
	{ 0, 10, 20, 30, 41, 51, 61 },
	{ 10, 22, 35, 48, 60, 73, 86 },
	{ 15, 28, 41, 54, 67, 80, 94 },
	{ 12, 24, 35, 46, 58, 69, 80 },
	{ 3, 16, 29, 42, 55, 68, 80 },
	{ 0, 14, 28, 42, 57, 71, 85 },
	{ 2, 13, 24, 35, 46, 56, 67 },
	{ 1, 11, 22, 32, 42, 53, 63 },
	{ 5, 15, 25, 35, 44, 54, 64 },
	{ 3, 14, 25, 37, 48, 59, 71 },
	{ 10, 23, 36, 49, 61, 74, 87 },
	{ 5, 14, 22, 31, 40, 49, 58 },
	{ 0, 13, 25, 38, 50, 63, 76 },
	{ 0, 12, 24, 37, 50, 63, 76 },
	{ 3, 12, 21, 30, 39, 48, 57 },
	{ 7, 23, 38, 54, 70, 86, 102 },
	{ 7, 17, 27, 37, 47, 57, 67 },
	{ 8, 17, 27, 36, 45, 55, 64 },
	{ 1, 13, 24, 36, 48, 59, 71 },
	{ 1, 14, 28, 41, 55, 68, 81 },
	{ 17, 27, 38, 48, 58, 68, 78 },
	{ 6, 16, 26, 36, 46, 56, 66 },
	{ 1, 11, 22, 32, 43, 53, 63 },
	{ 6, 25, 44, 64, 83, 102, 122 },
	{ 0, 15, 30, 45, 59, 74, 89 },
	{ 6, 17, 28, 38, 49, 59, 70 },
	{ 5, 17, 28, 40, 51, 63, 74 },
	{ 7, 19, 30, 42, 54, 66, 77 },
	{ 5, 13, 21, 29, 37, 45, 53 },
	{ 11, 20, 29, 39, 48, 57, 67 },
	{ 4, 15, 27, 39, 51, 62, 74 },
	{ 7, 19, 31, 43, 55, 67, 79 },
	{ 4, 13, 21, 30, 38, 47, 56 },
	{ 1, 15, 29, 42, 56, 70, 83 },
	{ -12, 1, 15, 29, 44, 58, 72 },
	{ 7, 19, 30, 41, 53, 64, 75 },
	{ 7, 21, 35, 49, 63, 77, 92 },
	{ 10, 26, 43, 59, 76, 92, 109 },
	{ 17, 34, 51, 68, 85, 102, 119 },
	{ 13, 24, 35, 46, 58, 69, 80 },
	{ 7, 24, 40, 57, 73, 90, 106 },
	{ 10, 21, 31, 41, 52, 62, 72 },
};
static int_t<4,64> backbone_model5_conv2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xcf00ed2f2fdf00d2L, 0xf2112aafefcd1130L, 0x42fdf00fdfd04111L, 0x0ad21f400035461dL) },
	{ C64(0x02a5021120f240eeL, 0x22d0ef0fe3ff0232L, 0xf21e11d10ee02211L, 0x3ee0ef01ff1fa1edL) },
	{ C64(0x0ffb12121102f462L, 0x02f1d7f03fe10fe4L, 0x312ff0105323c31aL, 0x31f0e2e00b121231L) },
	{ C64(0xd120e0120fd162ffL, 0x03f21113e2cf430dL, 0x13fffffffff23ef2L, 0xfea1e026dd6d10ceL) },
	{ C64(0xf2e1322200f02f2dL, 0x1f1103211f30e1f0L, 0x302f2ef3fcae0101L, 0x2e21d061000f03ffL) },
	{ C64(0xf0f631fd0b3e13d3L, 0x2f0b0f4203024041L, 0xe1fdfe310e0122f0L, 0x45fe015023df4ff2L) },
	{ C64(0xb31e0425f1112d41L, 0x2fe1f230212e2ffeL, 0xff2011ef1e01e23cL, 0x02220dc0ee3f1e01L) },
	{ C64(0x322504f4c001e100L, 0xdd03d0013fe0100fL, 0x02ee16e420effff0L, 0xf151f10e00f100a0L) },
	{ C64(0x22a5d23ff3c1013aL, 0x2420e06200f31003L, 0xdee2e10141163e22L, 0x3f2e0012133bc24cL) },
	{ C64(0xa20fa210de1f3e1eL, 0x21f0d2f0332cd222L, 0x5521eed143e1d130L, 0xd2a2cff2014211a1L) },
	{ C64(0xd32fbefddeed02afL, 0x322c32c0ff10a2f0L, 0x22e6b1152aeee0b2L, 0x009ef0ef60d320a0L) },
	{ C64(0x1e42250f6345e011L, 0x202efca1ff42fdd1L, 0xf2e2ff06fd4d0e0fL, 0x115f30f04d30d120L) },
	{ C64(0x12bf1ff0e0dfb01eL, 0x31701f231e302f03L, 0xeaf1f522c00d21f1L, 0x621e0f0e23e1d322L) },
	{ C64(0x210f4e16022f4ff1L, 0x0ff11c1ab4fe621eL, 0x0dce0dffe0102ee2L, 0x2e3140f2006ef132L) },
	{ C64(0xff2edf5022004501L, 0xf00d050f112d0a06L, 0x041fd1255433d44eL, 0x2ef03fdf50e35e07L) },
	{ C64(0xd044c2160029ded1L, 0x2133edc12f61e10fL, 0xf4ec05243dc11fe2L, 0x34353df0053de421L) },
	{ C64(0xec1cd1f000f10220L, 0xb0e2ee02c200ea22L, 0xff10ff0d23020ff1L, 0x0ff201ed01dfee30L) },
	{ C64(0x005301401033e903L, 0x0221e2bf2f012f25L, 0xb0ee2fc3a2fb2f23L, 0xd11201ee2512d2f0L) },
	{ C64(0x200de0202f23210fL, 0x202f1130ae50121eL, 0x110fb91bd03f1f21L, 0x00912133e2011211L) },
	{ C64(0x0212e0dfbd409e0fL, 0xd33c2df22011111fL, 0x1e0f54f0f3301de0L, 0x211de0011401f35dL) },
	{ C64(0xef1e61dde4f2ee7dL, 0x3026ee3f41cd12fcL, 0xe6c62ef0aefccbedL, 0xbf3ece00defdd1ccL) },
	{ C64(0x3334402ce3ed34d1L, 0x002f3020e3ff3d0cL, 0x029012f5df1c2ee3L, 0x1a6cedff2ce13311L) },
	{ C64(0x1001004ff1f5001fL, 0x11131f21562f2ff5L, 0xf0f330f0033fff00L, 0xfeb210ee2d0f0132L) },
	{ C64(0x1501e1f1c39fff21L, 0x1122506133144ffeL, 0xde33f0621211002eL, 0xa24e3ae410fb3903L) },
	{ C64(0xeb6a3ef2f12ee1edL, 0xceff11ffeeed1f0dL, 0xfff03e1d11feeeeeL, 0xee1f194ff1ef2ff6L) },
	{ C64(0x06d5f4f2efee9ebfL, 0xde6dbdfc0b21deebL, 0xd0dd14f6ea11ffacL, 0x5f6e1dbf0000d315L) },
	{ C64(0xed2dc2e2edee22c0L, 0xe004eaf3f10ff51eL, 0x1c20ee000dde1fe0L, 0xdedee2205f5e2ecfL) },
	{ C64(0xe1defffee10e14d0L, 0x30e1d1210f130f10L, 0x1ff1def01f01f20eL, 0x3eef010002f1ef1fL) },
	{ C64(0x013e2e1210f15004L, 0x1fd2e4de10ff0212L, 0xf020101deefaf021L, 0xb0d40c0dee15edd0L) },
	{ C64(0x5e232f3a33d32deeL, 0xd2e11410f11db0feL, 0xf0f15e12f5211f42L, 0xfc30ed1effef1104L) },
	{ C64(0x0200f0a32b30f01eL, 0xef110e112f611f2dL, 0xf3ffbef321fef2feL, 0x10a3d0dff3d102fcL) },
	{ C64(0x02c10f0ffd00d9edL, 0xd110404a1cdd035eL, 0x33f06fd0ade6f0c2L, 0x2c0fc324e402d6d0L) },
	{ C64(0x0d222c21f11b12e1L, 0xffbd12df91a01f20L, 0x2fdf472e13c03301L, 0x30412120ef000c12L) },
	{ C64(0xdcfbddb34a1d2d2fL, 0xbf3f2ac1fbf2f20dL, 0xfd5ed2ffd291324fL, 0x22cfffbfad1c013eL) },
	{ C64(0x4323f046e0d10112L, 0xf302f150301263ffL, 0xf02e0fa4f24fde5eL, 0xa33deac11d304e31L) },
	{ C64(0x1d3b3e32f0e1f3ffL, 0x1f0fe0114ef10ebfL, 0xe2200e1250e12511L, 0xee011f4e2ef23e04L) },
	{ C64(0xf03551512231d105L, 0x0fef01dd121f102fL, 0xf0df11e00afe03e0L, 0xed6c3e0e3df34151L) },
	{ C64(0x02f1f1d10041e1feL, 0x2e1002eeb20000feL, 0x21f0c2f00143ebfdL, 0x11eff00ff1fef25dL) },
	{ C64(0xeffe3044ef0015d4L, 0x14eeef10120ff1feL, 0xffb0efde4fff1740L, 0xe1f2fd322cf5feeeL) },
	{ C64(0xc401b002fc2fddfdL, 0xcfee62fbe1cd203fL, 0x60112ede00f3f0f1L, 0xf1d11f07dff140deL) },
	{ C64(0x002e11fe1dff1d1fL, 0xec104f1d110eff1fL, 0xd44e0e52c0ddd0f0L, 0x0f110fc00db25e16L) },
	{ C64(0x1d0212336213fef1L, 0xe301bfeef2ffe0e0L, 0xe3f01fd220e1fe11L, 0x232e3333002edf2fL) },
	{ C64(0x01e1eff2f2000feeL, 0xdefd013a00ec062cL, 0x43b05fefe304d026L, 0x1e0322540d0f3322L) },
	{ C64(0xe1e13110122171e2L, 0x3f0036f0100ee520L, 0x10010f0f0010310dL, 0x000e2f00f9f10100L) },
	{ C64(0x2120effe401b0003L, 0x1f0007f1f010f0f0L, 0x330fe21121b0b13bL, 0xc4e022e30f013c10L) },
	{ C64(0x0d231233def13012L, 0xdff0e0e1121b110cL, 0xf40112a02001523fL, 0x1011ed0f1f124330L) },
	{ C64(0x03f40b0ef402b120L, 0x35011110420f01e3L, 0x1cb1e1f1f1fe030eL, 0x1111f1122553cf2dL) },
	{ C64(0x2d0e0fd0c210f3a0L, 0xffd1ead5f2c021f0L, 0x1d0f0f1112320214L, 0x0e24227f51b01d3eL) },
	{ C64(0x12f21230a2d11efdL, 0x5ff22e21210f1021L, 0xf2002100de2f1aa1L, 0xeb6da0ce1a2d30f2L) },
	{ C64(0xf04020e100411ef1L, 0x01f213e1e11ff2e0L, 0x122020c0a120d111L, 0xf2022f1efce2021fL) },
	{ C64(0x5196202222c31324L, 0x3620b0e210042f35L, 0xff2fe1a1c31a1425L, 0xff302ce22c23a21aL) },
	{ C64(0x33f2b2e0201a01e2L, 0x2ee10ef1fe441e01L, 0x0f3e20feefaf0000L, 0xe33022f2d2210e1dL) },
	{ C64(0x1100a1c5f22401b1L, 0x2052fd21ea020f2eL, 0xefebaef22f622122L, 0x3ff401121420f19eL) },
	{ C64(0x57261414ef5ffdf0L, 0xf1032320102232ffL, 0xfeffd0022ff01e22L, 0x010131241541101fL) },
	{ C64(0xe22305b04b0b63f3L, 0xfbd5e2e32c11033dL, 0x626fe11f51bf3334L, 0xe293f431eef52efdL) },
	{ C64(0xe21110cf10003f1dL, 0xde52f04e653d0050L, 0x15e442e52f2fdbf1L, 0xf1e2fcffdffd2110L) },
	{ C64(0x41e1f001002f1dfcL, 0x00ee2f0f0d010101L, 0x52ff0e2f0ee2df06L, 0x2e00f044d103e401L) },
	{ C64(0x1f12f1e10f1ffc1bL, 0xf2211ff1f10f2d20L, 0x16fd2111e20229d0L, 0x4e0fff03f33af321L) },
	{ C64(0xf10fd03300123f20L, 0x110000e003ea1202L, 0x221020d212f2d12fL, 0x2d22ef1309223110L) },
	{ C64(0x0414efdf0300b2a5L, 0x4ffff026d32042c2L, 0x0eefd3e00e24e000L, 0x1d5be2cb2ef2ec0eL) },
	{ C64(0x6130230f1450e0e1L, 0xfdff2f4effe400b2L, 0x2fe01f323e42ee03L, 0x1d43661e42ee1f12L) },
	{ C64(0x11f20141dee0b0f4L, 0xdeff3c21040fef27L, 0xfff30effffeede02L, 0xfefe3132001e0e6eL) },
	{ C64(0xff4fdc0c1c22f1f3L, 0xf4d14ec41c151f23L, 0x021cda1edfd13401L, 0xfda100f2f0f240feL) },
	{ C64(0xe10213e41c2bfc0cL, 0xcc011af21260cd2aL, 0x1dd0d0623fb04ffcL, 0x6bae3efe00e1efceL) },
};
static int backbone_model5_conv2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -105, -89, -72, -56, -40, -24, -7, 8, 24, 40, 56, 73, 89, 105 },
	{ -84, -70, -57, -44, -31, -18, -4, 8, 21, 34, 47, 61, 74, 87 },
	{ -89, -73, -58, -43, -28, -13, 2, 17, 32, 47, 62, 78, 93, 108 },
	{ -116, -97, -78, -59, -41, -22, -3, 15, 34, 53, 72, 91, 110, 128 },
	{ -84, -70, -55, -41, -27, -12, 1, 15, 29, 44, 58, 72, 87, 101 },
	{ -143, -123, -103, -83, -63, -43, -23, -3, 16, 36, 56, 76, 96, 116 },
	{ -102, -85, -69, -52, -35, -18, -1, 14, 31, 48, 65, 81, 98, 115 },
	{ -86, -73, -59, -46, -32, -19, -5, 7, 21, 34, 48, 61, 75, 88 },
	{ -92, -76, -59, -43, -26, -10, 6, 22, 39, 56, 72, 89, 105, 122 },
	{ -125, -106, -86, -67, -47, -27, -8, 11, 30, 50, 69, 89, 108, 128 },
	{ -130, -113, -96, -80, -63, -46, -30, -13, 3, 19, 36, 53, 69, 86 },
	{ -100, -82, -65, -48, -30, -13, 4, 21, 38, 56, 73, 90, 108, 125 },
	{ -90, -75, -59, -43, -28, -12, 2, 18, 34, 49, 65, 80, 96, 111 },
	{ -91, -76, -61, -46, -31, -16, -1, 14, 29, 44, 59, 74, 89, 104 },
	{ -111, -92, -73, -53, -34, -15, 4, 23, 42, 61, 81, 100, 119, 139 },
	{ -111, -92, -74, -55, -37, -18, 0, 18, 36, 55, 73, 92, 110, 129 },
	{ -122, -104, -86, -68, -50, -32, -14, 2, 20, 38, 56, 74, 92, 110 },
	{ -97, -82, -66, -50, -34, -18, -2, 12, 28, 44, 60, 76, 92, 107 },
	{ -73, -60, -48, -36, -24, -12, 0, 11, 23, 35, 47, 59, 71, 83 },
	{ -114, -95, -77, -59, -40, -22, -3, 14, 33, 51, 70, 88, 107, 125 },
	{ -154, -133, -112, -90, -69, -48, -27, -5, 15, 36, 57, 79, 100, 121 },
	{ -121, -103, -86, -69, -51, -34, -17, 0, 17, 34, 51, 69, 86, 103 },
	{ -117, -97, -77, -58, -38, -18, 0, 20, 40, 60, 79, 99, 119, 139 },
	{ -100, -84, -67, -50, -34, -17, 0, 15, 32, 49, 65, 82, 99, 115 },
	{ -110, -95, -80, -65, -51, -36, -21, -6, 8, 23, 38, 53, 68, 83 },
	{ -154, -132, -110, -88, -67, -45, -23, -1, 20, 42, 63, 85, 107, 129 },
	{ -112, -96, -81, -65, -49, -34, -18, -3, 12, 27, 43, 58, 74, 89 },
	{ -97, -83, -69, -54, -40, -26, -12, 1, 15, 29, 43, 57, 71, 85 },
	{ -133, -113, -93, -74, -54, -34, -14, 4, 24, 44, 63, 83, 103, 123 },
	{ -97, -83, -68, -53, -38, -24, -9, 5, 20, 35, 49, 64, 79, 94 },
	{ -124, -106, -88, -71, -53, -35, -18, 0, 17, 34, 52, 70, 87, 105 },
	{ -120, -102, -84, -66, -49, -31, -13, 4, 22, 39, 57, 75, 93, 111 },
	{ -111, -94, -77, -60, -43, -26, -9, 7, 23, 40, 57, 74, 91, 108 },
	{ -150, -129, -109, -88, -68, -47, -27, -6, 13, 34, 54, 75, 95, 116 },
	{ -86, -71, -57, -42, -27, -12, 2, 17, 32, 46, 61, 76, 91, 106 },
	{ -88, -74, -60, -47, -33, -19, -5, 7, 21, 35, 49, 62, 76, 90 },
	{ -120, -101, -81, -62, -43, -23, -4, 14, 33, 53, 72, 91, 111, 130 },
	{ -103, -87, -71, -56, -40, -24, -9, 6, 22, 37, 53, 69, 85, 100 },
	{ -107, -91, -74, -57, -40, -23, -6, 10, 27, 44, 60, 77, 94, 111 },
	{ -111, -95, -79, -62, -46, -30, -13, 2, 18, 35, 51, 67, 84, 100 },
	{ -106, -91, -77, -63, -49, -35, -21, -7, 7, 21, 35, 49, 63, 77 },
	{ -83, -69, -55, -40, -26, -11, 2, 17, 31, 46, 60, 74, 89, 103 },
	{ -96, -80, -65, -49, -33, -17, -1, 14, 30, 46, 61, 77, 93, 109 },
	{ -101, -85, -69, -54, -38, -22, -7, 8, 24, 40, 55, 71, 87, 102 },
	{ -134, -115, -95, -76, -57, -37, -18, 0, 19, 39, 58, 77, 97, 116 },
	{ -97, -81, -65, -49, -33, -17, -1, 14, 31, 47, 63, 79, 95, 111 },
	{ -98, -81, -65, -48, -31, -15, 1, 18, 35, 51, 68, 85, 101, 118 },
	{ -100, -83, -66, -48, -31, -14, 2, 20, 37, 54, 71, 89, 106, 123 },
	{ -124, -107, -89, -71, -53, -35, -18, 0, 17, 35, 53, 70, 88, 106 },
	{ -108, -91, -74, -57, -40, -23, -6, 10, 27, 45, 62, 79, 96, 113 },
	{ -73, -59, -45, -31, -17, -3, 10, 23, 37, 51, 65, 79, 93, 107 },
	{ -96, -81, -66, -51, -35, -20, -5, 9, 25, 40, 55, 71, 86, 101 },
	{ -98, -82, -66, -49, -33, -17, -1, 14, 30, 47, 63, 79, 95, 111 },
	{ -97, -79, -61, -43, -26, -8, 9, 27, 44, 62, 80, 98, 115, 133 },
	{ -124, -104, -83, -63, -42, -21, -1, 19, 39, 60, 80, 101, 121, 142 },
	{ -107, -90, -73, -56, -39, -22, -5, 11, 27, 44, 61, 78, 95, 112 },
	{ -97, -82, -67, -51, -36, -21, -5, 9, 25, 40, 55, 71, 86, 101 },
	{ -110, -93, -75, -57, -40, -22, -5, 12, 30, 47, 65, 82, 100, 118 },
	{ -102, -85, -68, -51, -33, -16, 0, 17, 35, 52, 69, 87, 104, 121 },
	{ -133, -113, -93, -73, -52, -32, -12, 7, 27, 47, 68, 88, 108, 128 },
	{ -87, -71, -55, -40, -24, -8, 7, 23, 39, 54, 70, 86, 102, 118 },
	{ -109, -92, -75, -58, -40, -23, -6, 10, 27, 44, 61, 78, 95, 112 },
	{ -124, -106, -87, -69, -50, -32, -13, 4, 22, 41, 59, 78, 96, 115 },
	{ -128, -110, -92, -74, -57, -39, -21, -3, 14, 32, 49, 67, 85, 103 },
};
static int_t<4,1> backbone_model5_conv2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0x6), C(0x3), C(0x3), C(0x5), C(0xf), C(0xe), C(0x4), C(0xf), C(0xe), },
	{ C(0x6), C(0x3), C(0xd), C(0x0), C(0xa), C(0xf), C(0xe), C(0xe), C(0x0), },
	{ C(0xc), C(0xf), C(0xd), C(0xb), C(0xf), C(0x9), C(0x5), C(0x6), C(0xd), },
	{ C(0xe), C(0x2), C(0x7), C(0xe), C(0xf), C(0x2), C(0x1), C(0x1), C(0x6), },
	{ C(0xa), C(0x0), C(0x3), C(0xb), C(0x1), C(0x2), C(0xd), C(0x0), C(0xf), },
	{ C(0x9), C(0x9), C(0x9), C(0x2), C(0x0), C(0x2), C(0x6), C(0x4), C(0x7), },
	{ C(0xc), C(0xc), C(0xe), C(0x0), C(0x3), C(0x1), C(0xc), C(0x0), C(0xd), },
	{ C(0xd), C(0xf), C(0x6), C(0xe), C(0xf), C(0x4), C(0x4), C(0x0), C(0x5), },
	{ C(0xf), C(0xf), C(0xf), C(0x2), C(0x0), C(0x9), C(0xd), C(0xe), C(0x9), },
	{ C(0xe), C(0xb), C(0xf), C(0x0), C(0xe), C(0xd), C(0xe), C(0xb), C(0xc), },
	{ C(0x4), C(0x1), C(0x5), C(0x1), C(0x0), C(0x0), C(0x4), C(0x2), C(0x4), },
	{ C(0xa), C(0x0), C(0x0), C(0xc), C(0x0), C(0x1), C(0xa), C(0xe), C(0xe), },
	{ C(0xc), C(0x0), C(0x0), C(0x0), C(0x2), C(0x1), C(0x9), C(0xc), C(0xd), },
	{ C(0x0), C(0x1), C(0xe), C(0x0), C(0x1), C(0x0), C(0xa), C(0xd), C(0xa), },
	{ C(0x6), C(0x2), C(0x7), C(0x2), C(0x0), C(0x3), C(0x0), C(0x0), C(0x2), },
	{ C(0xa), C(0x0), C(0xe), C(0xc), C(0x1), C(0x1), C(0xb), C(0xf), C(0xd), },
	{ C(0xd), C(0xb), C(0xc), C(0xf), C(0xe), C(0xe), C(0x1), C(0x0), C(0x0), },
	{ C(0x0), C(0xf), C(0xe), C(0x0), C(0xd), C(0xc), C(0x1), C(0xb), C(0x9), },
	{ C(0xf), C(0xf), C(0x9), C(0x0), C(0xf), C(0x9), C(0xe), C(0x5), C(0x0), },
	{ C(0x1), C(0x0), C(0xa), C(0x0), C(0xf), C(0xc), C(0x2), C(0x0), C(0xa), },
	{ C(0x0), C(0x1), C(0x4), C(0x0), C(0x1), C(0x3), C(0x3), C(0x3), C(0x6), },
	{ C(0xf), C(0x1), C(0xf), C(0x0), C(0xf), C(0xe), C(0x9), C(0xc), C(0xc), },
	{ C(0xe), C(0xe), C(0xf), C(0xe), C(0xe), C(0xf), C(0xe), C(0xe), C(0xf), },
	{ C(0xe), C(0xe), C(0xe), C(0x0), C(0xb), C(0xe), C(0xd), C(0xc), C(0xb), },
	{ C(0x0), C(0x1), C(0x2), C(0x0), C(0x6), C(0x5), C(0xa), C(0xf), C(0xe), },
	{ C(0x2), C(0x3), C(0x4), C(0x1), C(0x1), C(0x3), C(0x2), C(0x2), C(0x4), },
	{ C(0x7), C(0x6), C(0x7), C(0x1), C(0xf), C(0xf), C(0xe), C(0xf), C(0xd), },
	{ C(0xb), C(0x0), C(0x5), C(0x0), C(0x0), C(0x4), C(0x2), C(0xf), C(0x1), },
	{ C(0x3), C(0x1), C(0x0), C(0x3), C(0x1), C(0x1), C(0x6), C(0x1), C(0x0), },
	{ C(0x5), C(0x4), C(0x4), C(0xb), C(0x0), C(0x0), C(0xa), C(0xc), C(0xc), },
	{ C(0x2), C(0x0), C(0x5), C(0x3), C(0x1), C(0x2), C(0xf), C(0x0), C(0x4), },
	{ C(0x5), C(0x7), C(0x3), C(0x1), C(0x5), C(0x2), C(0xf), C(0x3), C(0x0), },
	{ C(0xf), C(0x4), C(0x0), C(0x9), C(0xb), C(0xf), C(0xe), C(0x5), C(0xe), },
	{ C(0x6), C(0x2), C(0x5), C(0x3), C(0xf), C(0x0), C(0x2), C(0xf), C(0x1), },
	{ C(0xc), C(0x0), C(0x0), C(0xa), C(0xf), C(0xf), C(0xa), C(0xb), C(0xe), },
	{ C(0xd), C(0xb), C(0xb), C(0x1), C(0x4), C(0x0), C(0xf), C(0x5), C(0x1), },
	{ C(0xb), C(0xe), C(0xd), C(0xd), C(0x0), C(0xf), C(0xe), C(0x0), C(0xe), },
	{ C(0x1), C(0x0), C(0xe), C(0x1), C(0xf), C(0xb), C(0xf), C(0x0), C(0xb), },
	{ C(0xf), C(0x0), C(0xf), C(0x2), C(0x0), C(0x2), C(0x5), C(0x3), C(0x6), },
	{ C(0x1), C(0x4), C(0x7), C(0xf), C(0xd), C(0x2), C(0x1), C(0x2), C(0x2), },
	{ C(0x2), C(0xf), C(0xc), C(0x3), C(0xe), C(0xc), C(0x6), C(0x4), C(0xc), },
	{ C(0x0), C(0x2), C(0x6), C(0xd), C(0x0), C(0x2), C(0xb), C(0xd), C(0xd), },
	{ C(0x6), C(0x6), C(0xa), C(0x2), C(0x4), C(0xd), C(0xe), C(0xd), C(0xc), },
	{ C(0x5), C(0x2), C(0x9), C(0x2), C(0x2), C(0xd), C(0x4), C(0x0), C(0x9), },
	{ C(0xa), C(0xd), C(0xb), C(0xb), C(0x2), C(0x2), C(0xf), C(0x4), C(0x3), },
	{ C(0x0), C(0x4), C(0xf), C(0xe), C(0x1), C(0xd), C(0x9), C(0xc), C(0xf), },
	{ C(0x0), C(0x1), C(0x1), C(0xe), C(0x0), C(0xd), C(0xd), C(0xd), C(0x9), },
	{ C(0x9), C(0xd), C(0x9), C(0x0), C(0x2), C(0x1), C(0x0), C(0x1), C(0xf), },
	{ C(0xa), C(0xc), C(0x9), C(0x0), C(0x2), C(0x1), C(0x0), C(0x2), C(0x1), },
	{ C(0x0), C(0xf), C(0xe), C(0x2), C(0x5), C(0xe), C(0x5), C(0x1), C(0xc), },
	{ C(0x0), C(0x4), C(0xe), C(0xe), C(0x1), C(0xe), C(0x9), C(0xa), C(0xb), },
	{ C(0x1), C(0x2), C(0x2), C(0x9), C(0xf), C(0x3), C(0xa), C(0xd), C(0xf), },
	{ C(0x1), C(0xf), C(0xb), C(0x4), C(0xe), C(0x9), C(0xf), C(0xf), C(0xa), },
	{ C(0x2), C(0x1), C(0x0), C(0x5), C(0x3), C(0x1), C(0x5), C(0x2), C(0x0), },
	{ C(0xc), C(0xf), C(0xe), C(0xd), C(0x1), C(0xd), C(0xd), C(0x0), C(0xc), },
	{ C(0xc), C(0xc), C(0xc), C(0x1), C(0xf), C(0x1), C(0x7), C(0x6), C(0x6), },
	{ C(0xf), C(0xa), C(0xc), C(0xd), C(0x6), C(0x5), C(0xe), C(0x6), C(0x1), },
	{ C(0xd), C(0xf), C(0x0), C(0xb), C(0xe), C(0xf), C(0xb), C(0xf), C(0xf), },
	{ C(0x0), C(0xd), C(0xd), C(0x0), C(0xc), C(0x0), C(0x0), C(0xb), C(0xf), },
	{ C(0x3), C(0x1), C(0x0), C(0x4), C(0x1), C(0x3), C(0x4), C(0x1), C(0x4), },
	{ C(0x6), C(0x7), C(0x5), C(0x5), C(0xf), C(0xd), C(0xd), C(0xc), C(0xc), },
	{ C(0x2), C(0x4), C(0x6), C(0xc), C(0x1), C(0x6), C(0xc), C(0x0), C(0x3), },
	{ C(0xd), C(0xe), C(0x3), C(0xf), C(0xe), C(0x3), C(0x6), C(0x2), C(0x6), },
	{ C(0x5), C(0x2), C(0x0), C(0x4), C(0x0), C(0x2), C(0x7), C(0x1), C(0xe), },
};
static int backbone_model5_conv2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 3, 18, 33, 48, 63, 78, 93 },
	{ 8, 20, 31, 43, 55, 66, 78 },
	{ 4, 17, 30, 43, 56, 69, 83 },
	{ 3, 16, 29, 43, 56, 69, 82 },
	{ 4, 16, 27, 39, 51, 63, 75 },
	{ 8, 20, 32, 44, 57, 69, 81 },
	{ 6, 16, 26, 36, 46, 56, 66 },
	{ 1, 13, 26, 38, 51, 63, 76 },
	{ 10, 22, 34, 46, 58, 70, 83 },
	{ 9, 22, 36, 49, 63, 76, 90 },
	{ 12, 24, 36, 48, 60, 72, 84 },
	{ 7, 24, 41, 58, 75, 92, 109 },
	{ 13, 26, 40, 53, 66, 79, 93 },
	{ 4, 19, 33, 47, 62, 76, 90 },
	{ 14, 28, 43, 57, 72, 86, 101 },
	{ 5, 18, 30, 43, 56, 69, 82 },
	{ 9, 23, 36, 49, 62, 75, 89 },
	{ 12, 25, 37, 50, 62, 75, 87 },
	{ 4, 17, 30, 44, 57, 70, 84 },
	{ 5, 17, 30, 42, 54, 67, 79 },
	{ 2, 16, 29, 43, 57, 70, 84 },
	{ -2, 11, 26, 41, 56, 71, 86 },
	{ 0, 12, 23, 35, 47, 58, 70 },
	{ 9, 22, 34, 47, 59, 72, 84 },
	{ 6, 15, 24, 33, 42, 51, 60 },
	{ 4, 16, 29, 41, 53, 66, 78 },
	{ 6, 19, 33, 47, 60, 74, 87 },
	{ 3, 12, 20, 28, 36, 44, 52 },
	{ 6, 16, 26, 35, 45, 55, 65 },
	{ 1, 16, 31, 46, 61, 76, 91 },
	{ 7, 21, 34, 48, 62, 76, 89 },
	{ 11, 26, 42, 57, 73, 89, 104 },
	{ 4, 12, 21, 29, 38, 47, 55 },
	{ 0, 15, 29, 43, 57, 72, 86 },
	{ 8, 26, 44, 61, 79, 97, 115 },
	{ 9, 19, 29, 40, 50, 60, 71 },
	{ 2, 16, 31, 45, 60, 74, 89 },
	{ 5, 15, 26, 36, 47, 57, 67 },
	{ 10, 20, 29, 39, 49, 59, 68 },
	{ 5, 17, 29, 40, 52, 63, 75 },
	{ 9, 22, 35, 48, 60, 73, 86 },
	{ 6, 16, 26, 35, 45, 54, 64 },
	{ 13, 26, 39, 52, 65, 78, 91 },
	{ 10, 23, 35, 48, 61, 73, 86 },
	{ -2, 8, 20, 32, 44, 56, 67 },
	{ 3, 13, 23, 34, 44, 54, 65 },
	{ 7, 17, 28, 38, 49, 59, 70 },
	{ 7, 21, 35, 49, 62, 76, 90 },
	{ 0, 13, 25, 37, 50, 62, 74 },
	{ 7, 16, 26, 35, 44, 54, 63 },
	{ 17, 33, 48, 64, 80, 95, 111 },
	{ 8, 22, 37, 52, 66, 81, 96 },
	{ 6, 24, 42, 59, 77, 95, 113 },
	{ 11, 26, 40, 55, 69, 84, 98 },
	{ 2, 16, 29, 42, 56, 69, 82 },
	{ 1, 17, 32, 48, 63, 79, 94 },
	{ 12, 24, 35, 47, 58, 70, 82 },
	{ 8, 17, 27, 36, 45, 55, 64 },
	{ 5, 13, 22, 30, 38, 47, 55 },
	{ 3, 14, 25, 37, 48, 60, 71 },
	{ 7, 22, 37, 52, 67, 82, 98 },
	{ 0, 12, 26, 40, 53, 67, 80 },
	{ 1, 14, 27, 40, 53, 66, 79 },
	{ 0, 15, 29, 44, 59, 74, 89 },
};
static int_t<4,64> neck_lateral_convs_0_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xd1cf74cd20411052L, 0x02b4f11dbf12a33cL, 0x7dd3201e530b0fdfL, 0x02323f210113150fL) },
	{ C64(0xfc4da1c0f12dd125L, 0x022120effd02e3c1L, 0xeff0bcdfc5ccb1f0L, 0xb42c033fd072c6dbL) },
	{ C64(0x3e33945f2d295e43L, 0x22f12edace030630L, 0x11d55a03d0a13274L, 0x4d0e2d43f0e103d5L) },
	{ C64(0x2535d01fc92fae04L, 0x5d120c1f4f1de140L, 0xf4ce31d1e1b51c54L, 0x1c6ef1a4262e1001L) },
	{ C64(0xeff251634d30dfd3L, 0xfe03fe3a4f4e211dL, 0x6c131e2f32133222L, 0xa0effe59f2f4ed1fL) },
	{ C64(0xff2f3ce04a0ccb9dL, 0xe2e3ffb1efcad630L, 0xe15ae302a10fe0d0L, 0x7f006ff6e1200023L) },
	{ C64(0x612e1112b2feb34bL, 0xe20f510cfe201204L, 0x022b512d21fc13d2L, 0x40c026f12f221d03L) },
	{ C64(0x3914e160fabcf02cL, 0xfd1e05d0123050a1L, 0x51350c009a0f6b0cL, 0x20edb2fca0ad3b5cL) },
	{ C64(0x271c32401cac031fL, 0x0e11fe4f41291effL, 0x14d5fd0ddfe4127eL, 0x0cd01f341f241af2L) },
	{ C64(0xf1e152007d0133f2L, 0xe111000e1332e0ffL, 0x5ff5f001e011cf20L, 0x30c1702dd2000210L) },
	{ C64(0x034d1050c65f4d11L, 0x0f0fd3bdfd0343b2L, 0xfd00be12fd6e1adeL, 0x17d0e13f0bff2105L) },
	{ C64(0x4311d22ffef330ccL, 0x372ad3e20ab0dbc1L, 0xccbc11234f1e0d93L, 0xfda21ef4012e020fL) },
	{ C64(0xce12bfe00ff2bdd1L, 0xe21044ea00714ec0L, 0xae01f21cb50fe45cL, 0x4c1f520f045fc6ffL) },
	{ C64(0x2daf9da231d223a3L, 0x03e0fa31e4b20b11L, 0x3143a4f9f117a373L, 0x9d2fef4ad00ec7d7L) },
	{ C64(0x1f11102030113e11L, 0xf210103f32121111L, 0x4024130140110220L, 0x52422e17e1f13232L) },
	{ C64(0x352e314e1ebe5fb9L, 0x505be0060f16bd1fL, 0x6f571c1379a19aceL, 0xf4efdae5edaee9d4L) },
	{ C64(0x06d6be3e04ee61f2L, 0x4c0b1120c007ebc1L, 0x1ef42cfffebedd50L, 0xd3ebfc2def0dc433L) },
	{ C64(0x0fd2be21e02c023fL, 0xfc113e0e333e0e0fL, 0xb21f3ae0fff1012eL, 0xcd1faf0f4201fe2dL) },
	{ C64(0xf513a12f20a07222L, 0x423d1300e226f0d2L, 0x9ff5c1fecf51b230L, 0xe22eb02df010e0f2L) },
	{ C64(0x273ee03f141f3140L, 0xf6514110003012f3L, 0x2112233754101241L, 0x726d4603d26112e4L) },
	{ C64(0xab1a2e511fa233c3L, 0xec3e40532edc0ecdL, 0x0ff5cefd4e1dfea4L, 0xd092004fe912effaL) },
	{ C64(0x3f43d12e03f46ed0L, 0x54ff9c4f1f12f2a2L, 0x1dff063ca153fb22L, 0xf13f2f1deeccfa05L) },
	{ C64(0x76fee2fdedc3573dL, 0x35e1f01f0b2d1d0fL, 0x0109363bcf23164cL, 0x1ac1e6291ee0e0f1L) },
	{ C64(0xf51f53ff341d24ebL, 0x00e20e211dffc300L, 0xfffdd32e416cf1c0L, 0x233112620020010fL) },
	{ C64(0xf760e110360e2f43L, 0x0303115f2013b202L, 0x1e14e029314fc214L, 0x217c20572f2203c3L) },
	{ C64(0x3011c00e0013ee9dL, 0x1300bef010fc0200L, 0xd0bdf2f60f420010L, 0x21320df440e31614L) },
	{ C64(0x6fcf2e21c7ead3ddL, 0xd5f4144eff2e2101L, 0x2f2a0230722d23efL, 0xe4c0c35dec410f04L) },
	{ C64(0x7f2eccede21c53d4L, 0x31ebef0fa0a4ff0fL, 0xd301b2ae1015f122L, 0xff1efdfdf0fec3e5L) },
	{ C64(0x44ef2efd2f21c441L, 0xdc5d3701be4cfffcL, 0x02ff20434f4b2adcL, 0x1120f5c7002ee03aL) },
	{ C64(0x97e74efd63b2407cL, 0xcfaff25753040244L, 0x01237fa60a3e72f2L, 0x10f3bf252dbddfe2L) },
	{ C64(0xd4252f3222f5eb4cL, 0xe413220251002021L, 0xfd1c1525fd1d02beL, 0x540412a02dfe4df5L) },
	{ C64(0x5c0bfeff0aed521dL, 0x5b0f010fcdffbc63L, 0x03012f0b1214e542L, 0xfcf1323db302e00fL) },
	{ C64(0x2111755164033f42L, 0x21f204401f5420b1L, 0x5ee411f0d2643002L, 0x025e715aef21e2e3L) },
	{ C64(0x1d13f1ecee1370b1L, 0x20cdf30f1f1f0e10L, 0x40d2ff1412fedfffL, 0x7f22f407f12c3e21L) },
	{ C64(0x062422cf2367fe7aL, 0x1f4216f51f20c664L, 0x1d0e7ff3e9797ae1L, 0xeefeeefe4eac2b0fL) },
	{ C64(0x10e210d0fe111fedL, 0x1f0deff022d0210fL, 0x920cdff4dff1f41eL, 0x3f323b22306f3003L) },
	{ C64(0x13e2049e22f6712dL, 0x213f34171123e033L, 0x11133d26eac26d0eL, 0x10140df47fee6132L) },
	{ C64(0x122f20112ffd1070L, 0x1e2e34d0d0c32d01L, 0x2f22d91f01ac0cc0L, 0xc1e1d2000e1b09fdL) },
	{ C64(0x5cd90fd4a1da1403L, 0xd00c0c3ed30aee0fL, 0x3020e01c04f1f111L, 0xc09fd030ff51ece5L) },
	{ C64(0x05f41f13e50d02afL, 0x09e001111eed23ffL, 0xd11dfbf5ff1dfc4aL, 0x6fd301f63d11114bL) },
	{ C64(0x3e10221fe11050c0L, 0x11c0ecdfe1a013d0L, 0xb2fcf90cd155f920L, 0x1230fc5a7e0ae9f7L) },
	{ C64(0x12d15f2001022e63L, 0x3ef1121e1f13200eL, 0xfe01e010f2220a1dL, 0x2430e10b0fdee9f4L) },
	{ C64(0x51edd946b70fa0d3L, 0xf3172e2d3520f7e3L, 0x243de1ee15e4fd21L, 0x537f41c0e13effa1L) },
	{ C64(0xdeef0021922e0ef4L, 0x3df2efc0e0d5dc22L, 0x5ef1c10d22d4e5f5L, 0x13cfdca3e2f1cfe7L) },
	{ C64(0xf0de71321615ffe0L, 0x2302fd7130f07113L, 0x0eef232110377c24L, 0xd0f1bf0f2f0eeaf6L) },
	{ C64(0x514f02f02bae067fL, 0x532301312f390140L, 0xf1e2f323100524faL, 0x496fe65014e11ce9L) },
	{ C64(0xc1142e33b34c0d1fL, 0xbfe112ce2360f336L, 0xce1d4a12deca03a6L, 0x47a13ee401102e03L) },
	{ C64(0xffc20ff0950fcfefL, 0x0d00f02110ff0021L, 0x000d0d1f40ac3effL, 0x9d00acc2210f2c0bL) },
	{ C64(0x20ef114d4f12e430L, 0x4c27426f1f2c20c9L, 0xf40e6e12001f0a4aL, 0x2071e2033f1e503aL) },
	{ C64(0x32fb0001a49af62dL, 0xe122e132b15c52f0L, 0x011e1d6ee20b702dL, 0xfd20c31ff312ee11L) },
	{ C64(0x0a010260d2ffb02cL, 0x12b1f139023021dfL, 0xf0ee130e10f301f2L, 0xe221a0205f30fe04L) },
	{ C64(0xfacf24217e6f0ee3L, 0xfed0e1ce223304e2L, 0x7134e0e1b0152214L, 0xa4c02b4dff011524L) },
	{ C64(0xcaf01314c75ddac1L, 0xf303e1e0213113e4L, 0x0b2fbf60071fc595L, 0xa5ae03f1cd53fed7L) },
	{ C64(0xf2ffe3b0b1101a41L, 0x3f3d5b2221a00072L, 0x000df02431ef125eL, 0x0ab0ede13c1504ffL) },
	{ C64(0xee71c11079e11a11L, 0x4d4ce2940fe1ece2L, 0x1df10b123d2c0a2eL, 0xcdf013cf13d00009L) },
	{ C64(0xea44e2311bb9dce7L, 0xe7ff1f2423fb21b4L, 0xb20ee2ec06a7d4f5L, 0xe92201dee375edefL) },
	{ C64(0xee20b0f099dabcd1L, 0xef9400ceecfdc45eL, 0x0e6df00ad1900fdfL, 0x6ee130f6f0c000f0L) },
	{ C64(0x2d2ffd3ffc420013L, 0xf0fffffeefe2f32dL, 0x14f2d1a222121e32L, 0x647ef0f122100310L) },
	{ C64(0x0f5f3053ff1bd23fL, 0xd1043b1e204b071eL, 0xfefefc23ae226202L, 0x5ebf3b440a143b17L) },
	{ C64(0x0ef4e29e3becdba0L, 0xffd90c0c02a190e0L, 0x34e4fea12fcdd11fL, 0xec01e9c4ff1100faL) },
	{ C64(0xa4d20ff3cd042d00L, 0x2a2123145d4c5111L, 0x3f4f4ff0bcef330cL, 0xbfc4ee1d51c21d2eL) },
	{ C64(0xee3e32de4c03ec40L, 0x145fd5d10fff01ddL, 0x1c1401363e3f39b3L, 0x1130e0e7111d2eecL) },
	{ C64(0xebdf52e29ff2ff9fL, 0xd0e1bf7a116ee11fL, 0x312e12ea00d29100L, 0xd1b0da5f2e2d2204L) },
	{ C64(0x4636b000d3122a12L, 0x170e066f00d104f3L, 0xc31132124010ead0L, 0x5c71c4c43d0afefaL) },
};
static int neck_lateral_convs_0_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -139, -112, -85, -59, -32, -5, 20, 47, 74, 100, 127, 154, 180, 207 },
	{ -223, -190, -158, -126, -93, -61, -28, 3, 36, 68, 101, 133, 165, 198 },
	{ -136, -113, -90, -67, -44, -21, 1, 24, 48, 71, 94, 117, 140, 163 },
	{ -138, -115, -92, -69, -46, -23, -1, 21, 44, 67, 90, 113, 136, 159 },
	{ -145, -120, -96, -71, -46, -22, 2, 27, 51, 76, 101, 125, 150, 175 },
	{ -178, -151, -124, -96, -69, -41, -14, 13, 40, 68, 95, 123, 150, 178 },
	{ -130, -106, -83, -60, -37, -13, 9, 32, 56, 79, 102, 125, 149, 172 },
	{ -289, -250, -211, -172, -134, -95, -56, -17, 20, 59, 98, 137, 175, 214 },
	{ -161, -137, -113, -89, -65, -41, -17, 5, 29, 53, 77, 101, 125, 148 },
	{ -112, -90, -69, -48, -27, -6, 14, 35, 56, 78, 99, 120, 141, 162 },
	{ -166, -140, -113, -87, -61, -35, -9, 17, 43, 69, 95, 121, 147, 174 },
	{ -167, -143, -119, -95, -71, -47, -23, 0, 24, 48, 72, 96, 120, 144 },
	{ -171, -143, -116, -88, -60, -33, -5, 22, 49, 77, 105, 132, 160, 188 },
	{ -133, -118, -104, -89, -74, -60, -45, -30, -16, -1, 13, 27, 42, 57 },
	{ -139, -110, -80, -51, -22, 6, 35, 65, 94, 123, 152, 181, 211, 240 },
	{ -246, -213, -181, -149, -116, -84, -51, -19, 13, 45, 78, 110, 142, 175 },
	{ -197, -170, -144, -117, -90, -64, -37, -11, 15, 42, 68, 95, 122, 148 },
	{ -161, -141, -122, -102, -83, -64, -44, -25, -5, 13, 32, 52, 71, 91 },
	{ -147, -125, -103, -81, -60, -38, -16, 5, 27, 49, 71, 93, 115, 137 },
	{ -102, -72, -41, -11, 19, 50, 80, 111, 141, 172, 202, 233, 263, 294 },
	{ -163, -141, -119, -97, -75, -53, -31, -9, 12, 35, 57, 79, 101, 123 },
	{ -159, -135, -112, -88, -64, -40, -16, 7, 31, 54, 78, 102, 126, 150 },
	{ -169, -144, -119, -95, -70, -45, -20, 4, 29, 54, 79, 104, 129, 154 },
	{ -106, -85, -65, -44, -23, -2, 18, 38, 59, 80, 101, 121, 142, 163 },
	{ -118, -91, -64, -37, -10, 16, 43, 70, 97, 124, 150, 177, 204, 231 },
	{ -140, -119, -98, -77, -56, -35, -14, 6, 27, 48, 70, 91, 112, 133 },
	{ -144, -120, -96, -72, -48, -24, 0, 23, 46, 70, 94, 118, 142, 166 },
	{ -169, -147, -125, -103, -81, -59, -36, -14, 7, 29, 51, 73, 95, 117 },
	{ -144, -119, -93, -67, -42, -16, 8, 34, 59, 85, 111, 136, 162, 187 },
	{ -194, -160, -126, -92, -58, -24, 10, 44, 78, 112, 146, 180, 214, 248 },
	{ -164, -134, -105, -75, -46, -17, 12, 41, 71, 100, 129, 159, 188, 218 },
	{ -160, -137, -113, -90, -67, -44, -21, 1, 24, 48, 71, 94, 117, 140 },
	{ -85, -60, -36, -11, 12, 36, 61, 85, 110, 134, 159, 183, 207, 232 },
	{ -221, -183, -146, -109, -71, -34, 2, 40, 77, 114, 151, 189, 226, 263 },
	{ -160, -133, -105, -78, -51, -23, 3, 30, 58, 85, 112, 140, 167, 194 },
	{ -194, -165, -136, -107, -78, -49, -20, 9, 38, 67, 96, 125, 154, 183 },
	{ -109, -90, -70, -51, -31, -12, 7, 26, 46, 65, 84, 104, 123, 143 },
	{ -149, -128, -107, -86, -66, -45, -24, -3, 17, 37, 58, 79, 100, 121 },
	{ -170, -150, -131, -111, -91, -71, -51, -31, -11, 8, 27, 47, 67, 87 },
	{ -180, -151, -122, -93, -64, -35, -6, 22, 51, 80, 110, 139, 168, 197 },
	{ -187, -163, -138, -114, -89, -65, -40, -16, 7, 32, 56, 81, 105, 129 },
	{ -141, -118, -95, -72, -48, -25, -2, 20, 44, 67, 90, 113, 137, 160 },
	{ -184, -151, -118, -85, -52, -19, 13, 46, 79, 112, 145, 179, 212, 245 },
	{ -202, -175, -148, -121, -93, -66, -39, -12, 15, 42, 69, 96, 124, 151 },
	{ -128, -103, -79, -54, -29, -5, 19, 43, 68, 92, 117, 141, 166, 190 },
	{ -117, -94, -71, -49, -26, -3, 19, 42, 65, 87, 110, 133, 156, 179 },
	{ -174, -146, -118, -91, -63, -36, -8, 18, 46, 74, 101, 129, 156, 184 },
	{ -171, -151, -132, -112, -92, -72, -52, -32, -12, 6, 26, 46, 66, 86 },
	{ -121, -98, -75, -52, -29, -6, 16, 39, 62, 85, 108, 131, 154, 177 },
	{ -153, -129, -104, -80, -55, -31, -6, 17, 42, 66, 91, 116, 140, 165 },
	{ -151, -129, -107, -85, -63, -41, -19, 2, 24, 46, 68, 90, 112, 134 },
	{ -129, -107, -85, -63, -41, -19, 2, 25, 47, 69, 91, 113, 135, 157 },
	{ -144, -119, -94, -69, -44, -19, 5, 30, 55, 80, 105, 130, 155, 180 },
	{ -164, -139, -114, -89, -64, -39, -14, 10, 34, 59, 84, 109, 134, 159 },
	{ -153, -132, -111, -90, -69, -48, -27, -6, 14, 35, 56, 76, 97, 118 },
	{ -181, -152, -123, -93, -64, -35, -5, 23, 52, 81, 111, 140, 169, 199 },
	{ -232, -204, -176, -148, -120, -92, -64, -36, -8, 19, 47, 75, 102, 130 },
	{ -96, -78, -60, -42, -25, -7, 10, 28, 46, 63, 81, 99, 117, 135 },
	{ -144, -121, -97, -73, -50, -26, -2, 20, 44, 67, 91, 115, 138, 162 },
	{ -247, -219, -191, -164, -136, -109, -81, -53, -26, 1, 28, 56, 84, 111 },
	{ -212, -181, -150, -119, -88, -57, -27, 3, 34, 65, 96, 127, 158, 189 },
	{ -138, -115, -91, -67, -44, -20, 3, 26, 50, 74, 97, 121, 144, 168 },
	{ -204, -179, -155, -130, -105, -80, -56, -31, -6, 17, 42, 67, 91, 116 },
	{ -139, -113, -87, -61, -36, -10, 15, 41, 67, 93, 118, 144, 170, 196 },
};
static int_t<4,1> neck_lateral_convs_0_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xe), C(0xf), C(0xf), C(0xa), C(0xc), C(0xe), C(0x4), C(0xc), C(0x1), },
	{ C(0x4), C(0x2), C(0x1), C(0x3), C(0x3), C(0x2), C(0xf), C(0x2), C(0x2), },
	{ C(0x4), C(0x2), C(0xc), C(0xa), C(0x9), C(0xe), C(0xb), C(0x0), C(0x1), },
	{ C(0xb), C(0xf), C(0xf), C(0x5), C(0x0), C(0xb), C(0x7), C(0xe), C(0xa), },
	{ C(0xb), C(0x4), C(0xe), C(0x9), C(0x6), C(0x0), C(0xc), C(0xb), C(0xf), },
	{ C(0x3), C(0xd), C(0x2), C(0xe), C(0x7), C(0x4), C(0x1), C(0x7), C(0xc), },
	{ C(0x1), C(0x1), C(0xf), C(0xb), C(0x5), C(0x1), C(0x9), C(0x2), C(0x1), },
	{ C(0x0), C(0x3), C(0x0), C(0x2), C(0x2), C(0x3), C(0x4), C(0x5), C(0x3), },
	{ C(0xe), C(0x3), C(0x1), C(0x9), C(0xc), C(0x3), C(0x1), C(0xd), C(0x2), },
	{ C(0xb), C(0x9), C(0xf), C(0xc), C(0x6), C(0xd), C(0xc), C(0x4), C(0xf), },
	{ C(0x2), C(0x1), C(0x0), C(0x6), C(0x0), C(0xf), C(0x7), C(0x0), C(0x1), },
	{ C(0xf), C(0x1), C(0x1), C(0x1), C(0xf), C(0xf), C(0xb), C(0x9), C(0xa), },
	{ C(0xe), C(0x6), C(0x4), C(0xc), C(0xc), C(0xf), C(0xb), C(0xa), C(0x2), },
	{ C(0x6), C(0x2), C(0xc), C(0x7), C(0x7), C(0x2), C(0xf), C(0x0), C(0x0), },
	{ C(0xf), C(0xd), C(0xf), C(0xf), C(0xe), C(0xf), C(0xe), C(0xe), C(0x0), },
	{ C(0x6), C(0x6), C(0x0), C(0x2), C(0x2), C(0x0), C(0x0), C(0x2), C(0xf), },
	{ C(0xe), C(0x1), C(0x1), C(0x0), C(0x0), C(0x5), C(0x4), C(0x4), C(0x3), },
	{ C(0x1), C(0xf), C(0x0), C(0xd), C(0x9), C(0x1), C(0x2), C(0x4), C(0x1), },
	{ C(0xa), C(0x7), C(0xc), C(0xb), C(0x9), C(0xe), C(0x4), C(0xf), C(0x1), },
	{ C(0xc), C(0x9), C(0xf), C(0x0), C(0xd), C(0xc), C(0x2), C(0xe), C(0xf), },
	{ C(0x1), C(0x6), C(0xc), C(0x2), C(0x6), C(0x0), C(0x3), C(0x5), C(0xf), },
	{ C(0xd), C(0x9), C(0xf), C(0x2), C(0x6), C(0x6), C(0x3), C(0x5), C(0x0), },
	{ C(0xb), C(0x7), C(0x3), C(0x5), C(0x2), C(0xf), C(0x6), C(0x1), C(0xd), },
	{ C(0x4), C(0x4), C(0xd), C(0x4), C(0x0), C(0xa), C(0x1), C(0xc), C(0xa), },
	{ C(0xb), C(0x9), C(0x4), C(0xf), C(0x9), C(0x1), C(0x0), C(0xc), C(0x0), },
	{ C(0x1), C(0x0), C(0x1), C(0x1), C(0x1), C(0xe), C(0xa), C(0xa), C(0xa), },
	{ C(0xd), C(0x6), C(0xd), C(0x2), C(0x3), C(0xa), C(0x0), C(0xb), C(0xa), },
	{ C(0x1), C(0xe), C(0x0), C(0x4), C(0xe), C(0x0), C(0x7), C(0x2), C(0x0), },
	{ C(0xd), C(0x9), C(0x9), C(0x2), C(0xe), C(0x0), C(0x0), C(0xe), C(0xe), },
	{ C(0x7), C(0x4), C(0x0), C(0x5), C(0x1), C(0xf), C(0x4), C(0x0), C(0xe), },
	{ C(0x1), C(0xe), C(0x2), C(0xd), C(0xc), C(0x3), C(0x9), C(0xd), C(0x3), },
	{ C(0xf), C(0xf), C(0x2), C(0xf), C(0xe), C(0x6), C(0xe), C(0x4), C(0x7), },
	{ C(0xe), C(0x4), C(0xc), C(0x9), C(0x9), C(0xf), C(0x3), C(0xe), C(0xf), },
	{ C(0xe), C(0xe), C(0xe), C(0xe), C(0xf), C(0xf), C(0xf), C(0x1), C(0x0), },
	{ C(0x2), C(0x1), C(0x1), C(0xe), C(0xe), C(0x2), C(0x2), C(0x6), C(0x7), },
	{ C(0xe), C(0xf), C(0x0), C(0xd), C(0xe), C(0xe), C(0xd), C(0xd), C(0x0), },
	{ C(0xe), C(0xf), C(0xf), C(0xf), C(0x0), C(0xf), C(0xe), C(0xf), C(0xe), },
	{ C(0x3), C(0x2), C(0xf), C(0x4), C(0x4), C(0x2), C(0xc), C(0x9), C(0x0), },
	{ C(0xc), C(0x6), C(0x4), C(0xa), C(0x4), C(0x2), C(0x0), C(0x5), C(0x6), },
	{ C(0x1), C(0x0), C(0xb), C(0x1), C(0xf), C(0xc), C(0x2), C(0xc), C(0x9), },
	{ C(0x5), C(0x7), C(0x7), C(0x1), C(0xf), C(0xf), C(0x0), C(0x1), C(0x0), },
	{ C(0x4), C(0x5), C(0x3), C(0x0), C(0xf), C(0xf), C(0xc), C(0x2), C(0x3), },
	{ C(0x1), C(0x3), C(0x3), C(0x0), C(0x3), C(0x2), C(0x2), C(0x5), C(0x2), },
	{ C(0x1), C(0x1), C(0x4), C(0xe), C(0x2), C(0x3), C(0xf), C(0x4), C(0x6), },
	{ C(0x5), C(0x7), C(0x2), C(0xf), C(0x0), C(0x0), C(0xf), C(0xe), C(0xf), },
	{ C(0xf), C(0xa), C(0x1), C(0xd), C(0x9), C(0xf), C(0xd), C(0x0), C(0x0), },
	{ C(0x2), C(0x9), C(0xc), C(0x4), C(0xb), C(0xa), C(0xf), C(0x3), C(0x0), },
	{ C(0xc), C(0x4), C(0x1), C(0x9), C(0x7), C(0xf), C(0x5), C(0x3), C(0x0), },
	{ C(0xc), C(0x5), C(0x1), C(0xa), C(0xf), C(0x3), C(0xd), C(0x9), C(0xf), },
	{ C(0x5), C(0x9), C(0xe), C(0x5), C(0x9), C(0x3), C(0x4), C(0xf), C(0xc), },
	{ C(0x7), C(0x3), C(0x1), C(0xa), C(0x9), C(0xe), C(0xd), C(0x2), C(0xc), },
	{ C(0xd), C(0x9), C(0x3), C(0x6), C(0x9), C(0x0), C(0xd), C(0xd), C(0x0), },
	{ C(0x5), C(0x9), C(0xf), C(0x1), C(0xb), C(0x0), C(0x0), C(0xc), C(0xa), },
	{ C(0xc), C(0xd), C(0xe), C(0xd), C(0xd), C(0xe), C(0x5), C(0x1), C(0xe), },
	{ C(0xf), C(0x0), C(0x3), C(0xb), C(0x7), C(0x7), C(0x3), C(0x4), C(0xb), },
	{ C(0x2), C(0xc), C(0x9), C(0x3), C(0xe), C(0x9), C(0x0), C(0x2), C(0xb), },
	{ C(0x1), C(0x2), C(0x0), C(0x2), C(0x7), C(0x0), C(0x1), C(0x2), C(0x1), },
	{ C(0x0), C(0x5), C(0xa), C(0xd), C(0x7), C(0xc), C(0xa), C(0x1), C(0xe), },
	{ C(0x9), C(0xa), C(0xf), C(0xd), C(0x3), C(0x0), C(0x0), C(0x4), C(0xc), },
	{ C(0xa), C(0xe), C(0x2), C(0x9), C(0xe), C(0x0), C(0xe), C(0x0), C(0x2), },
	{ C(0xe), C(0xb), C(0xe), C(0xd), C(0xa), C(0xe), C(0x2), C(0x0), C(0x1), },
	{ C(0xc), C(0x9), C(0xb), C(0x0), C(0x0), C(0x1), C(0xf), C(0x1), C(0x0), },
	{ C(0xf), C(0x1), C(0xf), C(0xf), C(0x4), C(0x2), C(0xc), C(0x9), C(0xd), },
	{ C(0x1), C(0x9), C(0xc), C(0xf), C(0xb), C(0xf), C(0x1), C(0x1), C(0x3), },
};
static int neck_lateral_convs_0_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 4, 14, 25, 36, 47, 58, 68 },
	{ 6, 17, 28, 39, 50, 60, 71 },
	{ 9, 26, 43, 60, 77, 94, 111 },
	{ 20, 34, 48, 62, 76, 90, 104 },
	{ 9, 24, 39, 53, 68, 82, 97 },
	{ 8, 22, 35, 49, 62, 76, 89 },
	{ 14, 27, 39, 52, 65, 77, 90 },
	{ 1, 13, 25, 38, 50, 62, 75 },
	{ 8, 17, 25, 33, 41, 50, 58 },
	{ 0, 11, 23, 35, 46, 58, 70 },
	{ 9, 21, 32, 44, 56, 68, 79 },
	{ 12, 25, 38, 50, 63, 76, 88 },
	{ 14, 33, 51, 69, 88, 106, 124 },
	{ 6, 42, 77, 112, 147, 183, 218 },
	{ -5, 5, 15, 26, 36, 47, 58 },
	{ 14, 38, 62, 86, 110, 134, 158 },
	{ 14, 26, 38, 50, 62, 74, 86 },
	{ 5, 14, 24, 34, 44, 54, 64 },
	{ 8, 22, 36, 49, 63, 76, 90 },
	{ 0, 15, 31, 47, 63, 79, 95 },
	{ 12, 25, 37, 50, 62, 75, 88 },
	{ 22, 38, 54, 69, 85, 101, 117 },
	{ 13, 27, 40, 53, 66, 80, 93 },
	{ -1, 12, 26, 41, 55, 70, 84 },
	{ 2, 19, 35, 52, 69, 86, 102 },
	{ 8, 18, 29, 39, 50, 60, 71 },
	{ 11, 26, 41, 55, 70, 85, 100 },
	{ 13, 22, 32, 42, 52, 62, 72 },
	{ 15, 30, 46, 61, 76, 91, 106 },
	{ 8, 34, 59, 85, 111, 137, 163 },
	{ 12, 22, 32, 42, 52, 62, 72 },
	{ 11, 22, 32, 43, 53, 63, 74 },
	{ 1, 20, 39, 58, 77, 96, 115 },
	{ 2, 8, 14, 21, 27, 34, 40 },
	{ 9, 36, 64, 91, 118, 145, 173 },
	{ 0, 9, 18, 27, 37, 46, 55 },
	{ 10, 16, 22, 28, 34, 40, 46 },
	{ 9, 21, 33, 46, 58, 70, 82 },
	{ 11, 29, 47, 65, 83, 101, 119 },
	{ 6, 21, 37, 53, 68, 84, 100 },
	{ 10, 22, 34, 46, 58, 69, 81 },
	{ 4, 13, 23, 32, 41, 51, 60 },
	{ 9, 20, 31, 41, 52, 63, 73 },
	{ 10, 22, 34, 46, 58, 70, 82 },
	{ 9, 19, 28, 38, 48, 58, 68 },
	{ 15, 27, 39, 51, 63, 76, 88 },
	{ 12, 24, 36, 48, 60, 72, 84 },
	{ 7, 24, 40, 57, 74, 90, 107 },
	{ 13, 24, 35, 46, 58, 69, 80 },
	{ 6, 20, 33, 47, 61, 74, 88 },
	{ 9, 26, 43, 60, 78, 95, 112 },
	{ 7, 23, 39, 56, 72, 89, 105 },
	{ 20, 41, 62, 83, 104, 125, 146 },
	{ 9, 20, 31, 42, 54, 65, 76 },
	{ 18, 34, 50, 65, 81, 97, 112 },
	{ 19, 41, 62, 84, 106, 127, 149 },
	{ 4, 16, 27, 39, 50, 62, 74 },
	{ 10, 24, 38, 52, 66, 80, 94 },
	{ 17, 32, 47, 63, 78, 93, 108 },
	{ 14, 26, 37, 48, 59, 70, 82 },
	{ 0, 15, 30, 45, 60, 76, 91 },
	{ 7, 20, 32, 44, 57, 69, 81 },
	{ 1, 10, 18, 27, 35, 43, 52 },
	{ 15, 26, 38, 50, 61, 73, 85 },
};
static int_t<4,64> neck_lateral_convs_1_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x6f60071e3142fb09L, 0x5331499f522f35e1L, 0x0611ed3f3343d513L, 0x216ced3c1aafd0e5L) },
	{ C64(0xef5fff120c941fe0L, 0x0140006cadff0f0fL, 0xd02230df03111f0fL, 0xef142f0f000f001fL) },
	{ C64(0x1d3e051c02d20ffcL, 0x0242a013ff1be2f1L, 0x1f024b10f321d0f2L, 0xe220cf2edf110e30L) },
	{ C64(0xe740ed100da11ed0L, 0x01c3dc2141fbfe10L, 0x9c2219fd00103fc1L, 0xe11d0de10def1fe0L) },
	{ C64(0xeddf640f02ddfe0fL, 0x34f0d4f3235271e2L, 0x7e13fb1ae202dfcdL, 0x41ff105ce3efff12L) },
	{ C64(0x211bf4e63fc9f1ceL, 0x2cac61b41a94badfL, 0x0640d75a49fdef60L, 0x91233d1a337ea651L) },
	{ C64(0x029e60f4c419c5d3L, 0xf4e210ddfa00a06aL, 0x39f3ac1040f1f6feL, 0xb04123f0d01aea72L) },
	{ C64(0x1c02301fbab22d11L, 0x5c5151335f0f4de0L, 0x5b21360cde20de01L, 0x3ae0003e34110200L) },
	{ C64(0x905addbfefab939eL, 0x0303fb116d0fbf2dL, 0x2bb1b66aee43b1e7L, 0xdef6dac65c10d300L) },
	{ C64(0xd1b606de0ffe2d19L, 0xf0fe7e070fe2b01eL, 0xd0ffe0de90b1f0afL, 0x5af6d9ba0f31a012L) },
	{ C64(0x4313140332117111L, 0x517d31274fc10f00L, 0x54112444cf2d0153L, 0x2216232464122e30L) },
	{ C64(0x05aed5df051ac100L, 0xffa30fbc0ee1dd22L, 0x0eded1032fb5e040L, 0xde3d4501016ee21fL) },
	{ C64(0xc53fdd1e7b2131aeL, 0xe17eeef990ed00dfL, 0x500ff3dd121feff2L, 0x1d03dcffffee10f0L) },
	{ C64(0x025f331d1ce0cdcfL, 0x302ec1012e1a3122L, 0x632fdee9f25fbe00L, 0x250e0f1d4fab2192L) },
	{ C64(0x0132e62e3de3091bL, 0x2e445dcf221ee0ffL, 0x13f4112133f390f5L, 0xf0fe3c5f0af42d74L) },
	{ C64(0xbe2f0dbfeecd91c0L, 0x14d6ee1f111dfe1fL, 0x0cffc14b0111e0c3L, 0x2bd2ddd30e0dbcfcL) },
	{ C64(0x1fad4d10c6100f1eL, 0xf0025cf0ee21f1b2L, 0xf3d2ed411022111fL, 0xd2fe0d2fe4f0b010L) },
	{ C64(0x1272fd3d24f24eefL, 0x4f0eeb2ec5312c95L, 0xbe496352a1145cf1L, 0x203f10320056e601L) },
	{ C64(0x33d2f1e2060fa52aL, 0xff1091f62bcfef01L, 0x401fe134ab1be230L, 0x0ef0022c2203ff5eL) },
	{ C64(0x199913d3aff35cfdL, 0xf10312ed0a222f05L, 0xe0e3b4ee00dc30fdL, 0x0dce1f591241a1d1L) },
	{ C64(0x103ffe31e24102fcL, 0x4e5afe17212012a6L, 0xb4cbfd51c25e4f51L, 0x362e3cfe35e362a3L) },
	{ C64(0xe46020d120e1f3e2L, 0x10f0425c13f100f0L, 0x00fee40fb1323ef3L, 0x011201d3e13e3efeL) },
	{ C64(0x6ef66321230c7220L, 0x4232456605304202L, 0x27056931274210edL, 0x4454310645cf1b3fL) },
	{ C64(0xe2631e02fd522203L, 0x20104b422c2fe01dL, 0x1e93701203212ed1L, 0x2002eb2101cd3df3L) },
	{ C64(0x026ded1e4d2c530bL, 0xa2330c01aefecce0L, 0x0cd1de0e43320df5L, 0xae31adc31cdb000fL) },
	{ C64(0xe2d4cff11b244132L, 0x2ded122711091e0fL, 0xffd1010af22c0af4L, 0x21f4ce6e3f431ee0L) },
	{ C64(0x0ef000101d05f12cL, 0xc14e21f02cf4210fL, 0xf131d215def11fd0L, 0xfcc1f3bd1fccffe0L) },
	{ C64(0x0ec90ef0effe0d2cL, 0x0f12ffeff1221ff1L, 0x0ff0d30000fefe1fL, 0xfdee3f0d001fd3f1L) },
	{ C64(0xe0c3f0cfd1de20feL, 0x0d0f443edff0e2efL, 0xd02d23e0c1defdb0L, 0x7a13ff90e556c21eL) },
	{ C64(0x31230e503c21f401L, 0x300ff013010cf033L, 0x132dee0efe1069f1L, 0x12f123da11e314a0L) },
	{ C64(0x120e11efb3ede303L, 0x1610400600ef014fL, 0x1e9fdb300de21d01L, 0xe043cdc0c22ece0eL) },
	{ C64(0xd0bf04942bcc0104L, 0x0ddff51dee10016fL, 0xfd4335be40cedf9fL, 0xfee4d0f22012a12fL) },
	{ C64(0x04fddce00d1d1f0eL, 0xed3eef2f0f0131e1L, 0x01fd3fe01231ee1eL, 0x40f021ffe5df1ff0L) },
	{ C64(0xd0270e2242d504e2L, 0xed1a020110ff1532L, 0xf03f4dd01c3f3001L, 0x020fe109f0123352L) },
	{ C64(0xff1e50eef2ec6012L, 0x63d6622b4d222f1cL, 0x5c6f02320df423e5L, 0x1d44e5c0f439de24L) },
	{ C64(0x29f43fffa1aedd03L, 0x0fd40f41ffffff1fL, 0xef00e0003bbff01cL, 0xf9cb000ad20d9111L) },
	{ C64(0x364142e5dde1f3fbL, 0x5ff54b4f244ed121L, 0xd1f4036f4010e0b2L, 0x91dd4170a131e4fdL) },
	{ C64(0xe12c001e2435bca1L, 0xf330bad50511f3a5L, 0xd21dd02eb121f353L, 0xf30f3ceedc06e1f2L) },
	{ C64(0x006c023afb1531f5L, 0x21ef2e1100014ee3L, 0x110f121dd1113910L, 0x43033ced130fe2f1L) },
	{ C64(0xeff2dcfe0dcef011L, 0x1def254c100d3ba3L, 0x93ee0df0f3f1f1f2L, 0x3100143206ee0201L) },
	{ C64(0x3e130e57a4d65b54L, 0x1a134301d0013f25L, 0x1acac2403caf2f5aL, 0x4cac3f1153ffc4eeL) },
	{ C64(0x13031915f1ef3f0cL, 0xe0a60bd01f312010L, 0xf30332ff31042122L, 0x14053333123a0063L) },
	{ C64(0x36e15f0d30edf124L, 0x1073533eff041ae0L, 0x7e0ef55f1b000f4cL, 0xcfe32623c430301fL) },
	{ C64(0xf41e97fe36200a13L, 0x000640fef3111c1fL, 0x30e11fe22ef2a220L, 0xee0f1e05ea541e11L) },
	{ C64(0xfded1ef112bd021cL, 0x92d1b4e30e021a5eL, 0x2e4300e4ffece4ceL, 0xf011ef440a7f007eL) },
	{ C64(0xe5eb11f36340f69fL, 0x203e1ec402f213eeL, 0x4252e60ef6f21ee3L, 0xf5f120e3220c00eeL) },
	{ C64(0xe13f0d1f03f2ffd4L, 0xd0115d2ed3e1c192L, 0xa0ed22c391f15403L, 0x2d02dc90c111000eL) },
	{ C64(0xf0ff532b533cbfe1L, 0xb32befafbb10b270L, 0x5c03c0b1f3df94efL, 0x1361eff1e1c20102L) },
	{ C64(0x40ff3f10101d24f2L, 0x1201e22e033f2f30L, 0x301dfa125122e3dcL, 0x1154d4160e0c3c1fL) },
	{ C64(0x1faa0f00e02e2e2dL, 0x0f0f11dfe01320e1L, 0x00f0e10011f00f1dL, 0xefef2d1d001fe2e0L) },
	{ C64(0xf12f0903fe333cdbL, 0x43d30ac1e43206fdL, 0x03115134262232f0L, 0x1d02fdc00e1caf22L) },
	{ C64(0xad02a05001fa2ac5L, 0x2a6bd46b9adab13aL, 0x5cea7d9d4df9bc2bL, 0xee249afc00e76f20L) },
	{ C64(0xd0d43390c5c3e005L, 0x3ed5464230222262L, 0xee06003359ee2534L, 0x21ad664bf36cd061L) },
	{ C64(0x3ddd1222f2dee0f9L, 0x03d492e20f12ff2dL, 0x3f030111d0e2b7fcL, 0x12ef1f20ef2ff030L) },
	{ C64(0xd234f0ebf204ede3L, 0x101d432f30210224L, 0x24a01011f002ea43L, 0x1e1eef0f310121e1L) },
	{ C64(0xff7713e130e3000eL, 0x122e0c270fe1f031L, 0x00f21ff0d2f1deb3L, 0x2454dd937eb0e123L) },
	{ C64(0xf044fe2312e051eeL, 0x3d230b3013f1fe92L, 0xc1127411a1f05532L, 0x54cf4a6fb1f54b22L) },
	{ C64(0xe75bde1f7f6530edL, 0x313ddfff111f12d3L, 0x052f20eea5731df6L, 0x47651ce62ee471c0L) },
	{ C64(0x032cc0f01c3fe24fL, 0x92303fe560f251fcL, 0xba2dacf4d10cd9d2L, 0xeaf2e605bd1a1df0L) },
	{ C64(0xe63ef3e0f1e0d20cL, 0xb332ee041dfe1f1fL, 0x30f0e0200022d1d4L, 0xf012e41111eeee2fL) },
	{ C64(0x403f0e20f1dd2d01L, 0xee43a402ff0d0b10L, 0x6f2ef530d10ef02dL, 0xf3cd113f021f102fL) },
	{ C64(0xe300f0c32c1fff03L, 0x2f0f011205111ef2L, 0xd2003f03fdef1fbeL, 0x2ddffbf2f015bf0eL) },
	{ C64(0xfdc9ffe0efdefd2aL, 0xefe000ce003420c3L, 0xfef0a2f00df01e10L, 0xeefd4f0bff2dd3efL) },
	{ C64(0x0344cbfd1e203effL, 0x341f23fd122f5370L, 0x221e25de201ee9c1L, 0xfcf3ed12550f24d0L) },
};
static int neck_lateral_convs_1_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -156, -128, -99, -71, -43, -15, 12, 40, 68, 96, 125, 153, 181, 209 },
	{ -113, -96, -78, -60, -43, -25, -7, 10, 27, 45, 63, 81, 98, 116 },
	{ -196, -165, -134, -104, -73, -43, -12, 18, 48, 79, 110, 140, 171, 201 },
	{ -157, -138, -119, -99, -80, -61, -42, -22, -3, 15, 35, 54, 73, 93 },
	{ -223, -188, -153, -117, -82, -47, -11, 23, 58, 94, 129, 165, 200, 235 },
	{ -290, -250, -210, -170, -130, -89, -49, -9, 30, 70, 110, 150, 190, 230 },
	{ -148, -130, -113, -95, -77, -60, -42, -25, -7, 10, 27, 45, 62, 80 },
	{ -124, -102, -80, -58, -35, -13, 8, 30, 53, 75, 97, 119, 142, 164 },
	{ -163, -142, -121, -100, -80, -59, -38, -17, 3, 24, 45, 66, 86, 107 },
	{ -196, -173, -149, -126, -103, -80, -56, -33, -10, 12, 36, 59, 82, 105 },
	{ -151, -115, -80, -45, -9, 25, 61, 96, 132, 167, 202, 238, 273, 309 },
	{ -241, -208, -175, -142, -109, -76, -44, -11, 21, 54, 87, 120, 153, 186 },
	{ -171, -148, -125, -102, -79, -56, -32, -9, 13, 36, 59, 83, 106, 129 },
	{ -239, -206, -173, -140, -107, -74, -41, -8, 24, 57, 90, 123, 156, 189 },
	{ -122, -99, -75, -52, -29, -5, 17, 40, 64, 87, 111, 134, 157, 181 },
	{ -289, -250, -212, -173, -135, -96, -58, -19, 18, 57, 95, 134, 172, 211 },
	{ -232, -196, -161, -125, -90, -54, -19, 16, 51, 87, 122, 158, 194, 229 },
	{ -158, -128, -99, -69, -39, -10, 19, 49, 78, 108, 138, 167, 197, 227 },
	{ -233, -199, -165, -132, -98, -64, -30, 3, 37, 71, 105, 139, 173, 207 },
	{ -203, -174, -144, -115, -85, -55, -26, 3, 32, 62, 91, 121, 151, 180 },
	{ -175, -145, -114, -84, -53, -23, 7, 37, 68, 98, 129, 159, 190, 221 },
	{ -195, -165, -134, -104, -73, -43, -12, 17, 47, 78, 108, 139, 169, 200 },
	{ -175, -131, -87, -43, 0, 45, 89, 133, 177, 221, 266, 310, 354, 398 },
	{ -176, -145, -113, -82, -51, -19, 11, 42, 74, 105, 136, 168, 199, 230 },
	{ -290, -250, -210, -170, -130, -89, -49, -9, 30, 70, 110, 151, 191, 231 },
	{ -195, -164, -133, -101, -70, -39, -7, 23, 54, 85, 117, 148, 179, 211 },
	{ -208, -176, -145, -113, -82, -50, -19, 12, 43, 75, 106, 138, 169, 201 },
	{ -239, -204, -170, -135, -101, -67, -32, 1, 36, 70, 104, 139, 173, 208 },
	{ -171, -148, -124, -101, -78, -54, -31, -7, 15, 39, 62, 86, 109, 133 },
	{ -141, -117, -93, -69, -45, -22, 1, 25, 49, 73, 97, 120, 144, 168 },
	{ -167, -144, -121, -98, -75, -52, -30, -7, 15, 38, 61, 84, 107, 130 },
	{ -231, -201, -170, -139, -108, -78, -47, -16, 13, 44, 75, 106, 136, 167 },
	{ -178, -152, -126, -100, -74, -49, -23, 2, 28, 54, 80, 105, 131, 157 },
	{ -204, -171, -138, -105, -72, -39, -6, 26, 59, 92, 125, 158, 191, 224 },
	{ -179, -147, -115, -83, -50, -18, 13, 45, 77, 109, 141, 173, 206, 238 },
	{ -316, -271, -226, -181, -136, -91, -46, -1, 43, 88, 133, 178, 223, 268 },
	{ -132, -106, -80, -54, -27, -1, 24, 50, 76, 102, 128, 154, 181, 207 },
	{ -190, -161, -131, -102, -73, -43, -14, 14, 44, 73, 102, 132, 161, 190 },
	{ -133, -109, -86, -62, -38, -14, 9, 32, 56, 80, 104, 128, 152, 175 },
	{ -162, -140, -118, -96, -73, -51, -29, -7, 14, 36, 58, 80, 102, 125 },
	{ -142, -117, -91, -66, -40, -14, 10, 36, 61, 87, 113, 138, 164, 189 },
	{ -118, -94, -71, -47, -24, 0, 22, 46, 70, 93, 117, 140, 164, 187 },
	{ -119, -95, -71, -47, -23, 0, 24, 48, 72, 96, 120, 144, 168, 192 },
	{ -125, -103, -81, -58, -36, -13, 8, 30, 53, 75, 98, 120, 142, 165 },
	{ -223, -190, -158, -125, -93, -61, -28, 3, 36, 68, 100, 133, 165, 198 },
	{ -185, -154, -123, -93, -62, -31, 0, 30, 61, 92, 123, 154, 184, 215 },
	{ -205, -177, -150, -122, -95, -67, -40, -13, 14, 41, 69, 96, 124, 151 },
	{ -208, -180, -152, -124, -96, -68, -40, -12, 15, 43, 71, 99, 126, 154 },
	{ -176, -147, -117, -88, -59, -30, -1, 27, 57, 86, 115, 144, 173, 202 },
	{ -200, -170, -141, -112, -82, -53, -23, 5, 35, 64, 94, 123, 152, 182 },
	{ -134, -110, -86, -62, -39, -15, 8, 32, 56, 80, 104, 128, 151, 175 },
	{ -234, -208, -182, -156, -130, -104, -78, -52, -26, 0, 25, 52, 78, 104 },
	{ -155, -126, -96, -66, -37, -7, 22, 51, 81, 111, 140, 170, 200, 230 },
	{ -201, -171, -140, -110, -80, -50, -20, 9, 40, 70, 100, 130, 160, 191 },
	{ -179, -149, -119, -89, -59, -30, 0, 29, 59, 89, 119, 149, 179, 209 },
	{ -200, -166, -133, -99, -65, -31, 1, 35, 69, 102, 136, 170, 204, 237 },
	{ -136, -110, -84, -58, -32, -6, 19, 44, 70, 96, 122, 148, 174, 200 },
	{ -363, -305, -246, -188, -130, -71, -13, 45, 103, 161, 220, 278, 337, 395 },
	{ -257, -223, -188, -153, -118, -83, -48, -14, 20, 55, 90, 125, 160, 194 },
	{ -183, -155, -127, -100, -72, -45, -17, 9, 37, 64, 92, 120, 147, 175 },
	{ -119, -99, -79, -59, -38, -18, 1, 21, 41, 61, 81, 102, 122, 142 },
	{ -161, -138, -114, -91, -68, -45, -22, 0, 24, 47, 70, 93, 116, 139 },
	{ -300, -260, -221, -181, -142, -102, -62, -23, 16, 55, 95, 134, 174, 214 },
	{ -137, -113, -89, -64, -40, -16, 7, 31, 56, 80, 104, 128, 153, 177 },
};
static int_t<4,1> neck_lateral_convs_1_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0x3), C(0xa), C(0x9), C(0x3), C(0xa), C(0xb), C(0xf), C(0x0), C(0x1), },
	{ C(0x5), C(0xd), C(0x5), C(0x3), C(0xc), C(0xc), C(0x1), C(0x6), C(0x2), },
	{ C(0xb), C(0xf), C(0x1), C(0xd), C(0x0), C(0x1), C(0xb), C(0xd), C(0x1), },
	{ C(0x1), C(0x9), C(0x3), C(0x5), C(0x7), C(0x2), C(0xf), C(0x0), C(0x3), },
	{ C(0x0), C(0x0), C(0x4), C(0x2), C(0x1), C(0x5), C(0x4), C(0x3), C(0x2), },
	{ C(0x5), C(0x2), C(0x6), C(0xe), C(0xf), C(0x3), C(0x2), C(0x3), C(0x6), },
	{ C(0xe), C(0x0), C(0x1), C(0x3), C(0x4), C(0x2), C(0x6), C(0x6), C(0x2), },
	{ C(0xe), C(0x7), C(0xb), C(0x1), C(0xa), C(0xe), C(0x0), C(0xf), C(0xf), },
	{ C(0x5), C(0x3), C(0x3), C(0x2), C(0x5), C(0x2), C(0x0), C(0x0), C(0x2), },
	{ C(0xb), C(0xd), C(0x7), C(0xf), C(0x1), C(0x6), C(0x5), C(0x4), C(0x4), },
	{ C(0x0), C(0xd), C(0xc), C(0x1), C(0xc), C(0xc), C(0x1), C(0xe), C(0xf), },
	{ C(0x5), C(0x4), C(0x1), C(0x5), C(0x2), C(0xe), C(0x6), C(0x1), C(0xd), },
	{ C(0x0), C(0x3), C(0x3), C(0x2), C(0x7), C(0xa), C(0xf), C(0x0), C(0x4), },
	{ C(0xb), C(0xa), C(0x0), C(0x9), C(0xe), C(0x3), C(0xd), C(0x4), C(0x1), },
	{ C(0xb), C(0xe), C(0x2), C(0x0), C(0x9), C(0x1), C(0x2), C(0xa), C(0xd), },
	{ C(0xf), C(0x1), C(0x2), C(0x1), C(0x3), C(0x2), C(0x1), C(0x3), C(0x3), },
	{ C(0x4), C(0x4), C(0x5), C(0x2), C(0x0), C(0x1), C(0x1), C(0x1), C(0x1), },
	{ C(0xc), C(0x9), C(0xe), C(0xc), C(0xa), C(0x1), C(0x1), C(0x4), C(0x1), },
	{ C(0xe), C(0x2), C(0x5), C(0xf), C(0x3), C(0x4), C(0xe), C(0x4), C(0x6), },
	{ C(0x2), C(0x2), C(0x3), C(0x1), C(0xf), C(0x1), C(0x2), C(0x1), C(0x2), },
	{ C(0xe), C(0x9), C(0xf), C(0x3), C(0xc), C(0xe), C(0x2), C(0x0), C(0xf), },
	{ C(0xe), C(0xe), C(0xc), C(0xe), C(0x3), C(0xd), C(0xf), C(0xf), C(0xd), },
	{ C(0xb), C(0xf), C(0xb), C(0xf), C(0x1), C(0xf), C(0xd), C(0x0), C(0xd), },
	{ C(0xe), C(0x0), C(0x0), C(0xf), C(0x0), C(0xf), C(0xd), C(0xc), C(0xa), },
	{ C(0x3), C(0x1), C(0xf), C(0x3), C(0xf), C(0x2), C(0x3), C(0x1), C(0x4), },
	{ C(0xd), C(0xd), C(0x0), C(0xd), C(0xf), C(0x1), C(0xa), C(0xb), C(0x0), },
	{ C(0x4), C(0x0), C(0x0), C(0x3), C(0x2), C(0xf), C(0x3), C(0x4), C(0xf), },
	{ C(0x1), C(0x1), C(0x2), C(0x1), C(0x1), C(0x1), C(0x1), C(0x1), C(0x1), },
	{ C(0x6), C(0xe), C(0xd), C(0x3), C(0xa), C(0x4), C(0x3), C(0x3), C(0x6), },
	{ C(0xf), C(0x1), C(0x2), C(0x3), C(0xd), C(0xe), C(0x2), C(0xa), C(0xa), },
	{ C(0x6), C(0x5), C(0x6), C(0xe), C(0xe), C(0x0), C(0x2), C(0x2), C(0x0), },
	{ C(0xf), C(0xc), C(0xd), C(0x1), C(0x7), C(0x5), C(0xf), C(0x4), C(0x3), },
	{ C(0x1), C(0x1), C(0x2), C(0x2), C(0x4), C(0x1), C(0x1), C(0x1), C(0xd), },
	{ C(0x1), C(0xf), C(0xb), C(0x0), C(0x1), C(0xa), C(0x1), C(0x0), C(0xd), },
	{ C(0x2), C(0x2), C(0x0), C(0x6), C(0x3), C(0xf), C(0x5), C(0x4), C(0x0), },
	{ C(0x2), C(0x2), C(0x2), C(0x1), C(0x0), C(0x1), C(0x2), C(0x2), C(0x2), },
	{ C(0x1), C(0xf), C(0xe), C(0x2), C(0x2), C(0xc), C(0xb), C(0xb), C(0xb), },
	{ C(0x1), C(0x0), C(0x1), C(0xa), C(0xd), C(0x3), C(0x0), C(0x9), C(0xc), },
	{ C(0x3), C(0xd), C(0xd), C(0x0), C(0x9), C(0x1), C(0xf), C(0xc), C(0x6), },
	{ C(0x3), C(0x6), C(0x2), C(0xf), C(0xd), C(0x3), C(0xd), C(0x9), C(0x0), },
	{ C(0xb), C(0xf), C(0x5), C(0x9), C(0xd), C(0xf), C(0xa), C(0x0), C(0x1), },
	{ C(0xe), C(0x1), C(0x1), C(0x9), C(0xa), C(0x5), C(0xf), C(0xc), C(0xe), },
	{ C(0x1), C(0x9), C(0xe), C(0x2), C(0xa), C(0x2), C(0x0), C(0x2), C(0xd), },
	{ C(0xf), C(0x0), C(0x5), C(0xf), C(0x1), C(0x6), C(0xf), C(0xe), C(0x7), },
	{ C(0x3), C(0xe), C(0x1), C(0x7), C(0x0), C(0x0), C(0x7), C(0x2), C(0xe), },
	{ C(0x0), C(0xc), C(0x6), C(0x4), C(0xd), C(0x5), C(0x0), C(0x3), C(0x5), },
	{ C(0xf), C(0x1), C(0xf), C(0x2), C(0xf), C(0x9), C(0xd), C(0x9), C(0xe), },
	{ C(0xe), C(0x3), C(0x1), C(0x1), C(0xf), C(0xe), C(0x5), C(0x6), C(0x6), },
	{ C(0xd), C(0xb), C(0xb), C(0x0), C(0xf), C(0x0), C(0x3), C(0x0), C(0x1), },
	{ C(0x1), C(0x2), C(0x3), C(0x0), C(0x1), C(0x1), C(0x0), C(0x0), C(0x1), },
	{ C(0x9), C(0xe), C(0x1), C(0xb), C(0x0), C(0x1), C(0xf), C(0x3), C(0x0), },
	{ C(0x3), C(0x3), C(0x1), C(0x5), C(0x7), C(0x3), C(0x0), C(0x3), C(0xf), },
	{ C(0xc), C(0xb), C(0xa), C(0x0), C(0x0), C(0x9), C(0x3), C(0x3), C(0xf), },
	{ C(0x2), C(0x5), C(0x5), C(0x1), C(0x0), C(0x3), C(0x0), C(0x0), C(0x1), },
	{ C(0x2), C(0xf), C(0xe), C(0xe), C(0xd), C(0xd), C(0x0), C(0xf), C(0xf), },
	{ C(0xe), C(0xc), C(0xe), C(0xe), C(0xc), C(0xe), C(0x0), C(0x0), C(0x1), },
	{ C(0x4), C(0xc), C(0xa), C(0xf), C(0xa), C(0xc), C(0x0), C(0x3), C(0x6), },
	{ C(0xe), C(0xd), C(0xc), C(0xf), C(0x0), C(0xf), C(0xd), C(0xd), C(0xd), },
	{ C(0xd), C(0xb), C(0xe), C(0x0), C(0xd), C(0xc), C(0x1), C(0xf), C(0x0), },
	{ C(0x1), C(0xd), C(0xf), C(0x1), C(0xc), C(0xe), C(0x0), C(0xf), C(0xe), },
	{ C(0xe), C(0xd), C(0x6), C(0xc), C(0xd), C(0x4), C(0x0), C(0xd), C(0x0), },
	{ C(0x3), C(0x4), C(0x3), C(0x2), C(0x2), C(0x1), C(0xe), C(0xd), C(0xe), },
	{ C(0x2), C(0x1), C(0x2), C(0x3), C(0x2), C(0x2), C(0x2), C(0x0), C(0x1), },
	{ C(0xb), C(0xd), C(0xc), C(0xd), C(0xd), C(0xd), C(0xf), C(0xf), C(0x0), },
};
static int neck_lateral_convs_1_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 21, 39, 57, 74, 92, 110, 128 },
	{ 0, 12, 26, 39, 53, 66, 79 },
	{ 1, 25, 49, 74, 98, 123, 147 },
	{ 5, 19, 32, 46, 59, 73, 86 },
	{ 7, 18, 30, 41, 52, 64, 75 },
	{ 7, 25, 42, 60, 78, 96, 113 },
	{ 16, 46, 75, 105, 135, 165, 195 },
	{ 6, 23, 39, 55, 71, 87, 104 },
	{ 18, 48, 79, 109, 139, 169, 200 },
	{ 7, 22, 37, 52, 66, 81, 96 },
	{ -13, 4, 21, 39, 56, 73, 91 },
	{ 7, 27, 46, 66, 85, 105, 125 },
	{ 5, 16, 28, 39, 51, 62, 74 },
	{ 14, 26, 38, 50, 62, 74, 86 },
	{ 21, 35, 50, 64, 79, 93, 108 },
	{ 0, 9, 19, 29, 39, 50, 60 },
	{ 0, 14, 29, 44, 59, 74, 89 },
	{ 16, 33, 50, 67, 84, 101, 118 },
	{ 4, 26, 47, 68, 90, 111, 132 },
	{ 6, 12, 18, 24, 30, 36, 43 },
	{ 8, 18, 28, 38, 48, 58, 68 },
	{ -6, 7, 21, 36, 50, 65, 79 },
	{ -3, 13, 31, 48, 66, 83, 100 },
	{ 0, 15, 30, 46, 62, 77, 93 },
	{ 2, 15, 27, 40, 53, 66, 79 },
	{ 12, 25, 38, 52, 65, 78, 91 },
	{ -4, 7, 19, 31, 43, 55, 67 },
	{ 2, 8, 13, 18, 24, 29, 34 },
	{ 13, 27, 41, 54, 68, 82, 96 },
	{ 13, 24, 34, 45, 56, 67, 78 },
	{ 12, 28, 44, 60, 77, 93, 109 },
	{ 20, 31, 42, 53, 65, 76, 87 },
	{ 0, 10, 20, 30, 40, 50, 60 },
	{ 0, 15, 30, 44, 59, 73, 88 },
	{ 15, 29, 44, 58, 72, 86, 100 },
	{ 0, 4, 10, 15, 20, 26, 31 },
	{ -7, 13, 34, 55, 75, 96, 117 },
	{ 11, 24, 38, 51, 64, 78, 91 },
	{ 14, 26, 37, 49, 60, 72, 83 },
	{ 10, 25, 39, 53, 67, 81, 95 },
	{ -4, 24, 54, 84, 114, 144, 174 },
	{ 14, 29, 44, 58, 73, 87, 102 },
	{ -1, 13, 28, 43, 58, 74, 89 },
	{ 10, 25, 40, 55, 70, 85, 99 },
	{ 14, 24, 35, 46, 57, 67, 78 },
	{ 6, 24, 41, 59, 77, 94, 112 },
	{ 1, 16, 30, 44, 58, 72, 86 },
	{ -2, 14, 31, 48, 65, 82, 99 },
	{ -4, 8, 21, 34, 47, 60, 73 },
	{ 0, 6, 12, 19, 25, 32, 38 },
	{ 13, 24, 36, 47, 59, 70, 82 },
	{ 20, 45, 70, 95, 119, 144, 169 },
	{ -1, 23, 49, 74, 99, 124, 150 },
	{ 0, 14, 28, 42, 57, 71, 85 },
	{ 4, 11, 18, 26, 33, 40, 48 },
	{ 6, 16, 27, 37, 47, 57, 67 },
	{ 16, 29, 42, 55, 68, 81, 93 },
	{ -4, 4, 12, 20, 29, 37, 45 },
	{ 12, 24, 36, 49, 61, 73, 85 },
	{ 0, 13, 27, 41, 55, 68, 82 },
	{ 2, 21, 40, 59, 78, 97, 116 },
	{ -1, 15, 32, 49, 66, 84, 101 },
	{ 7, 14, 21, 28, 36, 43, 50 },
	{ 17, 33, 48, 64, 80, 95, 111 },
};
static int_t<4,64> neck_lateral_convs_2_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x4ef0400fef12effeL, 0xfc310fe0e1fff500L, 0x114e10f11f310f01L, 0xf0eb00efef120131L) },
	{ C64(0x232ede01ebeff302L, 0xfc0e120d30f10341L, 0xf2010fbfef0eee4fL, 0x0ff1f24fe1f0201fL) },
	{ C64(0x1e0efdffddde0fffL, 0x1e0f10fe00e00bf0L, 0xe14f12cfed40eeedL, 0xeda90de00e10e0f1L) },
	{ C64(0x2f3421121e049111L, 0x01fe0112201f115bL, 0x0c33132027dee200L, 0xa21022e2e0e22de1L) },
	{ C64(0xff3f1bfdc1c34eedL, 0xb0e3ecedd1e0fcfeL, 0xbeeefdd0efc110ecL, 0x4dcad221d013feffL) },
	{ C64(0xca36f0f357143ff3L, 0xef403012fd03e131L, 0x0f121e5325d01302L, 0x27d1d22e22f4fe1fL) },
	{ C64(0xe10410b02354eb00L, 0x23e2209bee419f31L, 0xe43052126f00d1e4L, 0xf012f34601f0e2feL) },
	{ C64(0xfe111003011eedd1L, 0xef1c1eefdf01ecf1L, 0xe0f010cfdf24f1dfL, 0xff0d201f00ffd01dL) },
	{ C64(0x3cfc20f30ff1e0caL, 0xe2eef0d2befed2baL, 0x4ecf031fe0f4d60dL, 0x3a6f17fd6ea1cd0fL) },
	{ C64(0xef1fc4f30d3fee0fL, 0xfd1a61003cf2cd90L, 0xf1d209cda11ea2feL, 0x2b2022f900cdcf0cL) },
	{ C64(0xfd1ff00e21202011L, 0x1f911ac1c3ff6b00L, 0xa0efff22fff4211fL, 0x26e12d4020ddfc21L) },
	{ C64(0xa11feb4f2a2de324L, 0x23da21513201290dL, 0x0217fccded00de1fL, 0x1cf56e900c4eff1eL) },
	{ C64(0xe031f1ddd2201332L, 0x1e2120132104315cL, 0x1e3e2e10020f0520L, 0xb3f43a50306010e4L) },
	{ C64(0xeceaa0d9bff7344fL, 0x2d1435ae3dfd22e5L, 0x4fcb1c132ef3f3f1L, 0xebdca6fff10fc112L) },
	{ C64(0xd1346234fe1ce013L, 0xa1f1352da1f3ed6eL, 0xc22f30ddcf1d2ddeL, 0xf10b042110e0cd1eL) },
	{ C64(0xe15d0d2412d5f64eL, 0x1b302e135cde2eaeL, 0xcfeffd001eedaf6fL, 0x114103ffd2efde2fL) },
	{ C64(0x4cf0f0115c0ddf03L, 0xd3ffff0fe0e1df1fL, 0x0120e22dfe0ffffeL, 0x051ef3f01dbeefffL) },
	{ C64(0x2e0ec00b42ce0624L, 0x221d34d44ee3026dL, 0x14201abf1e0f1e2fL, 0xf1102ec2019fe10fL) },
	{ C64(0xe3e235352241fad0L, 0x402c232ff43fac12L, 0x3101103a10114291L, 0x471f205f1e130ed2L) },
	{ C64(0x2f4ffd00f3df04f0L, 0x2341dd052fe134f0L, 0xfe3d1f1090fe0161L, 0x120200cce1e201ffL) },
	{ C64(0xc0143473d1fa1121L, 0xdf3e2f4f0103ff3dL, 0xdb20edeec100250dL, 0x3ffa304d12052fecL) },
	{ C64(0x21001d0c3231041eL, 0x4f1e41f20fffefd7L, 0x36ff0f01bb11dbf1L, 0x2f01f4edbbdbc54aL) },
	{ C64(0xd3002fc2d0eb2f00L, 0x30f2230f0db5d116L, 0x22fd10fd214ce92dL, 0xf0f1ff3aef1e4ff0L) },
	{ C64(0xf4320ff241232df3L, 0xf200fd11025f01e2L, 0xdf3f1101fcf11010L, 0x5234010f0211f10fL) },
	{ C64(0x2e1a1b04f11e233eL, 0x103f1900220f1f1eL, 0xe0e1b1fd41000030L, 0xf3cffc031c021005L) },
	{ C64(0xbf603f01f5c62fddL, 0x0016dc2fac11df13L, 0xcd2202f1b1f1320fL, 0x25f00630bf51f10fL) },
	{ C64(0x3124eeff2dae1116L, 0x1ffd00130116217fL, 0xb3220abf1fcd1e2bL, 0xe6101ec31fa0da11L) },
	{ C64(0x920f0b4015ef601eL, 0x52120deef13e39bfL, 0x0ee6ee62f503ef14L, 0x6ee5dfc2ff10d14dL) },
	{ C64(0x6d2216dfc6220eecL, 0xeb2474acfcd0f5d1L, 0x42ffe3151032a0afL, 0xe231014f1301c62dL) },
	{ C64(0x21f120ee0f11fdefL, 0x7efc51f03dee0e01L, 0x410f301302c111f7L, 0x26c0212e17a23920L) },
	{ C64(0x22bee4b001f3edc1L, 0x61ba00d0ea0df2b0L, 0xc0db1c1051fee0ebL, 0x031bb3001d240adfL) },
	{ C64(0xef2af03f1bccf352L, 0xed0061121eed302eL, 0xfe041fd602019e2eL, 0xeef1d2b01eeea460L) },
	{ C64(0xa11053e11e11f500L, 0xd20ee1d0cb03ba12L, 0xf0d2d6f35104f02eL, 0x4d3f411d0f4d112bL) },
	{ C64(0x0f4d1ffe2d130df0L, 0xf0d001ff11ff0f2fL, 0xe00fef0f21ecdd0fL, 0x1fef1f4f003efc1eL) },
	{ C64(0xffee3e0f30d46ee0L, 0x2c200eff11e2fd20L, 0x00ffefd1e0fefe01L, 0x3e0d0220ef2122f0L) },
	{ C64(0xc0d2dda21cdfdbf0L, 0x24dedc20e9e2bbffL, 0xdfe0e4e2f0550000L, 0x2f32030f103f2a1eL) },
	{ C64(0x2e3f3e3b1204244fL, 0x44f42013421d30f0L, 0xfff12f74221e4352L, 0x4502c12120dd0e31L) },
	{ C64(0xe612e120af20bfe0L, 0x1e1012c9134f0141L, 0x0f1fefd1515412aeL, 0xbe1fdf050110e01dL) },
	{ C64(0xf3f0f03faffed522L, 0xc431e232c12e33e0L, 0xdf311abf3f50201cL, 0x02eef112c0b3c10bL) },
	{ C64(0x1fec30f6ec0f0b0dL, 0x0b0d012d160ed0dfL, 0x312103ee4e2f1ef4L, 0xbcd4003a004e4f02L) },
	{ C64(0xa11b13ea12ff1c2fL, 0x3dbd4e1f0fe00b02L, 0x93faff2f20ffb20eL, 0xf004ff2d1b0edc3fL) },
	{ C64(0x001fb011eee321f5L, 0x2ff1023f3005e001L, 0x4073dfa01c474f0dL, 0x12b24e10f0402f02L) },
	{ C64(0xfe141dcb125225e4L, 0x04033b12baf60054L, 0x0e31be5412540200L, 0x101e2a6e2fde230cL) },
	{ C64(0xef13b311dc2d2532L, 0xde0f461f00eff3edL, 0x60ef2fe142efcec1L, 0x1e20300d13ecb521L) },
	{ C64(0xd6f1b201d4e35013L, 0x0b0e1012024f531fL, 0x2ee23def1c0210e4L, 0x12044100b5232122L) },
	{ C64(0x201dd10f15e41d3fL, 0xf002ed020e0c10c3L, 0x20bff0210eeed3f1L, 0x45fc0c30f0000000L) },
	{ C64(0xfee0f1c01ff10bd0L, 0x3131ff210fe0e505L, 0xe31c200221512ff0L, 0x0f3ff010ed3ff11fL) },
	{ C64(0xbf23e16204f2eab0L, 0xfd2ff31ff2120df3L, 0xf00e0e1ad050f2d1L, 0x623a011ad21fd0f1L) },
	{ C64(0x0fb30f1f2f4a1113L, 0x22102e3123120e20L, 0x122200f02f353f00L, 0xe1e1fdf34001020fL) },
	{ C64(0xd13514e4be0edcfdL, 0xad42e1eecdf1d2efL, 0xe01125cf3000fff0L, 0x2f2f003fe332112fL) },
	{ C64(0x040eedf1d1be0bfeL, 0xf05fe3106e23fefdL, 0x79f0f0f1bf2ed2d1L, 0x2c2210d00e0111e0L) },
	{ C64(0x211cef3f25141f0fL, 0x00112203c12d0df3L, 0x32e0001dbeedb4f0L, 0x510d112002f0c220L) },
	{ C64(0xf106f01206e40340L, 0x343022030e323504L, 0x3d321e56411c1430L, 0x070200f011c1bf5dL) },
	{ C64(0xf0200e2214051ffeL, 0x31eeedf0f01e4ef4L, 0x03dded4bffedb413L, 0x221fe00fe030e020L) },
	{ C64(0x1d5e9b2b10d04310L, 0x90e5252050fff0ffL, 0x3fc114c0e0def1e5L, 0xe9d212a2e13f52e6L) },
	{ C64(0xffed91f14ef2301fL, 0x1b011fd101fee2f0L, 0x22cededc0dd4effeL, 0x2d10db1ef16ef0f2L) },
	{ C64(0xf15f213efc230120L, 0x013d21400131fd3dL, 0x01f112f0df2015ffL, 0xfe005ecd1d1e04f1L) },
	{ C64(0x220412141b493125L, 0xd11f122030f32226L, 0xf51042212f1c3d31L, 0xf63021043212212fL) },
	{ C64(0x5e41120e2160033eL, 0x1c2f5c0714542d53L, 0xd13a212391241f4dL, 0x20da5f5d1e22612dL) },
	{ C64(0x11dd50f02f111241L, 0xf210cef4fbf0f4dfL, 0xbfe0015710f11f6eL, 0xf21203e52ffd0d5cL) },
	{ C64(0xd16ffc00a0e2fedeL, 0xc0142fff00eeef3aL, 0xfb0eddcfe7caab0bL, 0x629f0a40bf11eb0dL) },
	{ C64(0x29bce0cb21f30d0aL, 0x33f2ecc0ab1b0a26L, 0x522ade7fa0f3a6d4L, 0xdfbadf2d29ccac2bL) },
	{ C64(0x20dee00c1e0e112eL, 0x20210200df0ef1c0L, 0x10200ffeff3211d0L, 0x1e0e002e1e0edff2L) },
	{ C64(0xfdee2f2fbed0d0efL, 0xf01e02ed2df101ecL, 0x000c20d312700f4fL, 0xf3253bdb0ddef1dfL) },
};
static int neck_lateral_convs_2_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -99, -84, -69, -53, -38, -22, -7, 7, 23, 38, 54, 69, 84, 100 },
	{ -120, -102, -84, -65, -47, -29, -11, 6, 25, 43, 61, 79, 98, 116 },
	{ -132, -115, -97, -80, -62, -45, -27, -10, 7, 24, 42, 59, 76, 94 },
	{ -98, -81, -64, -46, -29, -12, 5, 22, 39, 57, 74, 91, 109, 126 },
	{ -170, -147, -125, -103, -80, -58, -36, -13, 8, 30, 53, 75, 97, 119 },
	{ -108, -88, -68, -47, -27, -7, 12, 33, 53, 73, 93, 113, 134, 154 },
	{ -103, -85, -68, -50, -32, -15, 2, 20, 37, 55, 73, 90, 108, 126 },
	{ -130, -111, -93, -74, -56, -37, -19, 0, 17, 36, 55, 73, 92, 110 },
	{ -143, -122, -102, -81, -61, -41, -20, 0, 20, 40, 61, 81, 101, 122 },
	{ -160, -139, -119, -98, -77, -56, -35, -15, 5, 26, 47, 68, 89, 109 },
	{ -112, -95, -78, -62, -45, -28, -12, 4, 21, 37, 54, 70, 87, 104 },
	{ -146, -125, -105, -85, -65, -45, -25, -4, 15, 35, 55, 75, 96, 116 },
	{ -115, -96, -78, -59, -40, -22, -3, 15, 33, 52, 71, 90, 108, 127 },
	{ -133, -114, -96, -78, -59, -41, -23, -4, 13, 31, 50, 68, 86, 105 },
	{ -142, -119, -97, -74, -52, -30, -7, 14, 36, 59, 81, 103, 126, 148 },
	{ -124, -106, -89, -72, -54, -37, -20, -3, 14, 31, 48, 66, 83, 100 },
	{ -144, -122, -101, -80, -59, -37, -16, 4, 26, 47, 68, 89, 111, 132 },
	{ -151, -128, -105, -83, -60, -37, -15, 7, 30, 53, 75, 98, 121, 143 },
	{ -96, -79, -62, -45, -28, -12, 4, 21, 38, 55, 72, 88, 105, 122 },
	{ -110, -93, -75, -58, -40, -23, -6, 11, 28, 46, 63, 81, 98, 116 },
	{ -106, -89, -71, -54, -36, -19, -2, 15, 32, 49, 67, 84, 101, 119 },
	{ -120, -103, -86, -68, -51, -34, -17, 0, 16, 33, 50, 67, 84, 101 },
	{ -91, -76, -61, -47, -32, -18, -3, 11, 25, 40, 54, 69, 84, 98 },
	{ -113, -94, -74, -55, -35, -16, 3, 22, 42, 61, 81, 100, 120, 139 },
	{ -99, -84, -69, -54, -39, -24, -10, 4, 19, 34, 49, 64, 79, 93 },
	{ -134, -111, -89, -66, -43, -20, 1, 24, 47, 69, 92, 115, 137, 160 },
	{ -114, -96, -78, -60, -42, -24, -5, 12, 30, 48, 66, 84, 103, 121 },
	{ -136, -116, -96, -77, -57, -37, -18, 1, 21, 41, 60, 80, 100, 120 },
	{ -111, -92, -74, -55, -36, -18, 0, 18, 37, 55, 74, 93, 111, 130 },
	{ -114, -97, -80, -63, -46, -29, -13, 3, 20, 37, 54, 71, 88, 105 },
	{ -143, -125, -106, -87, -68, -49, -31, -12, 6, 25, 44, 62, 81, 100 },
	{ -133, -114, -95, -75, -56, -36, -17, 2, 21, 41, 60, 80, 99, 119 },
	{ -105, -88, -70, -52, -34, -16, 1, 19, 37, 55, 73, 91, 108, 126 },
	{ -111, -95, -79, -63, -47, -32, -16, 0, 15, 31, 47, 62, 78, 94 },
	{ -110, -93, -76, -59, -41, -24, -7, 9, 27, 44, 61, 78, 96, 113 },
	{ -139, -120, -101, -81, -62, -42, -23, -3, 15, 34, 54, 73, 93, 112 },
	{ -119, -98, -77, -56, -35, -14, 6, 27, 48, 69, 90, 111, 132, 153 },
	{ -110, -92, -75, -58, -41, -23, -6, 10, 27, 45, 62, 79, 97, 114 },
	{ -154, -132, -109, -87, -65, -42, -20, 1, 24, 46, 69, 91, 113, 136 },
	{ -133, -114, -94, -74, -55, -35, -15, 4, 23, 43, 63, 82, 102, 122 },
	{ -134, -115, -96, -77, -58, -39, -21, -2, 16, 35, 54, 73, 92, 111 },
	{ -137, -115, -92, -70, -47, -25, -3, 19, 41, 64, 86, 108, 131, 153 },
	{ -97, -80, -63, -45, -28, -11, 6, 23, 40, 58, 75, 93, 110, 127 },
	{ -139, -119, -100, -81, -61, -42, -23, -4, 15, 34, 53, 73, 92, 111 },
	{ -132, -110, -89, -67, -45, -24, -2, 18, 40, 61, 83, 105, 126, 148 },
	{ -149, -126, -104, -81, -59, -37, -14, 7, 30, 52, 75, 97, 120, 142 },
	{ -86, -71, -57, -42, -27, -12, 1, 16, 31, 45, 60, 75, 89, 104 },
	{ -114, -97, -80, -63, -46, -29, -12, 4, 21, 39, 56, 73, 90, 107 },
	{ -127, -106, -86, -65, -45, -24, -4, 15, 36, 56, 77, 97, 118, 138 },
	{ -144, -122, -101, -79, -58, -36, -14, 6, 28, 49, 71, 92, 114, 135 },
	{ -115, -97, -79, -60, -42, -24, -6, 12, 30, 48, 66, 84, 103, 121 },
	{ -149, -126, -103, -80, -58, -35, -12, 9, 32, 55, 78, 100, 123, 146 },
	{ -112, -92, -71, -51, -30, -10, 10, 31, 51, 72, 92, 113, 133, 154 },
	{ -176, -149, -122, -95, -68, -41, -14, 12, 39, 66, 93, 120, 147, 174 },
	{ -91, -78, -65, -52, -38, -25, -12, 0, 13, 26, 39, 53, 66, 79 },
	{ -135, -116, -97, -78, -59, -40, -21, -2, 16, 35, 54, 74, 93, 112 },
	{ -80, -66, -53, -39, -25, -11, 2, 16, 30, 43, 57, 71, 85, 99 },
	{ -97, -77, -58, -38, -18, 1, 20, 40, 60, 79, 99, 119, 139, 158 },
	{ -89, -72, -55, -38, -21, -4, 12, 29, 46, 62, 79, 96, 113, 130 },
	{ -113, -95, -77, -59, -41, -23, -5, 12, 30, 48, 66, 84, 102, 120 },
	{ -159, -137, -115, -93, -71, -48, -26, -4, 17, 39, 62, 84, 106, 128 },
	{ -180, -156, -132, -108, -84, -60, -36, -12, 12, 36, 60, 84, 108, 132 },
	{ -102, -87, -72, -57, -43, -28, -13, 1, 15, 30, 45, 60, 74, 89 },
	{ -126, -108, -89, -71, -53, -35, -16, 1, 19, 37, 55, 74, 92, 110 },
};
static int_t<4,1> neck_lateral_convs_2_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xe), C(0xe), C(0x0), C(0xd), C(0xe), C(0x1), C(0x2), C(0x4), C(0x5), },
	{ C(0x0), C(0x1), C(0x4), C(0xf), C(0x1), C(0x3), C(0xf), C(0x0), C(0x4), },
	{ C(0x0), C(0xf), C(0x0), C(0x0), C(0x0), C(0x2), C(0x5), C(0x2), C(0x7), },
	{ C(0xc), C(0xe), C(0x1), C(0x9), C(0xd), C(0x3), C(0xd), C(0xe), C(0x1), },
	{ C(0x3), C(0x0), C(0x2), C(0x4), C(0x1), C(0x2), C(0x4), C(0x1), C(0x2), },
	{ C(0x4), C(0x3), C(0x1), C(0xd), C(0xe), C(0xd), C(0xd), C(0xc), C(0xb), },
	{ C(0xc), C(0xf), C(0x2), C(0xf), C(0xb), C(0x1), C(0x4), C(0xa), C(0xb), },
	{ C(0xf), C(0x0), C(0x2), C(0x0), C(0x2), C(0x2), C(0x0), C(0x2), C(0x4), },
	{ C(0x5), C(0x2), C(0x7), C(0xb), C(0xe), C(0x5), C(0x0), C(0x2), C(0x6), },
	{ C(0xf), C(0xf), C(0xa), C(0x1), C(0x1), C(0xc), C(0x0), C(0xf), C(0x9), },
	{ C(0x0), C(0x3), C(0x2), C(0xc), C(0xc), C(0x0), C(0xe), C(0x9), C(0xe), },
	{ C(0x7), C(0x2), C(0x3), C(0x2), C(0xf), C(0xf), C(0x7), C(0x1), C(0x1), },
	{ C(0xc), C(0xf), C(0xb), C(0xb), C(0x0), C(0x4), C(0xb), C(0x0), C(0xf), },
	{ C(0xc), C(0x2), C(0x1), C(0x4), C(0x7), C(0x4), C(0x1), C(0x3), C(0x0), },
	{ C(0xf), C(0xf), C(0xb), C(0x0), C(0xe), C(0xa), C(0x2), C(0x0), C(0xd), },
	{ C(0x1), C(0xf), C(0x4), C(0xf), C(0xa), C(0x4), C(0x4), C(0x4), C(0x7), },
	{ C(0x2), C(0x0), C(0xe), C(0x1), C(0x1), C(0x1), C(0x4), C(0x3), C(0x4), },
	{ C(0x4), C(0x4), C(0x6), C(0x0), C(0x0), C(0x1), C(0x2), C(0x0), C(0x2), },
	{ C(0xf), C(0x9), C(0x0), C(0xd), C(0x9), C(0xf), C(0x1), C(0xf), C(0x3), },
	{ C(0x5), C(0x0), C(0x0), C(0x6), C(0x1), C(0xf), C(0x2), C(0x0), C(0xf), },
	{ C(0xb), C(0xf), C(0x2), C(0xa), C(0x2), C(0x3), C(0x9), C(0xf), C(0x1), },
	{ C(0x7), C(0x2), C(0x3), C(0x7), C(0x0), C(0xc), C(0x4), C(0xf), C(0xe), },
	{ C(0x0), C(0x2), C(0x0), C(0x6), C(0x0), C(0x9), C(0x3), C(0xd), C(0x9), },
	{ C(0xf), C(0x0), C(0xe), C(0xf), C(0xe), C(0x0), C(0xd), C(0xc), C(0xf), },
	{ C(0x1), C(0x4), C(0xc), C(0x0), C(0xd), C(0x9), C(0xe), C(0xf), C(0xf), },
	{ C(0xd), C(0xd), C(0xb), C(0x0), C(0xe), C(0xc), C(0x0), C(0xf), C(0xe), },
	{ C(0x7), C(0x3), C(0x7), C(0x0), C(0xd), C(0x0), C(0x3), C(0xf), C(0x0), },
	{ C(0x5), C(0x0), C(0xf), C(0x5), C(0x0), C(0xf), C(0x7), C(0x1), C(0x1), },
	{ C(0x0), C(0xe), C(0xa), C(0x1), C(0x1), C(0xc), C(0x0), C(0x0), C(0x9), },
	{ C(0xc), C(0xe), C(0xb), C(0xd), C(0xc), C(0xb), C(0x3), C(0x1), C(0x1), },
	{ C(0xb), C(0xd), C(0xd), C(0xc), C(0x2), C(0x0), C(0x9), C(0xf), C(0xf), },
	{ C(0x1), C(0xe), C(0x2), C(0xf), C(0x0), C(0x7), C(0xe), C(0x2), C(0x6), },
	{ C(0xa), C(0xd), C(0xc), C(0xb), C(0x1), C(0x1), C(0xf), C(0x1), C(0x2), },
	{ C(0xf), C(0x1), C(0x2), C(0xe), C(0x1), C(0x3), C(0x0), C(0x4), C(0x3), },
	{ C(0x0), C(0xf), C(0xe), C(0x2), C(0x1), C(0x0), C(0x4), C(0x2), C(0x4), },
	{ C(0x2), C(0x2), C(0x4), C(0x4), C(0x0), C(0x1), C(0xb), C(0x9), C(0x9), },
	{ C(0xc), C(0xe), C(0xd), C(0x0), C(0xf), C(0xe), C(0xe), C(0xd), C(0x0), },
	{ C(0xf), C(0x0), C(0xf), C(0xe), C(0xf), C(0xf), C(0xb), C(0xb), C(0xb), },
	{ C(0xf), C(0x0), C(0xe), C(0xd), C(0xe), C(0xc), C(0xe), C(0xf), C(0xb), },
	{ C(0x2), C(0x2), C(0x3), C(0x1), C(0x2), C(0x1), C(0x6), C(0x5), C(0x0), },
	{ C(0x3), C(0xe), C(0x9), C(0x3), C(0x0), C(0x9), C(0x2), C(0x2), C(0xb), },
	{ C(0xd), C(0xe), C(0xe), C(0xe), C(0xd), C(0xd), C(0xf), C(0xe), C(0xd), },
	{ C(0xc), C(0xe), C(0xc), C(0xd), C(0xd), C(0xd), C(0x0), C(0xf), C(0xe), },
	{ C(0x4), C(0x3), C(0xb), C(0x4), C(0x6), C(0xb), C(0x5), C(0x4), C(0xc), },
	{ C(0x0), C(0xf), C(0x0), C(0xd), C(0xd), C(0xe), C(0xc), C(0xd), C(0xd), },
	{ C(0xf), C(0xf), C(0xd), C(0xe), C(0xf), C(0xe), C(0xd), C(0xe), C(0xf), },
	{ C(0x3), C(0xe), C(0xc), C(0x4), C(0xd), C(0xb), C(0x2), C(0x2), C(0x5), },
	{ C(0x0), C(0x2), C(0x2), C(0x1), C(0x2), C(0xf), C(0xb), C(0x9), C(0x9), },
	{ C(0xf), C(0xd), C(0xc), C(0x1), C(0xe), C(0xd), C(0xf), C(0xf), C(0xd), },
	{ C(0x5), C(0x2), C(0x4), C(0x3), C(0x0), C(0x2), C(0x0), C(0xf), C(0x0), },
	{ C(0xe), C(0x1), C(0x2), C(0xd), C(0x2), C(0x3), C(0xe), C(0x3), C(0x6), },
	{ C(0xd), C(0xe), C(0xd), C(0xf), C(0xe), C(0xd), C(0x1), C(0xe), C(0xe), },
	{ C(0x7), C(0x4), C(0x7), C(0x2), C(0xe), C(0x1), C(0x1), C(0xf), C(0xe), },
	{ C(0x0), C(0xf), C(0xc), C(0xd), C(0xe), C(0xd), C(0x1), C(0xf), C(0xf), },
	{ C(0x5), C(0x7), C(0x6), C(0xd), C(0x2), C(0xf), C(0xe), C(0xe), C(0xf), },
	{ C(0xf), C(0xe), C(0x0), C(0x3), C(0x4), C(0x3), C(0x2), C(0x1), C(0x2), },
	{ C(0x0), C(0xe), C(0x0), C(0x6), C(0x0), C(0xc), C(0x7), C(0xf), C(0x1), },
	{ C(0xc), C(0x0), C(0xc), C(0x1), C(0x1), C(0xa), C(0xf), C(0x1), C(0xc), },
	{ C(0xd), C(0xe), C(0x3), C(0xd), C(0xc), C(0x0), C(0xb), C(0xc), C(0xc), },
	{ C(0xd), C(0xc), C(0xc), C(0x3), C(0x6), C(0x2), C(0x4), C(0x4), C(0xf), },
	{ C(0x2), C(0x4), C(0x4), C(0x0), C(0x1), C(0x4), C(0x0), C(0x2), C(0x4), },
	{ C(0x4), C(0x2), C(0x1), C(0x3), C(0x1), C(0x1), C(0x5), C(0x4), C(0x5), },
	{ C(0xd), C(0xf), C(0x1), C(0xf), C(0x1), C(0x2), C(0x2), C(0x3), C(0x1), },
	{ C(0xf), C(0x0), C(0x0), C(0x1), C(0x2), C(0x3), C(0x5), C(0x4), C(0x5), },
};
static int neck_lateral_convs_2_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 0, 10, 20, 30, 40, 50, 60 },
	{ 0, 20, 40, 60, 79, 99, 119 },
	{ 0, 12, 25, 37, 50, 63, 75 },
	{ 12, 27, 42, 57, 72, 87, 102 },
	{ -3, 15, 35, 55, 75, 95, 115 },
	{ 0, 16, 32, 48, 65, 81, 97 },
	{ 13, 25, 36, 48, 60, 71, 83 },
	{ 0, 15, 31, 47, 62, 78, 94 },
	{ -3, 13, 30, 47, 64, 81, 98 },
	{ 11, 27, 42, 58, 73, 89, 104 },
	{ 14, 30, 47, 63, 79, 95, 111 },
	{ 6, 20, 33, 47, 61, 75, 89 },
	{ -10, 8, 28, 47, 67, 86, 106 },
	{ 10, 27, 45, 63, 81, 99, 117 },
	{ 9, 24, 38, 52, 66, 80, 94 },
	{ 5, 22, 38, 55, 72, 88, 105 },
	{ 4, 14, 24, 34, 44, 54, 64 },
	{ 9, 23, 37, 50, 64, 78, 92 },
	{ 10, 24, 38, 52, 67, 81, 95 },
	{ 8, 18, 29, 39, 49, 60, 70 },
	{ 3, 19, 34, 50, 65, 81, 97 },
	{ 3, 20, 36, 52, 68, 84, 101 },
	{ 1, 16, 31, 47, 62, 78, 93 },
	{ -2, 10, 24, 38, 51, 65, 78 },
	{ 13, 26, 39, 52, 65, 78, 91 },
	{ 1, 20, 39, 58, 77, 96, 116 },
	{ -5, 9, 24, 39, 54, 69, 83 },
	{ 11, 29, 47, 66, 84, 103, 121 },
	{ 5, 18, 31, 45, 58, 71, 84 },
	{ 0, 7, 16, 24, 33, 42, 50 },
	{ 10, 22, 35, 48, 60, 73, 85 },
	{ 9, 18, 28, 38, 47, 57, 67 },
	{ 9, 21, 34, 47, 60, 72, 85 },
	{ 3, 15, 26, 38, 49, 61, 73 },
	{ 1, 12, 24, 35, 47, 58, 69 },
	{ 8, 19, 29, 40, 50, 61, 71 },
	{ -3, 8, 19, 31, 42, 54, 66 },
	{ 8, 23, 37, 52, 66, 80, 95 },
	{ 6, 17, 27, 38, 49, 60, 70 },
	{ 7, 21, 35, 48, 62, 76, 90 },
	{ 19, 33, 47, 61, 75, 89, 103 },
	{ 0, 14, 27, 41, 55, 68, 82 },
	{ 7, 24, 41, 58, 75, 92, 109 },
	{ 19, 35, 52, 68, 85, 102, 118 },
	{ -1, 10, 21, 33, 44, 56, 67 },
	{ 8, 18, 28, 39, 49, 60, 70 },
	{ 2, 19, 36, 53, 70, 87, 104 },
	{ 1, 16, 30, 45, 59, 74, 89 },
	{ -1, 19, 39, 60, 80, 101, 121 },
	{ -1, 10, 22, 34, 46, 58, 70 },
	{ 0, 11, 22, 34, 45, 56, 68 },
	{ 5, 15, 24, 34, 44, 54, 64 },
	{ 12, 26, 40, 53, 67, 81, 94 },
	{ 4, 13, 22, 30, 39, 48, 56 },
	{ 19, 38, 58, 77, 96, 116, 135 },
	{ 3, 14, 25, 36, 48, 59, 70 },
	{ -2, 16, 34, 53, 72, 91, 110 },
	{ 2, 14, 26, 38, 50, 62, 74 },
	{ 10, 27, 45, 62, 80, 97, 115 },
	{ 12, 22, 33, 43, 53, 64, 74 },
	{ -1, 7, 16, 26, 35, 44, 54 },
	{ -5, 9, 24, 39, 54, 69, 84 },
	{ 3, 19, 34, 50, 66, 81, 97 },
	{ 1, 16, 30, 45, 60, 74, 89 },
};
static int_t<4,64> bbox_head_multi_level_share_convs_0_0_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x0c4f24d2141f3404L, 0x0f0cfeaaec40010bL, 0x10e3539c34dd1413L, 0xd11e0331dd0ffee2L) },
	{ C64(0x32d0231100fe62f7L, 0x6b7ad119af2ee10cL, 0x910b21dc242d9531L, 0x0c13dce5c12b31feL) },
	{ C64(0xeeef721b3d0eed3dL, 0x42df010bdfffd1d1L, 0xece2c22345ef047dL, 0x00ef02ecf093c5f1L) },
	{ C64(0x7b29a0175ed26523L, 0x1c4bfeca916aa695L, 0x931d1bdd0222bf12L, 0x59c5b903c14c56aeL) },
	{ C64(0xd1166ae20392b31dL, 0xf6e545c633c01034L, 0xdea644311a4e6404L, 0x22e6b20a2e4ecd63L) },
	{ C64(0xfb70012d2ae1db11L, 0x0342f42500e4f1f3L, 0x0d170ef232d630eaL, 0xf3e1e2df3db123c0L) },
	{ C64(0xb1110d72f0d53f49L, 0x37ef20ff20cff101L, 0x73edc4f31113e0e1L, 0x03e01f1f0222ff10L) },
	{ C64(0xfbdd0c05e0e3210fL, 0xfdde3efcafeeed9fL, 0xefddfce00efbf11bL, 0xfa9de0206df90aa1L) },
	{ C64(0x7a1ed3e96e2fcfb5L, 0xdd41cff272eccd19L, 0xf600e0eead1dce2bL, 0x4e632cca0bd971fbL) },
	{ C64(0xd0f34bfd9c1ddddfL, 0xd1012611e2d73c2cL, 0xe1afdd021fef10ebL, 0x93e944ff6debdef6L) },
	{ C64(0xeb0f200ceae05cb1L, 0x4bde1b219030e0a1L, 0x11fc1fdf62fe410cL, 0x932dd2c0ff91f20eL) },
	{ C64(0x1914032400c1f350L, 0x03120fec110e1f2fL, 0x01f5edaf0152e44fL, 0xf062e100e0e0064fL) },
	{ C64(0x4f0f96f4ffcf5304L, 0x321aa9b9e01e020bL, 0xc72d5de9ef1d012dL, 0x0c139ef3b6ef731bL) },
	{ C64(0xe13e0df3d3062f4cL, 0xe59b200d4e3b023dL, 0x722e1d13e4250fe1L, 0xe3ef3c6c0f4e4e2eL) },
	{ C64(0xe0cfdb14ece1e4cfL, 0x4ecf20ddb1ffefaeL, 0xde2fffc21c10132eL, 0xdd91d0ce4ffde205L) },
	{ C64(0x2e2bde69f009de77L, 0x19301b10122dd3fbL, 0xee2600e1ea49d00eL, 0xcbfd2b14e4d24ef1L) },
	{ C64(0xe42372cc0960cf03L, 0x21d6d2f4ed31fd37L, 0xed37105224df5ebfL, 0xc0af03ff51c5ac62L) },
	{ C64(0xee1efae09b09fdefL, 0xdefb2020f0d6f90cL, 0xff9ef9d0fde1eceaL, 0x91fcf20f4cd9dfd2L) },
	{ C64(0x040d1ef2c10c02f0L, 0x00dc1e2ebf0efc92L, 0x1faf2c00011f3dd1L, 0xf0ced30f3ffe0fa7L) },
	{ C64(0xfcef09e7daf314edL, 0x1cecf3ced09edfc4L, 0xdf2fdfde1deed54cL, 0x2aa2fe0d1c60dde2L) },
	{ C64(0x142422e31edefcf0L, 0x161401e6509320d7L, 0xbde00153007e055cL, 0x10f4c4ef2d1f051eL) },
	{ C64(0x206010fd0e2752bcL, 0x020fb2e19c3e012eL, 0xf5cc2c4c15e42ee1L, 0xc13110ee0fc0c120L) },
	{ C64(0x2ff1bff0fcd04ef7L, 0x2c21ba021b2aefdfL, 0xa7ff73bf30dad0ecL, 0xfc23af12f5034eefL) },
	{ C64(0x3e0fdceff3049209L, 0xd4a152046375edfeL, 0x79061a219ee4e22cL, 0x7e5eebff4a0ae2cfL) },
	{ C64(0x494df113ffb13322L, 0x341f00d9fed2011eL, 0xf0001ea0e272af30L, 0x0021d00401d01421L) },
	{ C64(0x2d13135100004f1fL, 0x72210020d412103dL, 0x126f2f0b423ef7eeL, 0x066f40f1f2ae4620L) },
	{ C64(0xf4d3dffebfcdeef2L, 0x0141dbaa7107537cL, 0xf1dcce1aced0cffbL, 0xbe51fcffadefde6aL) },
	{ C64(0xee0efae09b19fdeeL, 0xde0c2020f0c6090dL, 0xff9ef9d00dd2fceaL, 0x91fcf10f4cd9cfd2L) },
	{ C64(0x772dd4021a931221L, 0xd23c0e0b1fc1d202L, 0xff2411311731030dL, 0xde20adb10191073bL) },
	{ C64(0xe0125e3ce0ef9e0bL, 0x01c1422041fcfef0L, 0xfd349434de120e1fL, 0x0000103e1d451defL) },
	{ C64(0x2560010e1bc0dd2cL, 0x041c0e0b14dff0d2L, 0xed43c2401f03020eL, 0x0f30fd0c1ce2c40aL) },
	{ C64(0x3f3f2a011b3921d5L, 0x0217a467cae14cd1L, 0xa1063c4e24ff2f1bL, 0xe3d1250f7debd301L) },
	{ C64(0x07cff1f126e02440L, 0xc12a30393141fd0eL, 0x301d3d3ff1af00f0L, 0x3d4d10f22f1c11efL) },
	{ C64(0x4210c4c10e0e5ed5L, 0x1e45bb05cdc01113L, 0xcf01506b670b153fL, 0xf20111c50f0aa3e4L) },
	{ C64(0xde50ccce0e141f42L, 0xeb7d3f1fcffcf12cL, 0xb130de0ef0f7eed5L, 0xdf2120f10de1c0f1L) },
	{ C64(0xfde1011f0ef0fe1eL, 0x030001100ffe0f00L, 0xfefee0e0f04f0f1eL, 0xf12e00fff0f0f20fL) },
	{ C64(0x03105eeefb4e00a0L, 0x10e4c330fd0531f3L, 0xcf023254642f2ccfL, 0xe6fd52013dc5bec6L) },
	{ C64(0x010cf1fdac330323L, 0xff0f621c44f62e3aL, 0x5cf15d2fbcb0e227L, 0x2d5e5dde3402fe02L) },
	{ C64(0x57201dfcef41bed4L, 0xdfc0000f7f7f5174L, 0x44f0716dd22e29a7L, 0x02e042cf13b42d24L) },
	{ C64(0x1f02e16211f3fe70L, 0xc345102131e00014L, 0x45201ce00f42e23eL, 0xe341202ef32e510eL) },
	{ C64(0x214326cb3c1eeef3L, 0x42031e456e434061L, 0x33246f30355d4b92L, 0xf75115cf14e42223L) },
	{ C64(0xa0d113b6236e223bL, 0x5e1524b5a3a70a97L, 0x192f95547092365cL, 0x0292653f2c22d40eL) },
	{ C64(0x2e61b54e01b17efcL, 0x20340011f0a2e0cdL, 0x130f03dd2e7fa510L, 0xf062fc20e00de2fdL) },
	{ C64(0xfacd9cf19feb0ce6L, 0x2e2ad9ffb129a99eL, 0x13ae30a5eacc5aeeL, 0xac1aab223212dc39L) },
	{ C64(0xae901201722032c4L, 0x0f41f9303f407703L, 0xc3691f3422c20342L, 0x66e60ef260201513L) },
	{ C64(0x3cb5923092ba2031L, 0x22192a99063ac99dL, 0xf39bfddbacacd45dL, 0xb97a9aeeef1c04faL) },
	{ C64(0xc7055139136cebdfL, 0xd1e3e5b2e3c13ef2L, 0xd12da4721ecd1e0dL, 0x031d640d5235fad1L) },
	{ C64(0x52afe1ecdcee22a5L, 0x5903a900ea3f21dfL, 0xd7e9262a313acde1L, 0x0053ff05c40f4e90L) },
	{ C64(0x3dd2ed0e26101f60L, 0xa5af11017111014bL, 0x72d5fdf21c131f2eL, 0x15212d7f123d211eL) },
	{ C64(0x1011074a11147f03L, 0x014ffc6330144e5bL, 0x2302223203111520L, 0x2672101235eb230dL) },
	{ C64(0xff1ffadfac19fddeL, 0xde0d1000f0c60afeL, 0xfeaff9e00ed1fceaL, 0x90ec020f6cd9ded1L) },
	{ C64(0x0024020412202021L, 0x12123434c22a0b95L, 0x00f332161001d212L, 0x10e01111141134e2L) },
	{ C64(0x5001b441d9c0f3d2L, 0x2e3dc11edd110f11L, 0x9401521e245ce32eL, 0x1222dee4e3a23112L) },
	{ C64(0x6f2e11bf1c1e21a0L, 0xfefde0e1e904202cL, 0x349c7cfb14291e1eL, 0x3f6422e02bde01f0L) },
	{ C64(0x397f04fa09a1da1eL, 0x1133109ed091f1ffL, 0xd006e2bf0e400cd3L, 0x0c7401cbf2b1ffccL) },
	{ C64(0x2c4ef30501a13501L, 0x021b11090031e21cL, 0x01021e902200f510L, 0xf04fb411eeee132fL) },
	{ C64(0x2e4ffe953d2e7c16L, 0x4b7e420de9f6dee6L, 0xaed5b626f5cb4cd1L, 0xb19ff3140e42efe0L) },
	{ C64(0xe102f07711162f69L, 0x17f3f25210c010b7L, 0x5b0390e62ee616feL, 0xe1b0fd4b1a30922eL) },
	{ C64(0xd02f2e9f0f1dcbe1L, 0xa7cdd1f0d1ce0e11L, 0x191ed1121cd54f04L, 0x2d0fe343f112ce0fL) },
	{ C64(0x6129c479ee3651e9L, 0xf49cdaff1f2bb1dcL, 0x630c4e0c0414d009L, 0x1b310ae903dcd1d0L) },
	{ C64(0xc0cb6e21d0e21f3bL, 0x1fde4c00f71ed2a0L, 0x1b709ff42bd22201L, 0x0021ed00632102d3L) },
	{ C64(0x94a419d7d6e3226cL, 0x15d423f75c261216L, 0x2fedbf473b070203L, 0xe1c135703f630013L) },
	{ C64(0x63901241412e0eb1L, 0xac609b0d312ef10aL, 0xceb5f1cfbb2fc051L, 0x3d1293b5d3eb33feL) },
	{ C64(0x000f00f001000001L, 0x1f0f11f1e001f011L, 0x01f0001110f1f001L, 0x10110f0f01000100L) },
};
static int bbox_head_multi_level_share_convs_0_0_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -84, -72, -60, -47, -35, -23, -10, 1, 13, 26, 38, 51, 63, 75 },
	{ -143, -125, -106, -88, -69, -51, -32, -14, 4, 22, 41, 59, 77, 96 },
	{ -121, -102, -84, -66, -48, -30, -12, 5, 23, 41, 60, 78, 96, 114 },
	{ -155, -136, -118, -99, -80, -62, -43, -25, -6, 11, 30, 48, 67, 86 },
	{ -100, -81, -62, -44, -25, -6, 12, 31, 49, 68, 87, 106, 125, 143 },
	{ -126, -105, -85, -64, -44, -23, -3, 17, 37, 57, 78, 98, 119, 139 },
	{ -80, -66, -52, -37, -23, -9, 4, 19, 33, 47, 62, 76, 90, 104 },
	{ -196, -171, -146, -120, -95, -69, -44, -18, 6, 32, 57, 83, 108, 134 },
	{ -201, -176, -150, -125, -100, -74, -49, -24, 1, 26, 51, 76, 102, 127 },
	{ -91, -76, -62, -47, -33, -18, -4, 10, 24, 39, 53, 68, 82, 97 },
	{ -168, -145, -122, -98, -75, -52, -28, -5, 17, 41, 64, 87, 110, 134 },
	{ -84, -69, -55, -41, -26, -12, 2, 16, 31, 45, 60, 74, 88, 103 },
	{ -151, -130, -110, -89, -69, -48, -27, -7, 13, 33, 54, 74, 95, 116 },
	{ -81, -68, -54, -40, -26, -12, 1, 15, 28, 42, 56, 70, 84, 98 },
	{ -183, -157, -132, -106, -81, -56, -30, -5, 20, 45, 70, 96, 121, 147 },
	{ -147, -127, -107, -88, -68, -48, -28, -9, 10, 30, 49, 69, 89, 108 },
	{ -94, -77, -61, -44, -28, -11, 4, 21, 37, 54, 71, 87, 104, 120 },
	{ -107, -92, -78, -63, -48, -33, -18, -3, 11, 26, 41, 56, 71, 85 },
	{ -182, -155, -129, -103, -77, -50, -24, 1, 27, 54, 80, 106, 132, 159 },
	{ -174, -150, -127, -103, -79, -56, -32, -8, 15, 38, 62, 86, 109, 133 },
	{ -34, -26, -17, -9, -1, 6, 15, 23, 31, 40, 48, 56, 64, 73 },
	{ -140, -120, -100, -80, -60, -39, -19, 0, 20, 40, 60, 80, 100, 120 },
	{ -121, -104, -88, -71, -55, -38, -22, -5, 10, 27, 43, 60, 76, 93 },
	{ -161, -138, -115, -92, -69, -47, -24, -1, 21, 44, 67, 90, 113, 136 },
	{ -97, -83, -69, -55, -41, -26, -12, 1, 15, 29, 44, 58, 72, 86 },
	{ -87, -71, -54, -38, -22, -5, 10, 26, 43, 59, 75, 92, 108, 124 },
	{ -242, -208, -173, -139, -104, -70, -36, -1, 32, 67, 101, 135, 170, 204 },
	{ -104, -89, -74, -60, -45, -30, -15, 0, 14, 29, 43, 58, 73, 88 },
	{ -91, -77, -64, -50, -36, -23, -9, 3, 17, 31, 44, 58, 72, 85 },
	{ -88, -74, -60, -46, -32, -18, -5, 8, 22, 36, 50, 64, 78, 92 },
	{ -95, -80, -66, -51, -36, -22, -7, 6, 21, 36, 50, 65, 79, 94 },
	{ -133, -111, -89, -67, -45, -23, -1, 20, 42, 64, 86, 108, 130, 152 },
	{ -105, -90, -74, -58, -42, -27, -11, 4, 20, 35, 51, 67, 82, 98 },
	{ -92, -77, -62, -46, -31, -16, 0, 14, 29, 45, 60, 75, 91, 106 },
	{ -125, -107, -89, -71, -53, -35, -17, 0, 18, 36, 54, 71, 89, 107 },
	{ -89, -75, -62, -49, -36, -23, -9, 3, 16, 29, 43, 56, 69, 82 },
	{ -122, -101, -80, -59, -38, -18, 2, 23, 44, 65, 86, 106, 127, 148 },
	{ -164, -140, -116, -92, -68, -44, -20, 3, 27, 51, 75, 99, 123, 147 },
	{ -123, -103, -82, -61, -41, -20, 0, 20, 41, 62, 83, 103, 124, 145 },
	{ -59, -47, -35, -24, -12, 0, 10, 22, 34, 45, 57, 69, 80, 92 },
	{ -113, -90, -67, -44, -22, 0, 23, 46, 69, 92, 115, 138, 160, 183 },
	{ -89, -72, -54, -37, -20, -3, 14, 31, 48, 65, 83, 100, 117, 135 },
	{ -96, -82, -68, -54, -40, -27, -13, 0, 14, 28, 42, 56, 69, 83 },
	{ -196, -172, -147, -123, -99, -75, -51, -26, -2, 21, 45, 69, 94, 118 },
	{ -125, -100, -75, -49, -24, 0, 25, 50, 75, 100, 125, 150, 175, 200 },
	{ -229, -201, -173, -145, -117, -88, -60, -32, -4, 23, 51, 80, 108, 136 },
	{ -87, -71, -54, -38, -21, -5, 11, 27, 44, 60, 77, 93, 110, 126 },
	{ -115, -99, -84, -68, -53, -37, -22, -6, 8, 24, 39, 54, 70, 85 },
	{ -70, -55, -40, -25, -10, 4, 19, 34, 50, 65, 80, 95, 110, 125 },
	{ -149, -124, -98, -73, -48, -23, 1, 27, 52, 77, 102, 128, 153, 178 },
	{ -103, -89, -75, -61, -47, -33, -19, -5, 8, 22, 37, 51, 65, 79 },
	{ -160, -133, -106, -79, -52, -25, 1, 28, 55, 82, 109, 136, 163, 190 },
	{ -86, -72, -58, -44, -31, -17, -3, 10, 23, 37, 51, 65, 78, 92 },
	{ -146, -126, -105, -85, -65, -45, -25, -5, 14, 34, 55, 75, 95, 115 },
	{ -137, -120, -103, -86, -69, -52, -35, -18, -1, 15, 32, 49, 66, 83 },
	{ -85, -71, -58, -44, -30, -16, -3, 10, 24, 38, 51, 65, 79, 93 },
	{ -116, -97, -79, -60, -42, -24, -5, 12, 31, 49, 68, 86, 105, 123 },
	{ -83, -67, -50, -34, -17, -1, 15, 31, 48, 65, 81, 98, 114, 131 },
	{ -69, -59, -49, -39, -29, -19, -9, 0, 11, 21, 31, 41, 51, 61 },
	{ -146, -128, -109, -90, -71, -52, -33, -14, 4, 23, 42, 61, 79, 98 },
	{ -143, -118, -94, -70, -46, -22, 1, 25, 49, 73, 97, 121, 145, 169 },
	{ -51, -37, -24, -10, 3, 16, 30, 44, 57, 71, 84, 98, 112, 125 },
	{ -139, -121, -103, -85, -67, -49, -30, -12, 5, 23, 41, 59, 77, 95 },
	{ -128, -108, -88, -68, -48, -28, -8, 11, 31, 51, 71, 91, 111, 131 },
};
static int_t<4,1> bbox_head_multi_level_share_convs_0_0_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xb), C(0xc), C(0x4), C(0x5), C(0x7), C(0x0), C(0x9), C(0xe), C(0x2), },
	{ C(0x0), C(0xc), C(0x0), C(0x5), C(0x7), C(0xa), C(0x1), C(0x7), C(0xd), },
	{ C(0x0), C(0xc), C(0x0), C(0x0), C(0xa), C(0x6), C(0x6), C(0x3), C(0x4), },
	{ C(0xd), C(0x5), C(0x0), C(0x4), C(0x7), C(0x2), C(0xd), C(0x6), C(0xc), },
	{ C(0x1), C(0xa), C(0x9), C(0x3), C(0xe), C(0xc), C(0x2), C(0x5), C(0x4), },
	{ C(0x7), C(0x7), C(0x1), C(0x2), C(0x5), C(0x1), C(0xd), C(0xc), C(0xe), },
	{ C(0xa), C(0xc), C(0x0), C(0xd), C(0x0), C(0x1), C(0xa), C(0x0), C(0x1), },
	{ C(0x0), C(0x4), C(0xf), C(0x0), C(0x1), C(0x1), C(0x3), C(0x1), C(0x3), },
	{ C(0x0), C(0x4), C(0x7), C(0xe), C(0xe), C(0x6), C(0xd), C(0x0), C(0x3), },
	{ C(0x2), C(0x4), C(0x2), C(0x2), C(0x2), C(0x0), C(0x1), C(0x4), C(0x4), },
	{ C(0x1), C(0x6), C(0x0), C(0x2), C(0x5), C(0xe), C(0x1), C(0xe), C(0x0), },
	{ C(0x7), C(0x4), C(0xc), C(0xd), C(0x9), C(0x2), C(0x2), C(0xc), C(0x0), },
	{ C(0x2), C(0x1), C(0xe), C(0xa), C(0xb), C(0xc), C(0x6), C(0xa), C(0xe), },
	{ C(0x0), C(0xa), C(0x1), C(0xa), C(0x9), C(0x7), C(0xe), C(0x0), C(0x1), },
	{ C(0x1), C(0x5), C(0x3), C(0xf), C(0x4), C(0x1), C(0x1), C(0x0), C(0x0), },
	{ C(0x0), C(0x2), C(0xf), C(0x4), C(0x6), C(0xf), C(0x0), C(0x4), C(0x1), },
	{ C(0xf), C(0xd), C(0x0), C(0xf), C(0x9), C(0x0), C(0x7), C(0x5), C(0xf), },
	{ C(0x3), C(0x2), C(0x3), C(0x1), C(0x0), C(0x1), C(0x2), C(0x2), C(0x3), },
	{ C(0x0), C(0xe), C(0xf), C(0x3), C(0x1), C(0x1), C(0x3), C(0x4), C(0x2), },
	{ C(0x0), C(0x3), C(0x0), C(0x2), C(0x6), C(0x2), C(0xf), C(0x2), C(0xe), },
	{ C(0x2), C(0xd), C(0x1), C(0xc), C(0x9), C(0x0), C(0xb), C(0xd), C(0xe), },
	{ C(0x4), C(0x2), C(0xe), C(0x2), C(0x2), C(0xe), C(0x4), C(0x2), C(0x0), },
	{ C(0x0), C(0x2), C(0xe), C(0xd), C(0xf), C(0xa), C(0x6), C(0xc), C(0xa), },
	{ C(0x0), C(0x2), C(0x7), C(0xf), C(0x1), C(0x6), C(0xf), C(0x0), C(0x6), },
	{ C(0x7), C(0x7), C(0x2), C(0x0), C(0x9), C(0xd), C(0xe), C(0x0), C(0xf), },
	{ C(0x3), C(0xa), C(0x9), C(0xb), C(0xe), C(0x4), C(0xa), C(0xe), C(0x6), },
	{ C(0x2), C(0x0), C(0x2), C(0x1), C(0x0), C(0x1), C(0x2), C(0x1), C(0x4), },
	{ C(0x3), C(0x2), C(0x2), C(0x0), C(0x0), C(0x1), C(0x2), C(0x1), C(0x2), },
	{ C(0x2), C(0xc), C(0xf), C(0xa), C(0x1), C(0x0), C(0x5), C(0x7), C(0x0), },
	{ C(0xc), C(0x2), C(0x2), C(0xe), C(0x6), C(0x0), C(0xa), C(0x2), C(0x1), },
	{ C(0x1), C(0xd), C(0xb), C(0x6), C(0x6), C(0x1), C(0x0), C(0xc), C(0x1), },
	{ C(0x2), C(0x4), C(0x3), C(0x7), C(0x4), C(0xe), C(0x4), C(0xf), C(0xb), },
	{ C(0xd), C(0x2), C(0xd), C(0x0), C(0x2), C(0xd), C(0x7), C(0x1), C(0x6), },
	{ C(0xf), C(0x0), C(0x0), C(0x9), C(0x3), C(0x0), C(0xe), C(0x7), C(0xf), },
	{ C(0x2), C(0x3), C(0x1), C(0x2), C(0x2), C(0x1), C(0x1), C(0x2), C(0x2), },
	{ C(0x3), C(0x3), C(0x3), C(0xf), C(0xf), C(0xf), C(0x1), C(0x0), C(0x0), },
	{ C(0xf), C(0x0), C(0x1), C(0x5), C(0x7), C(0xd), C(0xf), C(0x7), C(0xd), },
	{ C(0xc), C(0xf), C(0x2), C(0xe), C(0x3), C(0x4), C(0x4), C(0x6), C(0x5), },
	{ C(0xc), C(0x9), C(0xd), C(0x4), C(0x2), C(0xd), C(0xe), C(0x1), C(0x1), },
	{ C(0xd), C(0xc), C(0x2), C(0x7), C(0xa), C(0x2), C(0x6), C(0xa), C(0x0), },
	{ C(0x2), C(0xc), C(0x2), C(0xf), C(0x9), C(0xf), C(0x3), C(0xd), C(0xe), },
	{ C(0x4), C(0x3), C(0x1), C(0x1), C(0xa), C(0xa), C(0xf), C(0x9), C(0xb), },
	{ C(0xc), C(0x7), C(0x7), C(0xe), C(0xe), C(0x4), C(0xf), C(0xf), C(0xe), },
	{ C(0x0), C(0x2), C(0x5), C(0x0), C(0x1), C(0x6), C(0x0), C(0xe), C(0x4), },
	{ C(0x9), C(0xc), C(0xb), C(0xf), C(0x5), C(0x1), C(0xc), C(0x1), C(0xe), },
	{ C(0x1), C(0xf), C(0x0), C(0x4), C(0x5), C(0x3), C(0x2), C(0x3), C(0x3), },
	{ C(0x2), C(0x7), C(0x4), C(0xf), C(0xa), C(0xc), C(0x3), C(0x9), C(0x4), },
	{ C(0xf), C(0x4), C(0x1), C(0xf), C(0xa), C(0x7), C(0x1), C(0x9), C(0x5), },
	{ C(0x0), C(0x9), C(0x4), C(0xf), C(0x9), C(0x7), C(0x0), C(0xd), C(0xf), },
	{ C(0xe), C(0xb), C(0x2), C(0xe), C(0xd), C(0xc), C(0xd), C(0x5), C(0xd), },
	{ C(0x2), C(0x2), C(0x2), C(0x1), C(0x1), C(0x1), C(0x2), C(0x2), C(0x2), },
	{ C(0xf), C(0x0), C(0xf), C(0xe), C(0xf), C(0xf), C(0xe), C(0xf), C(0xe), },
	{ C(0x1), C(0xf), C(0xd), C(0x5), C(0x9), C(0x2), C(0xf), C(0xc), C(0x6), },
	{ C(0x5), C(0x3), C(0xf), C(0x4), C(0x3), C(0xf), C(0x6), C(0x2), C(0xd), },
	{ C(0x7), C(0x7), C(0x3), C(0x1), C(0x2), C(0x0), C(0xf), C(0xe), C(0xf), },
	{ C(0x4), C(0x5), C(0x1), C(0x9), C(0x9), C(0xd), C(0x3), C(0xe), C(0x3), },
	{ C(0xb), C(0x0), C(0xf), C(0x9), C(0x3), C(0x3), C(0x9), C(0xf), C(0x0), },
	{ C(0xe), C(0x2), C(0x4), C(0x9), C(0x9), C(0x2), C(0xa), C(0x9), C(0x1), },
	{ C(0x2), C(0x4), C(0x9), C(0x1), C(0x5), C(0x9), C(0x1), C(0x4), C(0x1), },
	{ C(0xf), C(0x1), C(0x3), C(0xf), C(0x7), C(0xf), C(0xe), C(0x7), C(0x1), },
	{ C(0xa), C(0xe), C(0x0), C(0xd), C(0x6), C(0x2), C(0x9), C(0x1), C(0x0), },
	{ C(0xa), C(0x9), C(0x2), C(0x9), C(0x9), C(0x3), C(0x3), C(0x1), C(0x2), },
	{ C(0xf), C(0xd), C(0x1), C(0xf), C(0xf), C(0x6), C(0x0), C(0x1), C(0x7), },
	{ C(0x0), C(0x0), C(0x0), C(0x0), C(0xf), C(0xf), C(0x0), C(0xf), C(0xf), },
};
static int bbox_head_multi_level_share_convs_0_0_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 0, 16, 32, 48, 64, 80, 96 },
	{ -3, 6, 17, 27, 37, 48, 58 },
	{ 12, 34, 56, 78, 100, 121, 143 },
	{ 2, 28, 55, 81, 107, 133, 159 },
	{ 19, 35, 50, 66, 81, 97, 112 },
	{ -1, 9, 21, 32, 43, 55, 66 },
	{ 1, 14, 26, 39, 51, 64, 76 },
	{ -3, 1, 7, 13, 18, 24, 29 },
	{ 2, 13, 24, 34, 45, 56, 67 },
	{ -67, -37, -8, 21, 50, 80, 109 },
	{ -6, 6, 19, 33, 46, 59, 72 },
	{ -2, 5, 13, 21, 29, 38, 46 },
	{ 13, 23, 32, 42, 52, 62, 71 },
	{ -9, 4, 17, 31, 44, 58, 71 },
	{ -4, 7, 19, 31, 43, 54, 66 },
	{ 8, 28, 47, 67, 87, 107, 126 },
	{ 10, 24, 38, 53, 67, 82, 96 },
	{ -23, -13, -4, 4, 13, 23, 32 },
	{ -3, 4, 12, 20, 28, 36, 44 },
	{ 0, 5, 11, 17, 23, 30, 36 },
	{ 10, 29, 47, 65, 83, 101, 119 },
	{ 2, 11, 19, 28, 37, 46, 55 },
	{ 15, 24, 34, 44, 53, 63, 72 },
	{ 2, 16, 29, 43, 56, 70, 83 },
	{ -8, 0, 6, 14, 21, 29, 36 },
	{ 0, 17, 35, 53, 71, 89, 107 },
	{ -2, 4, 11, 18, 24, 31, 38 },
	{ -15, -8, -1, 5, 12, 19, 26 },
	{ 3, 22, 40, 59, 77, 96, 114 },
	{ -1, 9, 20, 31, 42, 52, 63 },
	{ 8, 24, 39, 55, 71, 87, 103 },
	{ 2, 12, 21, 31, 41, 51, 61 },
	{ 0, 10, 21, 32, 44, 55, 66 },
	{ 10, 23, 37, 51, 64, 78, 91 },
	{ 3, 12, 20, 28, 37, 45, 53 },
	{ 4, 10, 16, 23, 29, 35, 41 },
	{ 2, 13, 24, 35, 46, 57, 68 },
	{ -1, 14, 30, 46, 61, 77, 93 },
	{ -3, 6, 16, 26, 36, 46, 57 },
	{ -8, 10, 29, 48, 67, 86, 105 },
	{ 4, 15, 25, 36, 47, 57, 68 },
	{ 0, 18, 36, 54, 72, 90, 108 },
	{ -1, 9, 20, 30, 41, 52, 62 },
	{ -16, 2, 22, 42, 61, 81, 100 },
	{ -6, 9, 25, 42, 58, 74, 90 },
	{ -4, 11, 27, 43, 59, 75, 91 },
	{ 7, 20, 34, 47, 61, 75, 88 },
	{ 12, 28, 44, 60, 76, 92, 108 },
	{ -3, 5, 14, 24, 33, 42, 51 },
	{ -5, 3, 13, 22, 32, 41, 51 },
	{ -13, -6, 0, 7, 14, 21, 28 },
	{ -1, 2, 5, 9, 12, 16, 19 },
	{ 13, 24, 36, 48, 60, 71, 83 },
	{ 0, 16, 32, 49, 66, 83, 99 },
	{ 0, 10, 20, 30, 41, 51, 62 },
	{ -5, 4, 15, 26, 36, 47, 58 },
	{ 7, 29, 50, 72, 94, 115, 137 },
	{ -6, 10, 27, 43, 60, 77, 94 },
	{ -2, 13, 28, 44, 60, 76, 91 },
	{ 11, 31, 51, 71, 91, 111, 131 },
	{ 3, 13, 23, 33, 43, 53, 63 },
	{ 7, 30, 53, 76, 99, 121, 144 },
	{ 14, 28, 42, 56, 70, 84, 98 },
	{ 1, 4, 7, 9, 12, 15, 18 },
};
static int_t<4,64> bbox_head_multi_level_share_convs_1_0_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0x10edf6f4c55ef3f1L, 0x50f25c313afe0221L, 0x101fe2c064020611L, 0x0cdea2b01300dd0dL) },
	{ C64(0x302010000032ffffL, 0xe2f9313ef2e00b02L, 0xdf34f3cf122214f1L, 0x291ee200ba001071L) },
	{ C64(0x7ef1162c0d406ee1L, 0x3e0f3c6fe2c0ed01L, 0x1603e020f4f31332L, 0x0070213f2fd1d1f3L) },
	{ C64(0xf30e0fd2002ed232L, 0x0ffd6f01cdcffb31L, 0xeeaf2310f3207230L, 0x1cccf4fd02f1e00dL) },
	{ C64(0x00fb11f0f1df120fL, 0x1df79cc11ff1f2efL, 0x1fbd0c3e4f1e4aeeL, 0xe53e6d0d240f1ae2L) },
	{ C64(0xd0eff1f3f10f3200L, 0xff1ffee0204f1f0fL, 0x20c20e10f00f2ee1L, 0x23d7111f43009010L) },
	{ C64(0x90eedc13e3f0fefeL, 0x1effe2bf65143102L, 0x4e1d0f521a0300fdL, 0xf2e9fb3f30ba6ff5L) },
	{ C64(0x2c0f010f2e2cced9L, 0x00fffcefee9309fdL, 0xa52edfee2f2bd613L, 0xe11cefed2112ececL) },
	{ C64(0x40d2fd121013a21dL, 0xeffb3f4212e10cf0L, 0xad2012901d060210L, 0xeceaeefe4dfb4e21L) },
	{ C64(0x20f0e0fc40c427fdL, 0x10203ce23910251dL, 0x1c9f0d530def4ecbL, 0x30f25d04eb0e3112L) },
	{ C64(0x333d433a35755b43L, 0x056b2623b3306cf3L, 0x3a1222c4020e21deL, 0x49e4a1a7ea062f3aL) },
	{ C64(0xfc2e1f1f1edfd1dfL, 0x1edcec0ff9f1ef0fL, 0xa0dcd0e03fff0e9fL, 0x1f46cd11193f2075L) },
	{ C64(0xe0224f0bfca63001L, 0x241fb2ff6a6c01f1L, 0x72e000e4d1f14922L, 0x2565f175ac424405L) },
	{ C64(0x514716c10cf22efdL, 0xedcb421fce210401L, 0x20c41230fc294112L, 0xf36db41a3be4404dL) },
	{ C64(0x01f13dd3e03c932fL, 0x13032f21c222fe1fL, 0x401121f04231f232L, 0xe1192429f400b1e4L) },
	{ C64(0x5030301a02033f01L, 0xcc01c2f0b70f12efL, 0xdf9f0111ef0f5d3fL, 0x0564d123ebf03311L) },
	{ C64(0x0e12e0f3e0fdf60eL, 0xfe0dbf006bd0ecfeL, 0x01b0010f3e1cf3c3L, 0x03ed32dd0e1dfe02L) },
	{ C64(0x3f031ef0f33ef1f0L, 0xeefa7e7eb2b40e2fL, 0x12d5e2de1f03c36fL, 0xfadd1efd112fee13L) },
	{ C64(0x1d2fec0e00edafe2L, 0x2d0f10c0f1e0f31eL, 0xf20fef01d0fc2fdeL, 0x7fe4d0f4baf05e2eL) },
	{ C64(0x21231004210e0212L, 0x11e6f2d0fc21030fL, 0x6f101050e23921b2L, 0x37ca2202061171ffL) },
	{ C64(0xc4212f15f3252236L, 0x2613e5027f5002f4L, 0x7bdf34020311120dL, 0x34d3b2f40e11233fL) },
	{ C64(0xc11102fe42001d02L, 0x0101a5fd203134ffL, 0x2eb10242250d12e1L, 0x45f91215cd423400L) },
	{ C64(0x7032251a6ae05ed0L, 0xd4eaf0fe0e6ffef1L, 0x10eff16ff31bf0a4L, 0x227222100e0df320L) },
	{ C64(0x1ef0eff1e1e021deL, 0x0ef2000f2102f0f0L, 0x0110e0000ef2511fL, 0x2110fe0200101e11L) },
	{ C64(0xf01e25000f0e6f11L, 0x21d6c200200022f1L, 0x20c30f61e2f0fe01L, 0x1762231104d5ded2L) },
	{ C64(0x1ff5e2efee124fe0L, 0xbb2f05e1ff3f3d0fL, 0x3fe5fc14de3e101dL, 0x0d0a02dd0dde9cfeL) },
	{ C64(0x613f16d2d24f4200L, 0x1ffd5d5ff1010c31L, 0x45d7f5ef02ff2541L, 0x1bdee4e01f02e002L) },
	{ C64(0x3f1d3f100d1104f4L, 0xe3e611002332f40fL, 0x4a020042400101ddL, 0x1d723fd339e0412dL) },
	{ C64(0xe3fe21fc222fde32L, 0xc01effd2ef0e1021L, 0x1bfe213002f07fe2L, 0x0ffd24edf200020dL) },
	{ C64(0xd2f011e6df3c2211L, 0x40ec4e2d5cfdf032L, 0x510426fe21ffd6eeL, 0xec1ff4cd200ae0fbL) },
	{ C64(0xc2110ed10fc0f113L, 0xe14fe42ff1ffcef0L, 0x216f1d1fe2d41f10L, 0x10293102f221b1a4L) },
	{ C64(0x0fde0a37022391feL, 0xbb211fe1b5cf0af1L, 0xbf3b0db31bf4a34dL, 0xeaa30de1200c4e03L) },
	{ C64(0x101e001f0e01e310L, 0xfa661f10be110400L, 0xa1fe1d5e02010cf0L, 0x2333541f3eff02dfL) },
	{ C64(0x5f10101b3e10d000L, 0xfbf00ff1a0e0f11fL, 0xe30f0010111f0ff1L, 0x022ff3fd0ef0f17eL) },
	{ C64(0x2ef0fa331f12900eL, 0xef0020cef0d10a01L, 0xa3f910910c03c30fL, 0xfcf3eee11f0e2000L) },
	{ C64(0x01142ff001d40f13L, 0xd121d240e71100efL, 0x21d42201a0fd3d14L, 0x0533f062e0513022L) },
	{ C64(0xcf5030e92e33100eL, 0xe3fc316fee032301L, 0xf094f2c03f302040L, 0x2973de0319f74f13L) },
	{ C64(0x1e03de27a0c461e3L, 0xfde4025e254011e0L, 0x666610131cf3a12dL, 0x3206dd3550ca6e45L) },
	{ C64(0xe0200f101ad421e3L, 0xfedf440ef0100211L, 0xe4210132e1fdf9f3L, 0x0d655063091f3222L) },
	{ C64(0xf01454dd5e1e121fL, 0x242207e1fdf006fcL, 0x01b1f171624b3f91L, 0x2d696213bc25d10bL) },
	{ C64(0xbefefd303fc4f30fL, 0x4045f0e2241e1fd0L, 0x12100ae120f49f2bL, 0xf0a43ce332f04f13L) },
	{ C64(0x1200f00f10110230L, 0x001100f02f2f1100L, 0x00fe3100f1004f00L, 0x01f1f000f0f01111L) },
	{ C64(0x0f101109fe0e0102L, 0xe3c6020f0c2e1430L, 0x1fe00a41040ff1eeL, 0x051e4211eff2f11fL) },
	{ C64(0xaa0e091feef29ab2L, 0x0c9ddcebcf010900L, 0xba2fb0efd511ddbcL, 0x3dcce7ffd55b402dL) },
	{ C64(0xf0b1c20dfff01101L, 0x420316c05e3d04eeL, 0x00de1e1fc10643aeL, 0xf3d900f2a2ccceffL) },
	{ C64(0x00f0110e1d1f3222L, 0x3fe0400eff0e1531L, 0xc1400131d5211b01L, 0x3be02334e30140ebL) },
	{ C64(0x01ff010e022fee10L, 0x131ff0f0000f2f11L, 0x0f1e21f1001111e1L, 0x0efff00fe212e01fL) },
	{ C64(0x00f1e0ef0ff21f00L, 0x1f2ff1f1dff0f11fL, 0x0fffff01e0ff00ffL, 0x1f0a0df2ce0f10ffL) },
	{ C64(0xdefde42241f1600eL, 0x2df0f20f2a3a2e01L, 0x2e11f212133e31c4L, 0x11e2d20113fc2f3bL) },
	{ C64(0x0ff1fef0ffd0f0f1L, 0x20ff500fda1e0030L, 0x2100ff3f00f20910L, 0xebde314dd51ee1fbL) },
	{ C64(0x0effdefc1feefef0L, 0x3efef10effee012eL, 0xe1efef10b1dd00cdL, 0x4efaddc59af01efcL) },
	{ C64(0x62ff021432600021L, 0x35c3760000e1151eL, 0x913e1541454d25a5L, 0xbd5e079b63d2e359L) },
	{ C64(0x77363610ce127272L, 0x3640426171506521L, 0x153372f1bb6c33e6L, 0xf241bd4f0eb42e50L) },
	{ C64(0x1f0f101c21f0e1fdL, 0x2110090102c3e20fL, 0xdfaf0e1d5de6feefL, 0x0fe34c001a1f4f25L) },
	{ C64(0x62432cef93043326L, 0xbef3366dd1140b02L, 0x61d64fb23f2ff46cL, 0x2e620e0529da4f23L) },
	{ C64(0x00f000011f02de0fL, 0x21cff2f3e2e00e00L, 0x200200f100d01f00L, 0xffcef11fa0212f7eL) },
	{ C64(0xe1015fc6d12d9311L, 0x02f33020e232de01L, 0x423322f04f211233L, 0x0229251af61fe0f7L) },
	{ C64(0x4fffff0f02de1cffL, 0xde1fbfe1eff3fe1fL, 0x00910ff00e0e0e30L, 0xe500cefe060e0102L) },
	{ C64(0x721017dbef4d7f11L, 0xe0b0115dd0efe030L, 0x0600243cf31f7104L, 0x127c043efc01c212L) },
	{ C64(0xff1120f1df0deef0L, 0x00f1ce0f1c04ff1eL, 0x04cffe1f2011eff0L, 0x013f013ec930e0e1L) },
	{ C64(0xd3f20e02d3200f32L, 0x4042312162f000feL, 0x32e030e0ff2e334fL, 0x1cceebe3f021dffeL) },
	{ C64(0x100301ff22111d12L, 0x01ffd3fdd24c2002L, 0xcffd01f1c4221132L, 0xf71496f01504e403L) },
	{ C64(0x0022143329d2141aL, 0x24fe02fc7f400b01L, 0x96ee0ed2be1a3224L, 0x120f3f052eff0000L) },
	{ C64(0x6ef0fe09040000edL, 0xeeffcd10a6b0ffffL, 0xb4dfff0d2fe60f40L, 0xe0301d1e010dfe06L) },
};
static int bbox_head_multi_level_share_convs_1_0_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -116, -96, -77, -57, -37, -18, 1, 21, 40, 60, 80, 99, 119, 139 },
	{ -49, -40, -30, -20, -11, -1, 8, 17, 27, 37, 46, 56, 66, 76 },
	{ -114, -94, -75, -55, -36, -16, 2, 22, 41, 61, 80, 100, 119, 138 },
	{ -136, -114, -91, -69, -46, -24, -1, 20, 43, 65, 88, 110, 132, 155 },
	{ -79, -70, -61, -52, -43, -34, -25, -16, -6, 2, 11, 20, 29, 38 },
	{ -67, -57, -47, -37, -27, -17, -7, 2, 12, 22, 32, 42, 52, 62 },
	{ -126, -110, -94, -78, -62, -46, -30, -14, 1, 17, 33, 49, 65, 81 },
	{ -177, -153, -130, -107, -83, -60, -36, -13, 9, 33, 56, 80, 103, 126 },
	{ -92, -80, -68, -56, -44, -31, -19, -7, 4, 16, 28, 40, 52, 65 },
	{ -144, -124, -103, -83, -62, -42, -21, -1, 19, 39, 60, 80, 101, 121 },
	{ -81, -62, -43, -25, -6, 12, 30, 49, 68, 86, 105, 124, 142, 161 },
	{ -85, -74, -64, -53, -43, -32, -22, -11, 0, 9, 20, 30, 41, 51 },
	{ -53, -41, -29, -18, -6, 5, 16, 28, 40, 51, 63, 74, 86, 98 },
	{ -118, -100, -82, -64, -46, -28, -10, 7, 25, 43, 61, 79, 97, 116 },
	{ -155, -130, -104, -79, -54, -28, -3, 21, 46, 72, 97, 122, 148, 173 },
	{ -112, -94, -76, -58, -40, -22, -5, 12, 30, 48, 66, 84, 102, 120 },
	{ -129, -111, -93, -74, -56, -38, -20, -1, 16, 34, 52, 70, 89, 107 },
	{ -102, -87, -72, -57, -43, -28, -13, 0, 15, 30, 45, 59, 74, 89 },
	{ -164, -140, -117, -94, -70, -47, -24, 0, 22, 45, 69, 92, 115, 139 },
	{ -56, -43, -31, -18, -5, 7, 19, 32, 45, 58, 70, 83, 96, 109 },
	{ -105, -82, -59, -36, -12, 10, 33, 56, 79, 103, 126, 149, 172, 196 },
	{ -103, -83, -62, -42, -21, -1, 19, 39, 59, 80, 100, 121, 141, 162 },
	{ -77, -63, -49, -35, -21, -8, 5, 19, 33, 47, 61, 75, 89, 103 },
	{ -149, -127, -106, -84, -63, -41, -19, 1, 23, 44, 66, 88, 109, 131 },
	{ -109, -90, -71, -52, -33, -14, 4, 23, 42, 61, 80, 99, 118, 137 },
	{ -121, -105, -89, -73, -58, -42, -26, -11, 4, 20, 36, 51, 67, 83 },
	{ -100, -82, -64, -46, -27, -9, 8, 27, 45, 63, 81, 100, 118, 136 },
	{ -119, -99, -78, -58, -37, -17, 2, 23, 43, 64, 84, 104, 125, 145 },
	{ -181, -151, -121, -92, -62, -32, -2, 27, 56, 86, 116, 146, 176, 206 },
	{ -106, -88, -71, -54, -36, -19, -2, 15, 32, 49, 67, 84, 101, 119 },
	{ -89, -75, -61, -47, -33, -19, -5, 8, 22, 36, 50, 64, 78, 92 },
	{ -187, -163, -138, -113, -88, -63, -38, -13, 10, 35, 60, 85, 110, 135 },
	{ -68, -55, -42, -30, -17, -5, 7, 20, 32, 45, 57, 70, 83, 95 },
	{ -53, -44, -35, -26, -17, -9, 0, 8, 17, 25, 34, 43, 52, 61 },
	{ -153, -132, -112, -91, -70, -49, -29, -8, 12, 33, 53, 74, 95, 116 },
	{ -120, -99, -79, -58, -38, -17, 2, 23, 44, 64, 85, 105, 126, 146 },
	{ -66, -54, -41, -29, -17, -5, 7, 19, 31, 44, 56, 68, 81, 93 },
	{ -201, -170, -139, -108, -76, -45, -14, 16, 47, 78, 110, 141, 172, 203 },
	{ -131, -109, -86, -63, -40, -18, 4, 27, 50, 73, 95, 118, 141, 164 },
	{ -64, -49, -34, -19, -4, 10, 25, 40, 56, 71, 86, 101, 116, 131 },
	{ -274, -233, -192, -152, -111, -70, -30, 10, 51, 92, 132, 173, 214, 255 },
	{ -128, -107, -87, -66, -45, -25, -4, 16, 37, 57, 78, 99, 120, 140 },
	{ -82, -68, -53, -39, -25, -10, 3, 18, 32, 46, 61, 75, 90, 104 },
	{ -186, -160, -134, -107, -81, -55, -29, -3, 23, 49, 75, 101, 127, 154 },
	{ -102, -87, -72, -57, -42, -27, -13, 1, 16, 31, 46, 61, 76, 90 },
	{ -116, -95, -73, -52, -30, -9, 12, 33, 55, 76, 98, 119, 141, 162 },
	{ -229, -192, -155, -119, -82, -45, -8, 28, 64, 101, 138, 175, 212, 248 },
	{ -115, -99, -83, -67, -51, -35, -19, -3, 12, 28, 44, 60, 76, 92 },
	{ -134, -112, -90, -68, -46, -23, -1, 20, 42, 64, 86, 108, 130, 152 },
	{ -124, -106, -87, -69, -50, -32, -14, 4, 22, 41, 59, 78, 96, 115 },
	{ -154, -134, -114, -94, -75, -55, -35, -15, 3, 23, 43, 63, 82, 102 },
	{ -71, -52, -34, -16, 1, 20, 38, 56, 74, 92, 111, 129, 147, 165 },
	{ -133, -108, -83, -58, -33, -8, 16, 41, 66, 91, 116, 141, 166, 191 },
	{ -131, -113, -95, -77, -59, -41, -23, -5, 11, 29, 47, 65, 83, 101 },
	{ -156, -130, -104, -78, -52, -26, 0, 25, 51, 77, 103, 129, 155, 181 },
	{ -64, -53, -43, -32, -22, -11, -1, 9, 19, 30, 40, 51, 61, 72 },
	{ -108, -89, -70, -50, -31, -12, 6, 26, 45, 64, 83, 103, 122, 141 },
	{ -124, -107, -91, -75, -59, -42, -26, -10, 6, 22, 38, 55, 71, 87 },
	{ -137, -113, -89, -65, -41, -17, 6, 29, 53, 77, 101, 125, 149, 172 },
	{ -125, -106, -88, -69, -51, -33, -14, 3, 21, 40, 58, 76, 95, 113 },
	{ -127, -107, -87, -66, -46, -26, -5, 14, 34, 54, 75, 95, 115, 135 },
	{ -111, -91, -71, -51, -31, -11, 8, 28, 48, 68, 88, 108, 128, 148 },
	{ -134, -114, -95, -76, -56, -37, -18, 1, 20, 39, 59, 78, 97, 117 },
	{ -92, -81, -70, -59, -49, -38, -27, -17, -6, 4, 15, 25, 36, 47 },
};
static int_t<4,1> bbox_head_multi_level_share_convs_1_0_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xf), C(0xd), C(0x4), C(0xf), C(0xe), C(0x6), C(0xe), C(0x2), C(0x7), },
	{ C(0xb), C(0x5), C(0x3), C(0xf), C(0x9), C(0xe), C(0x7), C(0xa), C(0x0), },
	{ C(0x6), C(0x5), C(0x7), C(0x0), C(0xc), C(0x1), C(0x0), C(0xf), C(0xe), },
	{ C(0x0), C(0x0), C(0x4), C(0x1), C(0x2), C(0x3), C(0x1), C(0x2), C(0x4), },
	{ C(0x3), C(0x2), C(0xf), C(0x4), C(0x7), C(0xf), C(0x6), C(0x3), C(0xd), },
	{ C(0x0), C(0x0), C(0x0), C(0x1), C(0xd), C(0x0), C(0x0), C(0x7), C(0x0), },
	{ C(0xc), C(0x5), C(0x7), C(0x0), C(0xc), C(0x3), C(0xc), C(0x1), C(0x2), },
	{ C(0x3), C(0x4), C(0x4), C(0x1), C(0x2), C(0x3), C(0xe), C(0x0), C(0x3), },
	{ C(0x0), C(0xa), C(0x4), C(0x6), C(0xa), C(0xb), C(0x6), C(0x5), C(0x1), },
	{ C(0xa), C(0x0), C(0x5), C(0xd), C(0xd), C(0xd), C(0xe), C(0xc), C(0x3), },
	{ C(0xb), C(0xa), C(0x9), C(0x1), C(0xd), C(0xe), C(0x1), C(0xe), C(0x0), },
	{ C(0x9), C(0x0), C(0x0), C(0x7), C(0x7), C(0x2), C(0x1), C(0xb), C(0x3), },
	{ C(0x2), C(0x0), C(0x0), C(0x1), C(0xa), C(0x9), C(0x3), C(0xa), C(0x9), },
	{ C(0x2), C(0x7), C(0xe), C(0xf), C(0x6), C(0x3), C(0xf), C(0xd), C(0xd), },
	{ C(0x0), C(0xe), C(0xe), C(0xe), C(0xc), C(0xe), C(0xe), C(0xd), C(0xe), },
	{ C(0x1), C(0x2), C(0x0), C(0x3), C(0xd), C(0xb), C(0x1), C(0x9), C(0xa), },
	{ C(0x3), C(0x0), C(0x1), C(0x0), C(0x1), C(0x0), C(0x1), C(0x1), C(0x3), },
	{ C(0xe), C(0x7), C(0x3), C(0xd), C(0x6), C(0x6), C(0xd), C(0x0), C(0x4), },
	{ C(0x0), C(0x2), C(0xe), C(0x2), C(0x6), C(0x3), C(0xf), C(0x2), C(0x1), },
	{ C(0x0), C(0xc), C(0x5), C(0x3), C(0x9), C(0xa), C(0xe), C(0x4), C(0x1), },
	{ C(0xc), C(0xc), C(0xb), C(0xc), C(0xc), C(0xc), C(0xf), C(0xf), C(0x0), },
	{ C(0xc), C(0x3), C(0x0), C(0x1), C(0xa), C(0x0), C(0xa), C(0xe), C(0x4), },
	{ C(0x9), C(0xa), C(0x1), C(0xe), C(0x3), C(0x3), C(0x5), C(0x2), C(0x3), },
	{ C(0x0), C(0xf), C(0xf), C(0xf), C(0xf), C(0xf), C(0xf), C(0xf), C(0xf), },
	{ C(0x3), C(0xd), C(0xf), C(0x7), C(0xb), C(0xf), C(0x7), C(0x4), C(0x2), },
	{ C(0x2), C(0x3), C(0x1), C(0xa), C(0x4), C(0xe), C(0x1), C(0x7), C(0x2), },
	{ C(0x0), C(0x3), C(0x7), C(0xf), C(0xe), C(0x4), C(0x1), C(0xe), C(0x4), },
	{ C(0x0), C(0xe), C(0xe), C(0x1), C(0xe), C(0xf), C(0x0), C(0xd), C(0xf), },
	{ C(0x3), C(0x3), C(0x3), C(0x0), C(0x0), C(0x0), C(0x1), C(0x2), C(0x1), },
	{ C(0xe), C(0x2), C(0xf), C(0x2), C(0x6), C(0xf), C(0x5), C(0x0), C(0xa), },
	{ C(0xd), C(0x2), C(0x0), C(0x3), C(0x9), C(0x6), C(0x0), C(0x9), C(0x0), },
	{ C(0xf), C(0xb), C(0x0), C(0xb), C(0xd), C(0x1), C(0xc), C(0xb), C(0xf), },
	{ C(0x4), C(0x0), C(0xe), C(0x7), C(0xa), C(0xd), C(0x3), C(0xd), C(0xe), },
	{ C(0x5), C(0x7), C(0x2), C(0xc), C(0x9), C(0x1), C(0x0), C(0xd), C(0xe), },
	{ C(0xd), C(0x1), C(0x1), C(0xf), C(0x0), C(0x1), C(0xb), C(0xa), C(0xd), },
	{ C(0xf), C(0x1), C(0x0), C(0xf), C(0x1), C(0xd), C(0x1), C(0xf), C(0x9), },
	{ C(0x5), C(0x2), C(0x0), C(0xf), C(0x9), C(0xc), C(0xc), C(0x9), C(0xe), },
	{ C(0xc), C(0xe), C(0xc), C(0xf), C(0x1), C(0xc), C(0xd), C(0xe), C(0xd), },
	{ C(0x2), C(0x0), C(0xe), C(0x1), C(0xf), C(0xc), C(0x1), C(0xd), C(0x9), },
	{ C(0x2), C(0x0), C(0xe), C(0x7), C(0xa), C(0x1), C(0xe), C(0x9), C(0x1), },
	{ C(0xe), C(0x9), C(0xd), C(0xf), C(0xf), C(0xe), C(0xe), C(0x0), C(0xf), },
	{ C(0x1), C(0x1), C(0x0), C(0x1), C(0x1), C(0x0), C(0x1), C(0x1), C(0x1), },
	{ C(0xb), C(0x5), C(0xe), C(0xc), C(0x5), C(0xf), C(0xa), C(0xe), C(0x2), },
	{ C(0x6), C(0x3), C(0x2), C(0x1), C(0x4), C(0x2), C(0x4), C(0xd), C(0xf), },
	{ C(0x0), C(0xc), C(0xe), C(0xc), C(0x3), C(0xc), C(0x3), C(0x7), C(0x4), },
	{ C(0xe), C(0x0), C(0x0), C(0xf), C(0xf), C(0xe), C(0x0), C(0x0), C(0xc), },
	{ C(0x0), C(0x0), C(0x1), C(0x0), C(0x1), C(0x0), C(0x1), C(0x2), C(0x1), },
	{ C(0x0), C(0x2), C(0x1), C(0x4), C(0xf), C(0x2), C(0xf), C(0x2), C(0x0), },
	{ C(0xf), C(0x0), C(0x3), C(0x0), C(0xf), C(0xe), C(0xe), C(0xd), C(0xc), },
	{ C(0x2), C(0x3), C(0xf), C(0x0), C(0x3), C(0xf), C(0x2), C(0x3), C(0x3), },
	{ C(0xf), C(0x5), C(0x1), C(0x4), C(0x0), C(0x4), C(0xf), C(0x2), C(0x2), },
	{ C(0xf), C(0xc), C(0x5), C(0xe), C(0x9), C(0x0), C(0xe), C(0x9), C(0x4), },
	{ C(0xf), C(0xe), C(0xe), C(0xe), C(0xc), C(0xf), C(0xe), C(0xd), C(0xe), },
	{ C(0xe), C(0xf), C(0xd), C(0xe), C(0x1), C(0xe), C(0x5), C(0x5), C(0x3), },
	{ C(0xe), C(0x0), C(0xf), C(0xf), C(0x0), C(0x1), C(0xa), C(0x9), C(0xc), },
	{ C(0xf), C(0x4), C(0x1), C(0xf), C(0xe), C(0x1), C(0x7), C(0x9), C(0x4), },
	{ C(0x0), C(0xd), C(0x0), C(0xe), C(0xb), C(0xe), C(0xf), C(0xd), C(0xf), },
	{ C(0x0), C(0x3), C(0x2), C(0x2), C(0x3), C(0x0), C(0x2), C(0x4), C(0xe), },
	{ C(0x5), C(0x7), C(0x5), C(0x3), C(0x0), C(0x0), C(0x1), C(0xf), C(0x0), },
	{ C(0xe), C(0xe), C(0x1), C(0xf), C(0x3), C(0x4), C(0x1), C(0x4), C(0x1), },
	{ C(0xd), C(0xd), C(0xf), C(0xc), C(0xf), C(0xd), C(0x2), C(0x2), C(0xf), },
	{ C(0x2), C(0xe), C(0xe), C(0xe), C(0x0), C(0xe), C(0x0), C(0xe), C(0xe), },
	{ C(0xc), C(0xe), C(0xb), C(0xe), C(0x0), C(0xe), C(0x1), C(0x1), C(0x1), },
	{ C(0x4), C(0x6), C(0x4), C(0x6), C(0x6), C(0x0), C(0xf), C(0x0), C(0xd), },
};
static int bbox_head_multi_level_share_convs_1_0_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 6, 15, 24, 34, 43, 52, 61 },
	{ 6, 31, 55, 79, 104, 128, 152 },
	{ 5, 14, 24, 33, 43, 52, 61 },
	{ -8, 5, 18, 32, 46, 60, 74 },
	{ 5, 29, 53, 78, 102, 127, 151 },
	{ 2, 8, 15, 22, 29, 36, 43 },
	{ 13, 34, 56, 77, 98, 120, 141 },
	{ 3, 16, 28, 41, 54, 66, 79 },
	{ 12, 37, 63, 89, 115, 141, 166 },
	{ 6, 27, 47, 67, 88, 108, 129 },
	{ 20, 50, 79, 109, 139, 169, 199 },
	{ -1, 8, 19, 30, 40, 51, 62 },
	{ 12, 41, 70, 99, 128, 157, 186 },
	{ 7, 16, 25, 35, 44, 53, 63 },
	{ -7, -3, 0, 5, 9, 13, 18 },
	{ 2, 12, 22, 32, 41, 51, 61 },
	{ 3, 9, 14, 20, 25, 30, 36 },
	{ 6, 18, 30, 42, 54, 65, 77 },
	{ -1, 5, 11, 18, 24, 31, 37 },
	{ 8, 20, 33, 45, 57, 69, 82 },
	{ 2, 17, 31, 45, 60, 74, 88 },
	{ 11, 31, 50, 70, 90, 109, 129 },
	{ 15, 31, 47, 63, 79, 95, 111 },
	{ 1, 4, 8, 11, 14, 17, 20 },
	{ 5, 16, 27, 38, 49, 60, 70 },
	{ 1, 11, 21, 30, 40, 50, 60 },
	{ 10, 19, 28, 37, 46, 55, 64 },
	{ 1, 7, 13, 19, 26, 32, 38 },
	{ -4, 4, 12, 21, 30, 39, 47 },
	{ 10, 23, 37, 51, 65, 79, 92 },
	{ 8, 21, 34, 46, 59, 71, 84 },
	{ 9, 19, 28, 38, 48, 57, 67 },
	{ -6, 5, 18, 30, 43, 56, 68 },
	{ -7, 13, 34, 55, 76, 97, 118 },
	{ 7, 16, 26, 35, 44, 53, 62 },
	{ 0, 8, 16, 23, 31, 39, 46 },
	{ 16, 40, 64, 89, 113, 137, 161 },
	{ -10, 7, 25, 43, 61, 80, 98 },
	{ 2, 12, 22, 32, 42, 53, 63 },
	{ 13, 26, 40, 54, 67, 81, 95 },
	{ -1, 4, 9, 15, 21, 26, 32 },
	{ 2, 6, 10, 13, 17, 21, 25 },
	{ 14, 32, 50, 68, 86, 104, 122 },
	{ -17, 4, 25, 46, 67, 89, 110 },
	{ 0, 9, 18, 28, 37, 46, 55 },
	{ 5, 16, 27, 38, 50, 61, 72 },
	{ 0, 3, 6, 9, 12, 15, 18 },
	{ 3, 9, 15, 21, 27, 33, 39 },
	{ 14, 31, 49, 66, 84, 101, 119 },
	{ 6, 17, 27, 37, 47, 57, 67 },
	{ -3, 3, 10, 18, 25, 32, 39 },
	{ 4, 23, 42, 61, 80, 99, 119 },
	{ -7, 8, 24, 40, 57, 73, 89 },
	{ 5, 17, 29, 41, 53, 65, 77 },
	{ -3, 14, 31, 48, 65, 82, 99 },
	{ 1, 11, 21, 32, 42, 52, 62 },
	{ 0, 4, 9, 15, 20, 25, 30 },
	{ 3, 10, 17, 24, 31, 38, 45 },
	{ 7, 16, 25, 34, 43, 52, 61 },
	{ 6, 16, 27, 38, 48, 59, 70 },
	{ 0, 9, 19, 29, 38, 48, 58 },
	{ 5, 18, 31, 44, 57, 70, 83 },
	{ 1, 8, 14, 21, 28, 35, 42 },
	{ 4, 20, 35, 50, 66, 81, 96 },
};
static int_t<4,64> bbox_head_multi_level_share_convs_2_0_conv1_weight[64][1] =
{ // torch.Size([64, 1, 1, 64])
	{ C64(0xf0d01efe101f0101L, 0x21ef71f1fff00013L, 0xcefd10db1e22f000L, 0xfe0df1e2ff1e00f0L) },
	{ C64(0x10e02101f1eff0ffL, 0x4d0100100c2fc00fL, 0x2fefe0fef0113011L, 0x3151fd02031f00ffL) },
	{ C64(0xf2d0e0005edbf2f1L, 0x40e02200000e500dL, 0x004bfcf14fe001e0L, 0x30f1d6cff01f0012L) },
	{ C64(0xf0effff10e011f00L, 0xef2ffe0f0210020eL, 0xe0fdf2f0e020fd00L, 0x0fe00f1f0d21f1f0L) },
	{ C64(0x324164fa0711c150L, 0x34021111d1f51ff3L, 0x645c10ff42e74f22L, 0x510ec0013101f503L) },
	{ C64(0xdff12fe24fece0efL, 0xef0f052d20017024L, 0x1e00401a00e2dde1L, 0xc0ef5e212f0f0301L) },
	{ C64(0xdff0131ef0110100L, 0x4e2f0f10efc0011fL, 0xe21ff000f61d1f00L, 0xd2e0f21f1d10100eL) },
	{ C64(0xf00f111ff00dff00L, 0x10f1b1e2ed3ff002L, 0x9f46e0ec0fe1110fL, 0xad0fdd10121200efL) },
	{ C64(0xc0e1d0ffff1d12d0L, 0x3fed5ff00c3ca003L, 0x4efc020bfeeec0eeL, 0xbed01fd3d1edfee0L) },
	{ C64(0x73ce9e2d23d1f0efL, 0xcf33132f50dd40fcL, 0xebd0cf131233fc00L, 0x420e1101231f20efL) },
	{ C64(0xb2df52e001fcfd00L, 0x14df13fbcfcf1ff2L, 0x7b1f2e0e2fe4b2f0L, 0x2c5fefbef20eeff1L) },
	{ C64(0x60611a02ed312241L, 0x011f5f1bef53d00fL, 0x70dd20441c314330L, 0x60100fa20400113fL) },
	{ C64(0x10414e110e112ff1L, 0x620f020d1024300fL, 0x10e324fe02111d1eL, 0x42f1312111231ff3L) },
	{ C64(0x20be0ccef5edf4f0L, 0xd1bef3fede2e1ff3L, 0xc30a1de0fcc250e0L, 0x2c0feeb0f31d2fe0L) },
	{ C64(0x0131f11046e10052L, 0x2ff22f2116d6611cL, 0x226c3fd22001fe21L, 0x205f12112f230311L) },
	{ C64(0x0fee010df0f00000L, 0x2010fff10f203003L, 0xe0240fe1f20211feL, 0x10df412ef012f1ffL) },
	{ C64(0xf17100e32e0f01f1L, 0xef1d0e0ef0defd1cL, 0xf05c101f0dfef0ffL, 0xd0e0c1f12ffd0f11L) },
	{ C64(0xa0bff21d22facedfL, 0x6aefc300ef72eef5L, 0x3c071f0c03c2abe0L, 0x5e005fe0d71e0d1aL) },
	{ C64(0xffee03eff20c00eeL, 0x2ffff000ba2ddfeaL, 0x04730de0e0dfe2c1L, 0xebe1f1fff2dd001fL) },
	{ C64(0xe0f01efe100cf2f0L, 0x0ff00301cf5d2ef1L, 0x001100ff1fff50ffL, 0x0f200fb0071f0001L) },
	{ C64(0x00624600fb11ef50L, 0x6301e036dcf4ff15L, 0xf9deb200f2e3121fL, 0xe22e9e4032d1120fL) },
	{ C64(0xefcfd21fea013fbfL, 0xff2dfffd2ddbc0feL, 0x40df40200110deffL, 0x2dd04eeeee0dfd1fL) },
	{ C64(0xf0116f122e000e20L, 0x2231021242b45111L, 0x110edf202412e10fL, 0x021ebe2020222200L) },
	{ C64(0x32421f100111eef1L, 0x42102110fe34fefcL, 0x2e0231f30023340eL, 0x1131341102100d02L) },
	{ C64(0x30bede00f12e1dcfL, 0x001ddaff111ce0fcL, 0xcdc3e1eeeb111e2fL, 0xf1d22ed0ea1efde0L) },
	{ C64(0x2cbe6509b1ffc3dfL, 0x252ed3ecca30ae06L, 0x1df662dfdeb6660fL, 0xc9fc60aef3ed0fedL) },
	{ C64(0xffde200f11ef1fd1L, 0x1010e40f443f1023L, 0x0cd43cfe10f3e2f1L, 0x13bc5eff22eff002L) },
	{ C64(0x20110a120e121111L, 0xeff2ff0602622101L, 0xc101a1011e0b4120L, 0xd3f2d01204020210L) },
	{ C64(0x111102ff21111de0L, 0x22ffce03c0feadf2L, 0xcfe690f10406e2f2L, 0xe66fad3fe02efd0dL) },
	{ C64(0x111ffdf10b120100L, 0xff321e101110f00fL, 0x00fd2102ef11ff01L, 0x0eff30c12e001ff1L) },
	{ C64(0x13cfa1ff0df2f001L, 0xd1e12ff7ecde00f2L, 0xdf01ddf6001e1fe1L, 0xfe10b4f2eeed1e2fL) },
	{ C64(0xd0f10e200312114fL, 0xef0262ef3d104110L, 0x074b5f24003f1c31L, 0x2cd074e011e3f211L) },
	{ C64(0xd3610f0f3e21c130L, 0x2e10722505d54f11L, 0x200a223623642d31L, 0xaa1efe542d00f0c1L) },
	{ C64(0x10f21410ede1e021L, 0x3d0efe0ec133a002L, 0x3b9243f0ef01312eL, 0x5dfe7001e1021bfdL) },
	{ C64(0xcfdf0e0e11ebffb0L, 0xd02fd3fc53de4111L, 0xdf02fefc02d4f1cfL, 0xb0d01eedfe12f000L) },
	{ C64(0x2040dfe0e22004e1L, 0xafee1d11de0ce0f0L, 0xaf3d0df1dff043d1L, 0xe00ed3cfeeec0f0eL) },
	{ C64(0x00414f1100230f22L, 0x20011d13314501ffL, 0x334e04e110102321L, 0xddf2012321f20101L) },
	{ C64(0x20d01ff0e02e0fefL, 0xffffff01ee6d000eL, 0x0e0edf20ffec230fL, 0xef00ddb003fd0f12L) },
	{ C64(0xf02022d434f00000L, 0x1eed454532310ee4L, 0xf3203d54e0032121L, 0x0621223303fdfc2eL) },
	{ C64(0xd04f0f12fa131f10L, 0x2f1210112130f010L, 0xe4e54201f324fee0L, 0xedf150120c12000eL) },
	{ C64(0x01302f2f11ef2410L, 0xef21400f10d1f1f6L, 0xb4be72d10d355df0L, 0xc0fa5220fe232ffdL) },
	{ C64(0x30f0000110e210e0L, 0xe2000f1be01f90feL, 0x6fda613e0b202301L, 0x63226fb3f20df01fL) },
	{ C64(0xf04100f1270ff042L, 0x3fd23110f303211eL, 0x025d0f021000f110L, 0x1030e1e10f021111L) },
	{ C64(0xef2eac0f351c2e2eL, 0x0f01122066ef7019L, 0xe5702ac2d1e0ddc2L, 0xd02fff3001ff0ff0L) },
	{ C64(0x1f2f1d100ef1f11fL, 0x0101110301211e01L, 0xf224f2f0ff1e2200L, 0x00f11011030201ffL) },
	{ C64(0x021debee31d102e1L, 0xcfc106ecd13d21ecL, 0x265e2cf3001401c3L, 0x5f1350b1f11dff2eL) },
	{ C64(0x40ffb500f320fe0fL, 0x1ee0fbf1be2edffaL, 0xce511fdfcd021211L, 0xf1c111f009fefef0L) },
	{ C64(0xce21bf330a061d20L, 0x6c341215423f211fL, 0xe1a657d31132ca21L, 0x1dc263140034f22cL) },
	{ C64(0x002263001d2fff30L, 0x22010c124064e10fL, 0x0360e3cffef1f140L, 0xfcd0f3122fe20022L) },
	{ C64(0xf140fff01d1100f1L, 0xef1eff1f00f10f1eL, 0xf0fd0300f12ffe02L, 0xe2e1c0010e0fe000L) },
	{ C64(0xef100f1102fe01f1L, 0x0f01f1fcef11d10dL, 0x344d4f0e3dfef11fL, 0x3ee06ec2f110f12fL) },
	{ C64(0x11fee6efd212bc0fL, 0x22f0def1ecedbef1L, 0x1d130f02f3e2a50fL, 0x1d21011e09deef00L) },
	{ C64(0x01dfe00f1300cfe1L, 0x30012f074f0d4e02L, 0x2c0ebc321e0be00fL, 0x3f0ea24f3def1014L) },
	{ C64(0x324150fcf7f1f031L, 0x23f20111ef131f04L, 0x633e1f0e32c42001L, 0x621ec00224010312L) },
	{ C64(0x10f110001101f000L, 0x11000000f0000e10L, 0x001210211010000fL, 0x12000100f1ff0f20L) },
	{ C64(0x1f10ed0f0e0f2101L, 0xcf11ff0cf1f1010fL, 0xb3fff01ffe1e3d11L, 0xe1c100e0f101f0ffL) },
	{ C64(0xeed1ed20ff1ef0dfL, 0xff20fdedefefc10dL, 0x30eb00db1decf1dfL, 0xf9e01dc1ff1111f0L) },
	{ C64(0x515060e0f521e042L, 0x33d3ff13d0641f02L, 0x1340f0002cef0120L, 0x3421c13433032402L) },
	{ C64(0x2ea04e0e230d211fL, 0x3001dffd0102e01eL, 0x02f3e4fe22d21020L, 0x12e12e2f3113f100L) },
	{ C64(0x1e121f31e3e01100L, 0xd212af111f12f101L, 0x33161013e3fc0100L, 0x41f1603f11141210L) },
	{ C64(0xb020ff002222e000L, 0xe1fe13f251010011L, 0xa125ee00f2ffefd1L, 0xa1a0a23030def2f1L) },
	{ C64(0xe020f41101e30e10L, 0x0202210ff0a21ffeL, 0x63014f031114b201L, 0x4e2121510e01f20fL) },
	{ C64(0x00ff3d2f04010310L, 0xf3e12ff20ff00101L, 0x05ec10142ff35431L, 0x1e22f3efff010100L) },
	{ C64(0xd1ff03de060dd0e1L, 0x0ff0d21edd2f3f02L, 0x3c34fc1f0ff400b2L, 0x2b10afff06fd0001L) },
};
static int bbox_head_multi_level_share_convs_2_0_quant1_threshold[64][14] =
{ // torch.Size([64, 14])
	{ -128, -109, -91, -73, -55, -37, -19, 0, 17, 35, 53, 71, 89, 108 },
	{ -98, -83, -69, -54, -39, -24, -9, 4, 19, 34, 49, 64, 78, 93 },
	{ -154, -132, -111, -89, -68, -46, -25, -3, 17, 39, 60, 82, 103, 125 },
	{ -114, -98, -81, -64, -48, -31, -14, 2, 18, 35, 52, 68, 85, 102 },
	{ -125, -101, -77, -53, -30, -6, 17, 41, 65, 89, 112, 136, 160, 184 },
	{ -124, -104, -84, -64, -45, -25, -5, 14, 34, 53, 73, 93, 113, 133 },
	{ -109, -92, -76, -60, -43, -27, -10, 5, 21, 38, 54, 70, 87, 103 },
	{ -164, -140, -116, -93, -69, -45, -21, 2, 25, 49, 73, 97, 121, 144 },
	{ -158, -137, -117, -96, -76, -56, -35, -15, 5, 25, 45, 66, 86, 107 },
	{ -105, -89, -73, -58, -42, -27, -11, 4, 19, 35, 51, 66, 82, 98 },
	{ -111, -97, -82, -67, -53, -38, -24, -9, 4, 19, 33, 48, 62, 77 },
	{ -118, -95, -72, -49, -26, -3, 19, 42, 65, 88, 111, 134, 157, 180 },
	{ -127, -102, -78, -53, -29, -4, 20, 44, 69, 93, 118, 142, 167, 191 },
	{ -191, -167, -142, -118, -93, -69, -44, -20, 4, 29, 53, 78, 102, 127 },
	{ -155, -126, -97, -67, -38, -8, 20, 50, 79, 108, 138, 167, 197, 226 },
	{ -142, -120, -98, -76, -54, -32, -10, 11, 33, 55, 77, 99, 121, 143 },
	{ -151, -129, -108, -86, -65, -43, -22, 0, 20, 42, 63, 85, 106, 128 },
	{ -129, -111, -93, -76, -58, -41, -23, -6, 11, 28, 46, 63, 81, 98 },
	{ -170, -148, -126, -104, -81, -59, -37, -15, 7, 29, 51, 73, 95, 118 },
	{ -76, -66, -55, -45, -34, -24, -14, -3, 6, 17, 27, 37, 48, 58 },
	{ -160, -133, -105, -78, -50, -23, 4, 31, 59, 86, 114, 141, 169, 196 },
	{ -220, -190, -161, -131, -101, -72, -42, -13, 16, 46, 75, 105, 135, 164 },
	{ -116, -95, -73, -52, -31, -10, 11, 32, 53, 74, 96, 117, 138, 159 },
	{ -97, -79, -61, -42, -24, -5, 12, 31, 49, 67, 86, 104, 123, 141 },
	{ -218, -189, -160, -131, -101, -72, -43, -14, 14, 43, 73, 102, 131, 160 },
	{ -150, -130, -110, -91, -71, -51, -32, -12, 7, 27, 46, 66, 86, 105 },
	{ -163, -140, -116, -93, -69, -46, -22, 0, 24, 47, 71, 94, 118, 142 },
	{ -143, -120, -96, -72, -48, -24, 0, 22, 46, 70, 94, 118, 142, 165 },
	{ -179, -153, -127, -101, -75, -50, -24, 1, 27, 53, 79, 105, 130, 156 },
	{ -118, -98, -79, -60, -41, -22, -3, 16, 35, 54, 73, 92, 112, 131 },
	{ -183, -159, -134, -109, -85, -60, -35, -11, 13, 38, 63, 87, 112, 137 },
	{ -179, -148, -118, -87, -57, -26, 4, 34, 65, 96, 126, 157, 187, 218 },
	{ -147, -120, -93, -66, -39, -12, 15, 42, 69, 96, 123, 150, 177, 204 },
	{ -129, -109, -89, -69, -49, -28, -8, 11, 31, 51, 71, 91, 112, 132 },
	{ -166, -143, -121, -99, -76, -54, -31, -9, 13, 35, 58, 80, 102, 125 },
	{ -181, -158, -135, -111, -88, -65, -42, -18, 4, 27, 51, 74, 97, 121 },
	{ -101, -81, -62, -42, -22, -2, 17, 37, 56, 76, 96, 116, 136, 155 },
	{ -134, -117, -100, -82, -65, -48, -30, -13, 3, 21, 38, 55, 73, 90 },
	{ -144, -119, -95, -70, -45, -20, 4, 29, 54, 79, 104, 129, 154, 179 },
	{ -135, -111, -87, -62, -38, -14, 9, 34, 58, 82, 107, 131, 155, 179 },
	{ -128, -108, -87, -67, -47, -26, -6, 13, 34, 54, 75, 95, 115, 136 },
	{ -151, -127, -104, -80, -56, -32, -8, 15, 38, 62, 86, 110, 134, 157 },
	{ -155, -128, -101, -74, -47, -20, 6, 33, 60, 87, 114, 141, 168, 195 },
	{ -173, -148, -123, -97, -72, -47, -22, 3, 28, 53, 78, 104, 129, 154 },
	{ -170, -142, -114, -86, -58, -30, -2, 24, 52, 80, 108, 136, 164, 192 },
	{ -152, -130, -108, -86, -64, -42, -20, 1, 23, 45, 67, 89, 111, 133 },
	{ -141, -121, -102, -82, -63, -43, -24, -4, 14, 34, 53, 73, 92, 111 },
	{ -107, -85, -62, -40, -18, 4, 26, 48, 71, 93, 115, 138, 160, 182 },
	{ -106, -87, -67, -48, -28, -9, 9, 29, 48, 68, 87, 106, 126, 145 },
	{ -162, -137, -113, -88, -64, -39, -15, 9, 33, 58, 82, 106, 131, 155 },
	{ -187, -158, -129, -99, -70, -41, -11, 17, 47, 76, 105, 135, 164, 193 },
	{ -118, -102, -86, -70, -54, -38, -22, -6, 9, 25, 41, 57, 73, 89 },
	{ -128, -111, -94, -77, -60, -43, -26, -9, 7, 24, 42, 59, 76, 93 },
	{ -140, -115, -90, -64, -39, -14, 10, 35, 60, 85, 111, 136, 161, 186 },
	{ -110, -92, -74, -57, -39, -22, -4, 13, 30, 48, 65, 83, 101, 118 },
	{ -62, -53, -44, -35, -27, -18, -9, 0, 8, 17, 26, 35, 43, 52 },
	{ -185, -161, -136, -111, -87, -62, -37, -13, 11, 35, 60, 85, 109, 134 },
	{ -144, -117, -89, -62, -35, -8, 18, 46, 73, 100, 127, 155, 182, 209 },
	{ -181, -151, -121, -91, -61, -31, -1, 28, 58, 88, 118, 148, 178, 208 },
	{ -151, -125, -98, -71, -44, -17, 9, 36, 62, 89, 116, 143, 170, 197 },
	{ -141, -121, -100, -79, -58, -38, -17, 3, 24, 44, 65, 86, 107, 127 },
	{ -118, -97, -76, -55, -35, -14, 6, 27, 48, 69, 90, 111, 132, 153 },
	{ -82, -69, -55, -41, -27, -14, 0, 13, 26, 40, 54, 68, 81, 95 },
	{ -165, -142, -119, -96, -74, -51, -28, -5, 16, 39, 62, 85, 107, 130 },
};
static int_t<4,1> bbox_head_multi_level_share_convs_2_0_conv2_weight[64][9] =
{ // torch.Size([64, 3, 3, 1])
	{ C(0xf), C(0x1), C(0x3), C(0xf), C(0x0), C(0x3), C(0xf), C(0x0), C(0x4), },
	{ C(0x2), C(0xf), C(0x1), C(0xf), C(0xa), C(0xb), C(0x2), C(0x4), C(0x3), },
	{ C(0xd), C(0xe), C(0xd), C(0x3), C(0x4), C(0x6), C(0x2), C(0x3), C(0x5), },
	{ C(0x2), C(0x2), C(0x2), C(0x1), C(0x1), C(0x0), C(0x2), C(0x1), C(0x1), },
	{ C(0xd), C(0xe), C(0xd), C(0x0), C(0x0), C(0x0), C(0x0), C(0xc), C(0xc), },
	{ C(0xd), C(0xe), C(0x0), C(0xb), C(0xb), C(0x1), C(0x1), C(0x4), C(0x7), },
	{ C(0x0), C(0x4), C(0x2), C(0x2), C(0x2), C(0xd), C(0x1), C(0xc), C(0xc), },
	{ C(0x0), C(0x1), C(0x3), C(0xf), C(0xf), C(0x2), C(0x0), C(0x1), C(0x5), },
	{ C(0xe), C(0x1), C(0x5), C(0x1), C(0x0), C(0x2), C(0x1), C(0x1), C(0x4), },
	{ C(0x7), C(0x4), C(0x2), C(0x3), C(0xa), C(0xa), C(0xf), C(0xd), C(0x4), },
	{ C(0x2), C(0xe), C(0x1), C(0xf), C(0xf), C(0x6), C(0xf), C(0x3), C(0x7), },
	{ C(0x0), C(0xf), C(0xa), C(0x0), C(0x2), C(0xc), C(0x0), C(0xd), C(0x9), },
	{ C(0x1), C(0x2), C(0x1), C(0xd), C(0xd), C(0xc), C(0xe), C(0xe), C(0xe), },
	{ C(0x1), C(0x0), C(0x6), C(0xf), C(0xf), C(0x3), C(0xe), C(0x3), C(0x6), },
	{ C(0xb), C(0xd), C(0xc), C(0x0), C(0x0), C(0xf), C(0x0), C(0x0), C(0xf), },
	{ C(0xf), C(0xf), C(0xf), C(0xf), C(0xf), C(0x1), C(0xd), C(0xd), C(0x0), },
	{ C(0xf), C(0xf), C(0xf), C(0x4), C(0x4), C(0x2), C(0x2), C(0x2), C(0x0), },
	{ C(0x0), C(0x1), C(0x2), C(0xf), C(0xf), C(0x3), C(0x3), C(0x7), C(0x7), },
	{ C(0x5), C(0x3), C(0x6), C(0x0), C(0xf), C(0x1), C(0x0), C(0x0), C(0xf), },
	{ C(0x1), C(0xd), C(0xf), C(0x5), C(0x1), C(0xc), C(0x7), C(0x6), C(0xe), },
	{ C(0xb), C(0xf), C(0x0), C(0xd), C(0x1), C(0x0), C(0x9), C(0xb), C(0xe), },
	{ C(0x4), C(0x1), C(0x3), C(0x2), C(0xf), C(0x1), C(0x2), C(0x0), C(0x0), },
	{ C(0xb), C(0xe), C(0xf), C(0xc), C(0xf), C(0x0), C(0xc), C(0x0), C(0x0), },
	{ C(0x2), C(0x3), C(0x5), C(0xf), C(0xe), C(0x1), C(0xb), C(0xa), C(0xb), },
	{ C(0x3), C(0x1), C(0x3), C(0x1), C(0x0), C(0x2), C(0x1), C(0x1), C(0x3), },
	{ C(0x7), C(0x0), C(0x2), C(0x7), C(0x3), C(0xf), C(0x7), C(0x1), C(0xc), },
	{ C(0x9), C(0xb), C(0x9), C(0x0), C(0x1), C(0x2), C(0x0), C(0x3), C(0x6), },
	{ C(0xe), C(0x0), C(0xf), C(0xe), C(0x2), C(0x0), C(0x9), C(0xf), C(0xf), },
	{ C(0xf), C(0x0), C(0xe), C(0x0), C(0x2), C(0x0), C(0x9), C(0xc), C(0xc), },
	{ C(0x5), C(0x1), C(0x0), C(0x4), C(0xf), C(0xe), C(0x5), C(0xf), C(0xd), },
	{ C(0x1), C(0x2), C(0x0), C(0x3), C(0x4), C(0x3), C(0x2), C(0xf), C(0x1), },
	{ C(0x2), C(0x3), C(0x1), C(0x2), C(0x1), C(0xf), C(0x5), C(0x4), C(0x2), },
	{ C(0x0), C(0x0), C(0xb), C(0x0), C(0x1), C(0xb), C(0x2), C(0x0), C(0x9), },
	{ C(0x7), C(0x3), C(0x6), C(0x4), C(0x1), C(0x5), C(0xc), C(0xb), C(0xa), },
	{ C(0x0), C(0x0), C(0xf), C(0x1), C(0x0), C(0x1), C(0x2), C(0x4), C(0x7), },
	{ C(0x2), C(0x3), C(0x3), C(0x4), C(0x1), C(0x1), C(0x1), C(0x0), C(0x1), },
	{ C(0xd), C(0xf), C(0xa), C(0xf), C(0x2), C(0x0), C(0xf), C(0x1), C(0x0), },
	{ C(0x2), C(0x2), C(0x1), C(0x3), C(0x1), C(0xe), C(0x3), C(0x2), C(0xe), },
	{ C(0xc), C(0xf), C(0xd), C(0xf), C(0x2), C(0x0), C(0xc), C(0xf), C(0xe), },
	{ C(0xf), C(0x0), C(0x2), C(0xe), C(0xf), C(0x1), C(0xd), C(0xc), C(0xd), },
	{ C(0xd), C(0xc), C(0x0), C(0xe), C(0xf), C(0x5), C(0xc), C(0xc), C(0x6), },
	{ C(0xe), C(0x0), C(0xc), C(0x0), C(0x3), C(0xf), C(0xd), C(0xb), C(0x9), },
	{ C(0xc), C(0xd), C(0xb), C(0xf), C(0x0), C(0xe), C(0x0), C(0x0), C(0xe), },
	{ C(0x9), C(0xe), C(0x9), C(0x0), C(0x2), C(0xe), C(0xf), C(0xf), C(0xf), },
	{ C(0xf), C(0xe), C(0xf), C(0x0), C(0xf), C(0xf), C(0xf), C(0xe), C(0xe), },
	{ C(0x3), C(0x2), C(0x6), C(0xc), C(0xd), C(0x4), C(0xa), C(0xd), C(0x7), },
	{ C(0x4), C(0x1), C(0x3), C(0x1), C(0xf), C(0x2), C(0x2), C(0x1), C(0x3), },
	{ C(0x1), C(0x2), C(0x1), C(0xf), C(0xf), C(0x0), C(0x9), C(0x9), C(0xa), },
	{ C(0xd), C(0xc), C(0x9), C(0x2), C(0x2), C(0xf), C(0x1), C(0x2), C(0x0), },
	{ C(0x0), C(0x1), C(0x0), C(0x1), C(0x2), C(0x1), C(0x1), C(0x2), C(0x1), },
	{ C(0x4), C(0x1), C(0x0), C(0x1), C(0xf), C(0x1), C(0x4), C(0x2), C(0x2), },
	{ C(0x0), C(0x2), C(0x7), C(0x0), C(0xe), C(0x5), C(0x0), C(0x0), C(0x2), },
	{ C(0xa), C(0x3), C(0x2), C(0xa), C(0x3), C(0x3), C(0xa), C(0x6), C(0x7), },
	{ C(0xc), C(0xe), C(0xd), C(0xf), C(0x0), C(0x0), C(0xe), C(0xe), C(0xd), },
	{ C(0xf), C(0xf), C(0xf), C(0x0), C(0xf), C(0xf), C(0x0), C(0x0), C(0xf), },
	{ C(0x5), C(0xd), C(0xb), C(0x5), C(0xc), C(0xb), C(0x7), C(0x3), C(0xf), },
	{ C(0x2), C(0x1), C(0x3), C(0xf), C(0x0), C(0x3), C(0x1), C(0x0), C(0x4), },
	{ C(0xd), C(0xf), C(0xe), C(0xe), C(0x0), C(0x0), C(0xb), C(0xe), C(0xf), },
	{ C(0xf), C(0xe), C(0xe), C(0xf), C(0xf), C(0xf), C(0xe), C(0xd), C(0xf), },
	{ C(0x0), C(0xe), C(0xe), C(0x1), C(0xf), C(0xd), C(0x0), C(0x0), C(0xc), },
	{ C(0x4), C(0x2), C(0x1), C(0x3), C(0x4), C(0xd), C(0x3), C(0xb), C(0x9), },
	{ C(0xe), C(0xe), C(0xf), C(0x0), C(0x0), C(0x1), C(0xd), C(0xe), C(0xd), },
	{ C(0x5), C(0x2), C(0xc), C(0x6), C(0x1), C(0xc), C(0x4), C(0xd), C(0xe), },
	{ C(0x4), C(0x2), C(0x0), C(0x5), C(0x4), C(0x0), C(0xe), C(0x3), C(0xc), },
};
static int bbox_head_multi_level_share_convs_2_0_relu2_threshold[64][7] =
{ // torch.Size([64, 7])
	{ 3, 10, 17, 24, 31, 38, 45 },
	{ 5, 18, 32, 45, 58, 71, 84 },
	{ 3, 13, 22, 31, 40, 49, 59 },
	{ 0, 6, 12, 18, 24, 30, 36 },
	{ 7, 15, 23, 31, 39, 47, 54 },
	{ 0, 11, 23, 35, 46, 58, 70 },
	{ 6, 16, 26, 37, 47, 57, 68 },
	{ 0, 8, 15, 22, 29, 37, 44 },
	{ 1, 8, 15, 22, 29, 36, 43 },
	{ 10, 24, 38, 52, 66, 80, 94 },
	{ 17, 36, 54, 72, 90, 109, 127 },
	{ 2, 13, 24, 35, 45, 56, 67 },
	{ 2, 11, 19, 27, 36, 44, 52 },
	{ 12, 29, 46, 63, 81, 98, 115 },
	{ 3, 11, 19, 27, 35, 43, 51 },
	{ 2, 10, 18, 26, 34, 42, 50 },
	{ 1, 9, 17, 25, 34, 42, 50 },
	{ 4, 14, 25, 35, 46, 56, 67 },
	{ 7, 16, 26, 36, 46, 55, 65 },
	{ 2, 12, 22, 32, 42, 52, 62 },
	{ 6, 19, 32, 45, 58, 72, 85 },
	{ 3, 9, 15, 21, 28, 34, 40 },
	{ 4, 13, 22, 31, 40, 49, 58 },
	{ 1, 15, 29, 43, 57, 71, 85 },
	{ 2, 8, 13, 19, 24, 29, 35 },
	{ 6, 20, 34, 47, 61, 75, 89 },
	{ -1, 11, 24, 37, 50, 63, 76 },
	{ 6, 16, 25, 35, 45, 55, 65 },
	{ 0, 9, 18, 28, 38, 47, 57 },
	{ 0, 9, 19, 28, 37, 47, 56 },
	{ 2, 13, 23, 33, 44, 54, 64 },
	{ 4, 13, 22, 31, 39, 48, 57 },
	{ 4, 16, 28, 40, 52, 64, 76 },
	{ 9, 24, 39, 54, 69, 84, 99 },
	{ 0, 11, 22, 33, 44, 55, 66 },
	{ 1, 9, 18, 27, 35, 44, 52 },
	{ 5, 14, 23, 32, 41, 49, 58 },
	{ 5, 15, 26, 36, 47, 57, 68 },
	{ -4, 7, 19, 31, 44, 56, 68 },
	{ 6, 17, 27, 38, 49, 59, 70 },
	{ 9, 23, 36, 50, 64, 78, 92 },
	{ 1, 13, 26, 38, 50, 63, 75 },
	{ 4, 16, 29, 41, 54, 66, 79 },
	{ 2, 15, 29, 43, 56, 70, 84 },
	{ 2, 6, 10, 14, 18, 22, 26 },
	{ 13, 31, 48, 65, 82, 100, 117 },
	{ 1, 7, 13, 19, 25, 31, 37 },
	{ 14, 28, 42, 56, 70, 84, 98 },
	{ 9, 23, 36, 50, 64, 78, 91 },
	{ 0, 4, 9, 13, 17, 22, 26 },
	{ 2, 11, 20, 28, 37, 46, 54 },
	{ 1, 7, 13, 19, 25, 31, 37 },
	{ 3, 14, 26, 38, 50, 61, 73 },
	{ 4, 10, 17, 23, 30, 36, 43 },
	{ 0, 5, 9, 14, 18, 22, 27 },
	{ 8, 32, 56, 80, 104, 128, 152 },
	{ -2, 10, 22, 35, 47, 59, 72 },
	{ 4, 10, 17, 23, 29, 35, 42 },
	{ 0, 10, 21, 32, 43, 54, 64 },
	{ 0, 8, 17, 25, 34, 43, 52 },
	{ 16, 34, 52, 70, 88, 106, 124 },
	{ 2, 8, 13, 19, 25, 31, 37 },
	{ 9, 24, 38, 53, 67, 82, 97 },
	{ 13, 30, 47, 64, 81, 97, 114 },
};
static int_t<4,64> bbox_head_multi_level_cls_0_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0xfcec1fdbc03b3f31L, 0x9a032db1e12e0395L, 0xeddcb1bcff0e3f1cL, 0xef0b2ef07ebc7ccbL) },
};
static int bbox_head_multi_level_cls_0_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -217, -188, -160, -132, -104, -76, -48, -20, 7, 35, 63, 91, 119, 147 },
};
static int_t<4,1> bbox_head_multi_level_cls_0_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0xf), C(0x9), C(0x0), C(0xe), C(0x9), C(0xc), C(0xd), C(0xd), C(0xd), },
};
static int bbox_head_multi_level_cls_0_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -126, -106, -86, -67, -47, -27, -7, 12, 32, 51, 71, 91, 111, 131 },
};
static int_t<4,64> bbox_head_multi_level_cls_1_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0x0d7e900201e536f2L, 0xedf161b2a11e1e0eL, 0xed946ca13000b5f7L, 0xd2b0ed99defc3cccL) },
};
static int bbox_head_multi_level_cls_1_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -194, -161, -128, -96, -63, -30, 2, 34, 67, 100, 133, 166, 198, 231 },
};
static int_t<4,1> bbox_head_multi_level_cls_1_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0xd), C(0xf), C(0xe), C(0xc), C(0xb), C(0xd), C(0xb), C(0x9), C(0xb), },
};
static int bbox_head_multi_level_cls_1_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -117, -99, -81, -63, -44, -26, -8, 9, 27, 46, 64, 82, 100, 119 },
};
static int_t<4,64> bbox_head_multi_level_cls_2_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0x0401d9ff3fe21092L, 0x21102141e12ea211L, 0x36fe0f202f101219L, 0xdf55f42d0013f212L) },
};
static int bbox_head_multi_level_cls_2_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -129, -109, -89, -69, -48, -28, -8, 11, 31, 52, 72, 92, 112, 132 },
};
static int_t<4,1> bbox_head_multi_level_cls_2_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0x6), C(0x7), C(0x6), C(0x6), C(0x6), C(0x7), C(0x5), C(0x5), C(0x7), },
};
static int bbox_head_multi_level_cls_2_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -191, -161, -131, -101, -71, -41, -11, 18, 48, 78, 108, 138, 168, 198 },
};
static int_t<4,64> bbox_head_multi_level_bbox_0_conv1_weight[4][1] =
{ // torch.Size([4, 1, 1, 64])
	{ C64(0x0c76ea760f7f3127L, 0xf0f02dce70920fffL, 0x2fbe21919f70002fL, 0xf160362904f02070L) },
	{ C64(0x0d5fe0bd57ef90f1L, 0x00f3079fc6b031f9L, 0x352bfab71f0906fdL, 0xfe3f73021f7210c1L) },
	{ C64(0x1e9e009b0db29f75L, 0x01e121a706c1012fL, 0xff210950afff73f0L, 0x17fe11d97ef25040L) },
	{ C64(0x00adf0ae0aef9e71L, 0x014aef9717cf1c02L, 0xf1009931feec7493L, 0xd72f2eac7e0c433fL) },
};
static int bbox_head_multi_level_bbox_0_quant1_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -183, -151, -119, -87, -55, -24, 7, 39, 71, 103, 135, 166, 198, 230 },
	{ -167, -141, -114, -88, -61, -34, -8, 18, 44, 71, 97, 124, 150, 177 },
	{ -161, -133, -106, -78, -50, -23, 4, 32, 60, 87, 115, 143, 170, 198 },
	{ -240, -209, -177, -146, -114, -83, -51, -20, 11, 42, 74, 105, 137, 168 },
};
static int_t<4,1> bbox_head_multi_level_bbox_0_conv2_weight[4][9] =
{ // torch.Size([4, 3, 3, 1])
	{ C(0x0), C(0x9), C(0xf), C(0x5), C(0x9), C(0xd), C(0x0), C(0x9), C(0xe), },
	{ C(0xf), C(0x4), C(0x1), C(0xe), C(0x9), C(0x9), C(0x0), C(0x9), C(0xe), },
	{ C(0xf), C(0xd), C(0xf), C(0xe), C(0xb), C(0xd), C(0xf), C(0xc), C(0xe), },
	{ C(0xf), C(0xe), C(0xf), C(0xe), C(0xc), C(0xd), C(0xe), C(0xc), C(0xd), },
};
static int bbox_head_multi_level_bbox_0_quant2_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -129, -106, -84, -62, -39, -17, 4, 27, 49, 71, 94, 116, 138, 161 },
	{ -132, -112, -91, -70, -50, -29, -8, 11, 32, 53, 73, 94, 115, 135 },
	{ -175, -151, -126, -101, -76, -52, -27, -2, 21, 46, 71, 96, 120, 145 },
	{ -207, -185, -163, -141, -119, -97, -75, -53, -30, -8, 13, 35, 57, 79 },
};
static int_t<4,64> bbox_head_multi_level_bbox_1_conv1_weight[4][1] =
{ // torch.Size([4, 1, 1, 64])
	{ C64(0x2102211064224060L, 0xf0ef1ffff9e3e309L, 0xfc1fee01e214fe92L, 0xb0f926f3ae37df69L) },
	{ C64(0x97f0df0d330e0002L, 0x001f102224351150L, 0xf0170ff17df9c1aeL, 0x3bef9be19f615b41L) },
	{ C64(0x222f10f9d22299f2L, 0xdf20ae12e372300cL, 0xfe04efd11112f9f2L, 0x1906d1e122051020L) },
	{ C64(0xe4101ff70a3247e1L, 0x50201feeff9ce221L, 0xf10f912fcfec1711L, 0xe7fc7cf0d00fc00fL) },
};
static int bbox_head_multi_level_bbox_1_quant1_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -144, -124, -104, -85, -65, -45, -25, -5, 14, 33, 53, 73, 93, 113 },
	{ -136, -116, -97, -77, -57, -37, -18, 1, 21, 41, 61, 80, 100, 120 },
	{ -195, -170, -145, -120, -95, -70, -45, -20, 4, 29, 54, 79, 104, 129 },
	{ -146, -119, -91, -63, -35, -7, 20, 47, 75, 103, 131, 159, 187, 214 },
};
static int_t<4,1> bbox_head_multi_level_bbox_1_conv2_weight[4][9] =
{ // torch.Size([4, 3, 3, 1])
	{ C(0xe), C(0xa), C(0x1), C(0xd), C(0x9), C(0x4), C(0xd), C(0x9), C(0x1), },
	{ C(0x4), C(0xd), C(0x0), C(0x4), C(0x7), C(0x7), C(0x1), C(0x6), C(0x1), },
	{ C(0x1), C(0x2), C(0x1), C(0x3), C(0x4), C(0x2), C(0x2), C(0x4), C(0x2), },
	{ C(0xe), C(0xd), C(0xe), C(0xd), C(0xd), C(0xd), C(0xd), C(0xc), C(0xe), },
};
static int bbox_head_multi_level_bbox_1_quant2_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -128, -104, -80, -57, -33, -9, 14, 37, 61, 85, 109, 132, 156, 180 },
	{ -140, -122, -104, -86, -67, -49, -31, -13, 5, 23, 41, 59, 78, 96 },
	{ -127, -109, -91, -72, -54, -35, -17, 1, 19, 38, 56, 75, 93, 112 },
	{ -155, -136, -116, -96, -76, -57, -37, -17, 2, 21, 41, 61, 81, 100 },
};
static int_t<4,64> bbox_head_multi_level_bbox_2_conv1_weight[4][1] =
{ // torch.Size([4, 1, 1, 64])
	{ C64(0x1a20efcf4f162cf0L, 0x0001021006f2b1f7L, 0xe050a1a20a9ad010L, 0xf40063f971003f1cL) },
	{ C64(0x1210000b3d1f3df6L, 0xedf177ff1a045d20L, 0x02fffa10714edca2L, 0xf714ef2fee33ca10L) },
	{ C64(0x040f67af3097df10L, 0xf9000e04fd4e4cecL, 0x1200efb90cb90ed3L, 0x5e13a1f5ef2ac307L) },
	{ C64(0x01d0259d0092f11cL, 0x3210ba110c0f6b0fL, 0x04e006f94e9cf494L, 0x19f7d1ecf019e700L) },
};
static int bbox_head_multi_level_bbox_2_quant1_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -104, -86, -68, -50, -32, -15, 2, 20, 38, 55, 73, 91, 109, 127 },
	{ -141, -121, -101, -81, -60, -40, -20, 0, 19, 39, 59, 79, 99, 119 },
	{ -167, -143, -119, -95, -71, -47, -23, 0, 24, 48, 72, 96, 120, 144 },
	{ -202, -175, -147, -119, -92, -64, -36, -8, 18, 46, 74, 102, 129, 157 },
};
static int_t<4,1> bbox_head_multi_level_bbox_2_conv2_weight[4][9] =
{ // torch.Size([4, 3, 3, 1])
	{ C(0x2), C(0x6), C(0x4), C(0x2), C(0x7), C(0x5), C(0x3), C(0x7), C(0x6), },
	{ C(0xc), C(0xb), C(0xb), C(0xb), C(0x9), C(0x9), C(0xc), C(0xc), C(0xd), },
	{ C(0xe), C(0xd), C(0xe), C(0xd), C(0xb), C(0xd), C(0xf), C(0xc), C(0xd), },
	{ C(0xd), C(0xc), C(0xd), C(0xe), C(0xc), C(0xd), C(0xf), C(0xc), C(0xd), },
};
static int bbox_head_multi_level_bbox_2_quant2_threshold[4][14] =
{ // torch.Size([4, 14])
	{ -148, -125, -102, -80, -57, -34, -12, 10, 33, 55, 78, 101, 123, 146 },
	{ -117, -97, -77, -56, -36, -16, 4, 24, 44, 65, 85, 105, 126, 146 },
	{ -292, -256, -220, -183, -147, -111, -75, -39, -3, 32, 68, 104, 140, 176 },
	{ -305, -273, -242, -210, -178, -147, -115, -83, -52, -20, 11, 42, 74, 106 },
};
static int_t<4,64> bbox_head_multi_level_obj_0_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0x164c5016b0f6d920L, 0x779a90420fdb327fL, 0x96c79901e9001c97L, 0x5ff9eb92e0c75626L) },
};
static int bbox_head_multi_level_obj_0_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -201, -167, -133, -98, -64, -30, 3, 37, 71, 105, 140, 174, 208, 242 },
};
static int_t<4,1> bbox_head_multi_level_obj_0_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0x0), C(0x9), C(0x2), C(0xe), C(0x9), C(0xc), C(0xe), C(0xf), C(0x0), },
};
static int bbox_head_multi_level_obj_0_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -83, -67, -50, -34, -17, -1, 14, 31, 47, 63, 80, 96, 112, 129 },
};
static int_t<4,64> bbox_head_multi_level_obj_1_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0x032c4914fb393225L, 0x3d4997f97f95e9feL, 0x957a09aa276f6e22L, 0x1da2f77707e0ab4aL) },
};
static int bbox_head_multi_level_obj_1_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -152, -128, -104, -80, -56, -31, -7, 16, 40, 64, 88, 112, 136, 160 },
};
static int_t<4,1> bbox_head_multi_level_obj_1_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0x0), C(0x1), C(0x0), C(0xd), C(0x9), C(0xd), C(0x2), C(0x9), C(0x1), },
};
static int bbox_head_multi_level_obj_1_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -76, -63, -51, -38, -25, -12, 0, 12, 25, 38, 50, 63, 76, 89 },
};
static int_t<4,64> bbox_head_multi_level_obj_2_conv1_weight[1][1] =
{ // torch.Size([1, 1, 1, 64])
	{ C64(0x96f9e2e720e504ecL, 0x9f9e7069a7dd137dL, 0x74e7e4b12004fbccL, 0xd191499f2e5bf1cdL) },
};
static int bbox_head_multi_level_obj_2_quant1_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -161, -132, -104, -75, -46, -18, 10, 39, 67, 96, 125, 153, 182, 211 },
};
static int_t<4,1> bbox_head_multi_level_obj_2_conv2_weight[1][9] =
{ // torch.Size([1, 3, 3, 1])
	{ C(0x3), C(0x7), C(0x6), C(0x0), C(0x5), C(0x3), C(0xf), C(0x2), C(0x0), },
};
static int bbox_head_multi_level_obj_2_quant2_threshold[1][14] =
{ // torch.Size([1, 14])
	{ -104, -91, -79, -66, -53, -40, -27, -15, -2, 10, 23, 36, 48, 61 },
};
static int_t<4,64> bbox_head_multi_level_kps_0_conv1_weight[10][1] =
{ // torch.Size([10, 1, 1, 64])
	{ C64(0x0371997f012cb112L, 0x01f30f1f5030f910L, 0x2ee1ebb0df9effd0L, 0x6f720df2f7e11f60L) },
	{ C64(0x0fff1f0dc9c14000L, 0x123b09213ff13ee7L, 0xff1452491f071132L, 0x12e0b22bf1041052L) },
	{ C64(0xf3209a3b00aa2015L, 0xf01c0ebe410ff71fL, 0x0fe004009e4e0110L, 0x7071101d070e5f70L) },
	{ C64(0xf1df1e0dc9d33000L, 0xd23c09114fe13e17L, 0xf10342590f071131L, 0xf2e0a22cf2f50242L) },
	{ C64(0xf730997a00bcd014L, 0xf0ff0ddf413ff53fL, 0x2effe0f1bf9cf0f0L, 0x7d720d11f7f03060L) },
	{ C64(0x2e3e2f2dc9f300e0L, 0xf21309404df110f7L, 0x30052e294e070110L, 0x21c2b111f2241033L) },
	{ C64(0x2bed779f0ed1500dL, 0x212cf310c00026d1L, 0xe221333e31721211L, 0xc19f011f192d0fc0L) },
	{ C64(0x11c0d0b134ef5f11L, 0x0d1af690d69f0e1aL, 0xf11af6e7e1d9122fL, 0xc03d623e4e1f04deL) },
	{ C64(0x2c1077b50043001bL, 0x41020472df1229d1L, 0x0f42fdff72c10001L, 0xc190f011090fcfafL) },
	{ C64(0x3fffd0b133dc5011L, 0x3e19f690d6a00efaL, 0xf12b16d7f1d9120fL, 0xe12d623d3d1d02eeL) },
};
static int bbox_head_multi_level_kps_0_quant1_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -162, -135, -109, -83, -56, -30, -4, 22, 48, 74, 101, 127, 153, 180 },
	{ -164, -138, -112, -86, -60, -34, -8, 18, 44, 70, 96, 122, 148, 174 },
	{ -172, -143, -114, -85, -56, -27, 1, 30, 59, 88, 118, 147, 176, 205 },
	{ -174, -148, -121, -95, -69, -42, -16, 9, 35, 62, 88, 114, 141, 167 },
	{ -164, -138, -111, -85, -59, -32, -6, 19, 46, 72, 98, 125, 151, 177 },
	{ -143, -120, -97, -73, -50, -26, -3, 19, 43, 66, 90, 113, 137, 160 },
	{ -171, -146, -121, -96, -71, -45, -20, 4, 29, 54, 79, 104, 130, 155 },
	{ -203, -170, -138, -106, -73, -41, -9, 22, 55, 87, 119, 151, 184, 216 },
	{ -188, -160, -132, -103, -75, -46, -18, 9, 38, 66, 95, 123, 152, 180 },
	{ -202, -170, -138, -106, -74, -41, -9, 22, 54, 86, 118, 151, 183, 215 },
};
static int_t<4,1> bbox_head_multi_level_kps_0_conv2_weight[10][9] =
{ // torch.Size([10, 3, 3, 1])
	{ C(0x0), C(0x9), C(0xd), C(0x2), C(0x9), C(0xd), C(0x0), C(0x9), C(0xc), },
	{ C(0x0), C(0xe), C(0xf), C(0x2), C(0x7), C(0x7), C(0x2), C(0x7), C(0x5), },
	{ C(0x0), C(0x9), C(0xd), C(0x2), C(0x9), C(0xd), C(0x0), C(0x9), C(0xd), },
	{ C(0x1), C(0xd), C(0xf), C(0x2), C(0x7), C(0x7), C(0x1), C(0x7), C(0x5), },
	{ C(0x0), C(0x9), C(0xd), C(0x2), C(0x9), C(0xc), C(0x0), C(0x9), C(0xc), },
	{ C(0x0), C(0xe), C(0xf), C(0x2), C(0x7), C(0x7), C(0x1), C(0x7), C(0x4), },
	{ C(0x0), C(0x4), C(0x2), C(0xd), C(0x7), C(0x3), C(0x0), C(0x7), C(0x4), },
	{ C(0xf), C(0x2), C(0x0), C(0xd), C(0x9), C(0x9), C(0xf), C(0x9), C(0xc), },
	{ C(0x0), C(0x5), C(0x2), C(0xe), C(0x7), C(0x3), C(0x0), C(0x7), C(0x4), },
	{ C(0xf), C(0x2), C(0x1), C(0xd), C(0x9), C(0x9), C(0xf), C(0x9), C(0xc), },
};
static int bbox_head_multi_level_kps_0_quant2_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -145, -115, -85, -56, -26, 3, 33, 63, 93, 123, 153, 183, 212, 242 },
	{ -174, -141, -107, -74, -40, -6, 26, 60, 93, 127, 161, 194, 228, 261 },
	{ -201, -173, -146, -118, -90, -63, -35, -7, 19, 47, 75, 103, 130, 158 },
	{ -170, -137, -104, -71, -38, -5, 27, 59, 92, 125, 158, 191, 224, 257 },
	{ -163, -136, -110, -83, -56, -29, -3, 23, 50, 76, 103, 130, 156, 183 },
	{ -234, -200, -166, -132, -98, -64, -30, 3, 37, 71, 105, 139, 172, 206 },
	{ -137, -110, -83, -56, -29, -2, 23, 50, 77, 104, 131, 158, 185, 212 },
	{ -226, -198, -170, -141, -113, -84, -56, -28, 0, 28, 57, 85, 113, 142 },
	{ -189, -162, -135, -108, -81, -54, -27, 0, 26, 52, 79, 106, 133, 160 },
	{ -226, -197, -169, -141, -112, -84, -56, -27, 0, 28, 56, 85, 113, 141 },
};
static int_t<4,64> bbox_head_multi_level_kps_1_conv1_weight[10][1] =
{ // torch.Size([10, 1, 1, 64])
	{ C64(0x419ff130720f109bL, 0x3f3002ff02e3dd0dL, 0x0f1bc007e3ae0f91L, 0xacf214234d379e6fL) },
	{ C64(0x9915f0de20b1210fL, 0x0f434202f03f0172L, 0xf122c0010cd912a5L, 0x70fbb200ef703e3fL) },
	{ C64(0xf47f2f9fa31fceb1L, 0x0090fefffcd37102L, 0x23f0bf0bbf451059L, 0x7027ccf023dde2c6L) },
	{ C64(0x9a3450de1fb120e4L, 0x001340021f33f173L, 0x0ff1c1f00b0ae2b4L, 0x51fabd2c0371302fL) },
	{ C64(0x4ea001705ef1229fL, 0x107f13002721adeeL, 0x0df0400531aaf0a4L, 0x9ffd30405056af5cL) },
	{ C64(0x73ddce42ed62e023L, 0x10dfde00111b119eL, 0xffd21f1123331059L, 0x91037be2ce9e24ceL) },
	{ C64(0xbf22afbfaff0f07fL, 0x0f122101fe2b4211L, 0x0335501a20212177L, 0x7400e1b1bdd97291L) },
	{ C64(0x9ef1d30c26dd003dL, 0x001f22ed13a62070L, 0x002a300190f100d3L, 0x7cf196021e72ac62L) },
	{ C64(0xe411a09eb21fceccL, 0x10b201f0ed0f7121L, 0x063fcf1fc213316fL, 0x7017c2d50edbf2c7L) },
	{ C64(0x9e10211c17cc0f21L, 0x10ef20ed23970070L, 0x2ef930f0ae21dfd0L, 0x7cf1923d3274ae51L) },
};
static int bbox_head_multi_level_kps_1_quant1_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -156, -134, -112, -90, -69, -47, -25, -3, 18, 40, 62, 84, 106, 128 },
	{ -123, -102, -80, -58, -36, -15, 6, 28, 49, 71, 93, 115, 136, 158 },
	{ -166, -142, -118, -93, -69, -45, -20, 3, 28, 52, 76, 101, 125, 150 },
	{ -131, -108, -86, -63, -41, -19, 3, 25, 47, 70, 92, 115, 137, 159 },
	{ -143, -121, -99, -77, -55, -33, -11, 11, 33, 55, 77, 99, 121, 143 },
	{ -148, -125, -103, -81, -58, -36, -14, 8, 30, 52, 75, 97, 119, 142 },
	{ -115, -94, -73, -52, -30, -9, 11, 32, 53, 75, 96, 117, 138, 160 },
	{ -184, -158, -132, -106, -80, -55, -29, -3, 22, 47, 73, 99, 125, 151 },
	{ -152, -128, -105, -81, -58, -34, -11, 12, 35, 59, 82, 106, 129, 153 },
	{ -194, -167, -141, -115, -88, -62, -35, -9, 16, 43, 69, 96, 122, 148 },
};
static int_t<4,1> bbox_head_multi_level_kps_1_conv2_weight[10][9] =
{ // torch.Size([10, 3, 3, 1])
	{ C(0xe), C(0x9), C(0xf), C(0xe), C(0x9), C(0xe), C(0xe), C(0x9), C(0xe), },
	{ C(0x5), C(0x0), C(0x1), C(0x7), C(0x7), C(0x6), C(0x2), C(0x5), C(0x1), },
	{ C(0x3), C(0x6), C(0x0), C(0x4), C(0x7), C(0x0), C(0x4), C(0x6), C(0x0), },
	{ C(0x4), C(0x0), C(0x2), C(0x4), C(0x7), C(0x7), C(0x1), C(0x4), C(0x2), },
	{ C(0xe), C(0xa), C(0xf), C(0xd), C(0x9), C(0xe), C(0xc), C(0x9), C(0xe), },
	{ C(0xc), C(0x0), C(0xf), C(0xa), C(0x9), C(0x9), C(0xd), C(0xb), C(0xe), },
	{ C(0x1), C(0x4), C(0x0), C(0x3), C(0x7), C(0x1), C(0x3), C(0x7), C(0x3), },
	{ C(0x4), C(0x0), C(0x2), C(0x6), C(0x7), C(0x7), C(0x2), C(0x6), C(0x1), },
	{ C(0x2), C(0x4), C(0xe), C(0x4), C(0x7), C(0x0), C(0x5), C(0x7), C(0x1), },
	{ C(0x3), C(0x0), C(0x1), C(0x4), C(0x7), C(0x7), C(0x1), C(0x5), C(0x2), },
};
static int bbox_head_multi_level_kps_1_quant2_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -158, -127, -96, -65, -34, -4, 26, 57, 88, 119, 149, 180, 211, 242 },
	{ -191, -155, -120, -84, -49, -14, 21, 56, 92, 127, 163, 198, 234, 269 },
	{ -186, -159, -133, -106, -80, -53, -27, 0, 25, 52, 78, 105, 131, 158 },
	{ -159, -129, -99, -69, -39, -9, 20, 51, 81, 111, 141, 171, 201, 231 },
	{ -174, -145, -117, -89, -60, -32, -4, 24, 52, 80, 109, 137, 165, 194 },
	{ -219, -186, -153, -119, -86, -53, -19, 13, 46, 80, 113, 146, 180, 213 },
	{ -152, -123, -95, -67, -39, -11, 16, 45, 73, 101, 129, 157, 185, 214 },
	{ -236, -205, -174, -144, -113, -82, -51, -21, 9, 40, 70, 101, 132, 163 },
	{ -184, -157, -130, -102, -75, -48, -20, 6, 33, 61, 88, 115, 143, 170 },
	{ -203, -176, -150, -123, -97, -71, -44, -18, 8, 34, 60, 87, 113, 140 },
};
static int_t<4,64> bbox_head_multi_level_kps_2_conv1_weight[10][1] =
{ // torch.Size([10, 1, 1, 64])
	{ C64(0x01efc1fdef5da10fL, 0xf40a01020a3c2e13L, 0xf2debf6637e7732fL, 0x3210da430d07afe0L) },
	{ C64(0x1fef2f11e201900dL, 0x0910cf2c36f2d420L, 0xff2210b929e14900L, 0x09cf115fddf1551fL) },
	{ C64(0xfe9fef7d51317fd3L, 0x130ef3e1fbc291ffL, 0x20fe001f0f20914fL, 0x111076ce16e0d01fL) },
	{ C64(0x002fe2ee4e0f72fdL, 0xe7ee32011a4c3d13L, 0x01edff47261fc701L, 0xf612ef662910bce0L) },
	{ C64(0xff91307e61007200L, 0x10f50fe002b2a10cL, 0x1e0f60fb0d6d9010L, 0xfed15710c2fd0100L) },
	{ C64(0x10df1f5fe2219ef4L, 0x0900e5fe5fc4a6ffL, 0x021f01ed1b235f5fL, 0x1dff420ed4c5f321L) },
	{ C64(0x2f2f303150c2410bL, 0xfdf50d0c35f2e220L, 0x0f0131ab2929bfe0L, 0x0ec1367309f9520eL) },
	{ C64(0x0f2d0f7c0c21dfdeL, 0x0c01e1002902a603L, 0x02fc1e1fec25407dL, 0x000f44550dc6b310L) },
	{ C64(0x1d91f07f7f3171fdL, 0xf41ef2ff4cf0a033L, 0x210dee0f3e1e915fL, 0x00df74640ce1b1ffL) },
	{ C64(0xff1efe7dfc22dec3L, 0x2b01f1f2f9e4b6e1L, 0x10fd1f1fbd354f7eL, 0x003f44c216c7c221L) },
};
static int bbox_head_multi_level_kps_2_quant1_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -176, -149, -121, -94, -66, -39, -12, 15, 42, 69, 97, 124, 152, 179 },
	{ -165, -140, -115, -90, -65, -40, -15, 9, 34, 58, 83, 108, 133, 158 },
	{ -168, -143, -118, -92, -67, -42, -16, 8, 33, 59, 84, 110, 135, 160 },
	{ -158, -133, -107, -82, -57, -32, -7, 18, 43, 68, 93, 119, 144, 169 },
	{ -139, -118, -96, -75, -54, -33, -11, 9, 30, 51, 73, 94, 115, 136 },
	{ -156, -133, -109, -85, -62, -38, -14, 8, 32, 56, 79, 103, 127, 150 },
	{ -156, -132, -108, -83, -59, -34, -10, 13, 38, 62, 86, 111, 135, 160 },
	{ -178, -151, -124, -98, -71, -45, -18, 8, 34, 61, 88, 114, 141, 167 },
	{ -168, -142, -115, -89, -63, -37, -11, 14, 40, 66, 92, 118, 145, 171 },
	{ -175, -149, -123, -96, -70, -44, -18, 7, 34, 60, 86, 112, 138, 165 },
};
static int_t<4,1> bbox_head_multi_level_kps_2_conv2_weight[10][9] =
{ // torch.Size([10, 3, 3, 1])
	{ C(0xd), C(0xa), C(0xa), C(0xe), C(0x9), C(0x9), C(0xf), C(0x9), C(0x9), },
	{ C(0x7), C(0x6), C(0x3), C(0x7), C(0x7), C(0x6), C(0x5), C(0x6), C(0x5), },
	{ C(0x5), C(0x6), C(0x5), C(0x3), C(0x7), C(0x6), C(0x3), C(0x7), C(0x4), },
	{ C(0xb), C(0x9), C(0xa), C(0xb), C(0xa), C(0x9), C(0xd), C(0xb), C(0xb), },
	{ C(0x3), C(0x4), C(0x5), C(0x2), C(0x6), C(0x6), C(0x2), C(0x7), C(0x7), },
	{ C(0x4), C(0x6), C(0x5), C(0x5), C(0x7), C(0x7), C(0x3), C(0x5), C(0x4), },
	{ C(0x1), C(0x4), C(0x4), C(0x2), C(0x6), C(0x6), C(0x2), C(0x7), C(0x7), },
	{ C(0x3), C(0x6), C(0x5), C(0x5), C(0x7), C(0x7), C(0x4), C(0x6), C(0x6), },
	{ C(0x2), C(0x4), C(0x3), C(0x2), C(0x6), C(0x4), C(0x4), C(0x7), C(0x6), },
	{ C(0x4), C(0x5), C(0x5), C(0x5), C(0x7), C(0x7), C(0x4), C(0x6), C(0x6), },
};
static int bbox_head_multi_level_kps_2_quant2_threshold[10][14] =
{ // torch.Size([10, 14])
	{ -182, -148, -114, -80, -46, -12, 21, 55, 89, 123, 157, 191, 225, 259 },
	{ -197, -160, -123, -86, -49, -13, 23, 60, 97, 134, 171, 207, 244, 281 },
	{ -237, -205, -173, -141, -108, -76, -44, -12, 19, 52, 84, 116, 148, 180 },
	{ -186, -151, -116, -81, -46, -11, 23, 58, 93, 128, 163, 198, 233, 268 },
	{ -212, -178, -144, -111, -77, -43, -9, 24, 57, 91, 125, 159, 193, 226 },
	{ -245, -209, -172, -135, -98, -61, -25, 11, 48, 85, 121, 158, 195, 232 },
	{ -164, -134, -104, -75, -45, -15, 13, 43, 73, 103, 132, 162, 192, 221 },
	{ -247, -215, -182, -150, -118, -86, -53, -21, 10, 42, 74, 107, 139, 171 },
	{ -193, -166, -139, -112, -85, -58, -31, -4, 23, 50, 77, 104, 131, 158 },
	{ -247, -215, -182, -150, -118, -85, -53, -21, 10, 43, 75, 107, 139, 172 },
};
